
Ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f30  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  080050d0  080050d0  000060d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005488  08005488  000071d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005488  08005488  00006488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005490  08005490  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005490  08005490  00006490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005494  08005494  00006494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08005498  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  200001d4  0800566c  000071d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  0800566c  0000738c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000826d  00000000  00000000  00007204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015db  00000000  00000000  0000f471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  00010a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000056f  00000000  00000000  00011168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b4c  00000000  00000000  000116d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009419  00000000  00000000  00028223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e03f  00000000  00000000  0003163c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf67b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d6c  00000000  00000000  000bf6c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000c242c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080050b8 	.word	0x080050b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	080050b8 	.word	0x080050b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <measure>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float measure(GPIO_TypeDef *GPIOx, uint16_t TRIG, uint16_t ECHO) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	807b      	strh	r3, [r7, #2]
 8000f54:	4613      	mov	r3, r2
 8000f56:	803b      	strh	r3, [r7, #0]
    HAL_GPIO_WritePin(GPIOx, TRIG, GPIO_PIN_SET);
 8000f58:	887b      	ldrh	r3, [r7, #2]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 fe08 	bl	8001b74 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000f64:	2001      	movs	r0, #1
 8000f66:	f000 fb5f 	bl	8001628 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOx, TRIG, GPIO_PIN_RESET);
 8000f6a:	887b      	ldrh	r3, [r7, #2]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4619      	mov	r1, r3
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f000 fdff 	bl	8001b74 <HAL_GPIO_WritePin>

    while (HAL_GPIO_ReadPin(GPIOx, ECHO) == GPIO_PIN_RESET);
 8000f76:	bf00      	nop
 8000f78:	883b      	ldrh	r3, [r7, #0]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f000 fde1 	bl	8001b44 <HAL_GPIO_ReadPin>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0f7      	beq.n	8000f78 <measure+0x30>
    uint32_t start_time = HAL_GetTick();
 8000f88:	f000 fb42 	bl	8001610 <HAL_GetTick>
 8000f8c:	6178      	str	r0, [r7, #20]
    while (HAL_GPIO_ReadPin(GPIOx, ECHO) == GPIO_PIN_SET);
 8000f8e:	bf00      	nop
 8000f90:	883b      	ldrh	r3, [r7, #0]
 8000f92:	4619      	mov	r1, r3
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f000 fdd5 	bl	8001b44 <HAL_GPIO_ReadPin>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d0f7      	beq.n	8000f90 <measure+0x48>
    uint32_t end_time = HAL_GetTick();
 8000fa0:	f000 fb36 	bl	8001610 <HAL_GetTick>
 8000fa4:	6138      	str	r0, [r7, #16]

    uint32_t pulse_duration = (end_time - start_time) * 1000;
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fb0:	fb02 f303 	mul.w	r3, r2, r3
 8000fb4:	60fb      	str	r3, [r7, #12]
    float distance = ((pulse_duration * 0.0343) / 2);
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f7ff faac 	bl	8000514 <__aeabi_ui2d>
 8000fbc:	a310      	add	r3, pc, #64	@ (adr r3, 8001000 <measure+0xb8>)
 8000fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc2:	f7ff fb21 	bl	8000608 <__aeabi_dmul>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4610      	mov	r0, r2
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fd6:	f7ff fc41 	bl	800085c <__aeabi_ddiv>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4610      	mov	r0, r2
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f7ff fde9 	bl	8000bb8 <__aeabi_d2f>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	60bb      	str	r3, [r7, #8]
    return distance;
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	ee07 3a90 	vmov	s15, r3
}
 8000ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	f3af 8000 	nop.w
 8001000:	04816f00 	.word	0x04816f00
 8001004:	3fa18fc5 	.word	0x3fa18fc5

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b090      	sub	sp, #64	@ 0x40
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100e:	f000 fa99 	bl	8001544 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001012:	f000 f897 	bl	8001144 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001016:	f000 f86b 	bl	80010f0 <MX_USART2_UART_Init>
  //MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  char message[50];
  sprintf(message, "Starting...\r\n");
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	492e      	ldr	r1, [pc, #184]	@ (80010d8 <main+0xd0>)
 800101e:	4618      	mov	r0, r3
 8001020:	f001 ff1c 	bl	8002e5c <siprintf>
  HAL_UART_Transmit(&huart2, message, strlen((char*)message), HAL_MAX_DELAY);
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff f92a 	bl	8000280 <strlen>
 800102c:	4603      	mov	r3, r0
 800102e:	b29a      	uxth	r2, r3
 8001030:	1d39      	adds	r1, r7, #4
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	4829      	ldr	r0, [pc, #164]	@ (80010dc <main+0xd4>)
 8001038:	f000 fe3a 	bl	8001cb0 <HAL_UART_Transmit>
  uint8_t cnt = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //float distance = measure(GPIOC, GPIO_PIN_3, GPIO_PIN_2);
	  float distance = measure(GPIOA, GPIO_PIN_1, GPIO_PIN_0);
 8001042:	2201      	movs	r2, #1
 8001044:	2102      	movs	r1, #2
 8001046:	4826      	ldr	r0, [pc, #152]	@ (80010e0 <main+0xd8>)
 8001048:	f7ff ff7e 	bl	8000f48 <measure>
 800104c:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
	  sprintf(message, "Ultrasonic 1: %.2f cm\r\n", distance);
 8001050:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001052:	f7ff fa81 	bl	8000558 <__aeabi_f2d>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	1d38      	adds	r0, r7, #4
 800105c:	4921      	ldr	r1, [pc, #132]	@ (80010e4 <main+0xdc>)
 800105e:	f001 fefd 	bl	8002e5c <siprintf>
	  HAL_UART_Transmit(&huart2, message, strlen((char*)message), HAL_MAX_DELAY);
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff f90b 	bl	8000280 <strlen>
 800106a:	4603      	mov	r3, r0
 800106c:	b29a      	uxth	r2, r3
 800106e:	1d39      	adds	r1, r7, #4
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	4819      	ldr	r0, [pc, #100]	@ (80010dc <main+0xd4>)
 8001076:	f000 fe1b 	bl	8001cb0 <HAL_UART_Transmit>

	  distance = measure(GPIOC, GPIO_PIN_3, GPIO_PIN_2);
 800107a:	2204      	movs	r2, #4
 800107c:	2108      	movs	r1, #8
 800107e:	481a      	ldr	r0, [pc, #104]	@ (80010e8 <main+0xe0>)
 8001080:	f7ff ff62 	bl	8000f48 <measure>
 8001084:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
	  sprintf(message, "Ultrasonic 2: %.2f cm\r\n", distance);
 8001088:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800108a:	f7ff fa65 	bl	8000558 <__aeabi_f2d>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	1d38      	adds	r0, r7, #4
 8001094:	4915      	ldr	r1, [pc, #84]	@ (80010ec <main+0xe4>)
 8001096:	f001 fee1 	bl	8002e5c <siprintf>
	  HAL_UART_Transmit(&huart2, message, strlen((char*)message), HAL_MAX_DELAY);
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff f8ef 	bl	8000280 <strlen>
 80010a2:	4603      	mov	r3, r0
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	1d39      	adds	r1, r7, #4
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ac:	480b      	ldr	r0, [pc, #44]	@ (80010dc <main+0xd4>)
 80010ae:	f000 fdff 	bl	8001cb0 <HAL_UART_Transmit>
	  HAL_Delay(100);
 80010b2:	2064      	movs	r0, #100	@ 0x64
 80010b4:	f000 fab8 	bl	8001628 <HAL_Delay>
	  cnt++;
 80010b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80010bc:	3301      	adds	r3, #1
 80010be:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	  if (cnt == 250) break;
 80010c2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80010c6:	2bfa      	cmp	r3, #250	@ 0xfa
 80010c8:	d000      	beq.n	80010cc <main+0xc4>
  {
 80010ca:	e7ba      	b.n	8001042 <main+0x3a>
	  if (cnt == 250) break;
 80010cc:	bf00      	nop
 80010ce:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3740      	adds	r7, #64	@ 0x40
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	080050d0 	.word	0x080050d0
 80010dc:	200001f0 	.word	0x200001f0
 80010e0:	40020000 	.word	0x40020000
 80010e4:	080050e0 	.word	0x080050e0
 80010e8:	40020800 	.word	0x40020800
 80010ec:	080050f8 	.word	0x080050f8

080010f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <MX_USART2_UART_Init+0x4c>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	@ (8001140 <MX_USART2_UART_Init+0x50>)
 80010f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <MX_USART2_UART_Init+0x4c>)
 80010fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001100:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001102:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <MX_USART2_UART_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001108:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <MX_USART2_UART_Init+0x4c>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800110e:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <MX_USART2_UART_Init+0x4c>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001114:	4b09      	ldr	r3, [pc, #36]	@ (800113c <MX_USART2_UART_Init+0x4c>)
 8001116:	220c      	movs	r2, #12
 8001118:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111a:	4b08      	ldr	r3, [pc, #32]	@ (800113c <MX_USART2_UART_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <MX_USART2_UART_Init+0x4c>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001126:	4805      	ldr	r0, [pc, #20]	@ (800113c <MX_USART2_UART_Init+0x4c>)
 8001128:	f000 fd72 	bl	8001c10 <HAL_UART_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001132:	f000 f85f 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200001f0 	.word	0x200001f0
 8001140:	40004400 	.word	0x40004400

08001144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	4b22      	ldr	r3, [pc, #136]	@ (80011e8 <MX_GPIO_Init+0xa4>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	4a21      	ldr	r2, [pc, #132]	@ (80011e8 <MX_GPIO_Init+0xa4>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6313      	str	r3, [r2, #48]	@ 0x30
 800116a:	4b1f      	ldr	r3, [pc, #124]	@ (80011e8 <MX_GPIO_Init+0xa4>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	4b1b      	ldr	r3, [pc, #108]	@ (80011e8 <MX_GPIO_Init+0xa4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	4a1a      	ldr	r2, [pc, #104]	@ (80011e8 <MX_GPIO_Init+0xa4>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	6313      	str	r3, [r2, #48]	@ 0x30
 8001186:	4b18      	ldr	r3, [pc, #96]	@ (80011e8 <MX_GPIO_Init+0xa4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]

    GPIO_InitStruct.Pin = GPIO_PIN_1;  // Trigger pin for GPIOA
 8001192:	2302      	movs	r3, #2
 8001194:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;  // Push-pull output mode
 8001196:	2301      	movs	r3, #1
 8001198:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;  // No pull-up or pull-down resistors
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	4619      	mov	r1, r3
 80011a4:	4811      	ldr	r0, [pc, #68]	@ (80011ec <MX_GPIO_Init+0xa8>)
 80011a6:	f000 fb49 	bl	800183c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;  // Trigger pin for GPIOC
 80011aa:	2308      	movs	r3, #8
 80011ac:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	4619      	mov	r1, r3
 80011b4:	480e      	ldr	r0, [pc, #56]	@ (80011f0 <MX_GPIO_Init+0xac>)
 80011b6:	f000 fb41 	bl	800183c <HAL_GPIO_Init>

    // Configure Echo pins as input for GPIOA (Pin 0) and GPIOC (Pin 2)
    GPIO_InitStruct.Pin = GPIO_PIN_0;  // Echo pin for GPIOA
 80011ba:	2301      	movs	r3, #1
 80011bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;  // Input mode for Echo
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c2:	f107 030c 	add.w	r3, r7, #12
 80011c6:	4619      	mov	r1, r3
 80011c8:	4808      	ldr	r0, [pc, #32]	@ (80011ec <MX_GPIO_Init+0xa8>)
 80011ca:	f000 fb37 	bl	800183c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;  // Echo pin for GPIOC
 80011ce:	2304      	movs	r3, #4
 80011d0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d2:	f107 030c 	add.w	r3, r7, #12
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	@ (80011f0 <MX_GPIO_Init+0xac>)
 80011da:	f000 fb2f 	bl	800183c <HAL_GPIO_Init>
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011de:	bf00      	nop
 80011e0:	3720      	adds	r7, #32
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40020800 	.word	0x40020800

080011f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
}
 80011fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <Error_Handler+0x8>

08001200 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	4b10      	ldr	r3, [pc, #64]	@ (800124c <HAL_MspInit+0x4c>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120e:	4a0f      	ldr	r2, [pc, #60]	@ (800124c <HAL_MspInit+0x4c>)
 8001210:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001214:	6453      	str	r3, [r2, #68]	@ 0x44
 8001216:	4b0d      	ldr	r3, [pc, #52]	@ (800124c <HAL_MspInit+0x4c>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	4b09      	ldr	r3, [pc, #36]	@ (800124c <HAL_MspInit+0x4c>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122a:	4a08      	ldr	r2, [pc, #32]	@ (800124c <HAL_MspInit+0x4c>)
 800122c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001230:	6413      	str	r3, [r2, #64]	@ 0x40
 8001232:	4b06      	ldr	r3, [pc, #24]	@ (800124c <HAL_MspInit+0x4c>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800

08001250 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	@ 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a19      	ldr	r2, [pc, #100]	@ (80012d4 <HAL_UART_MspInit+0x84>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d12b      	bne.n	80012ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	4b18      	ldr	r3, [pc, #96]	@ (80012d8 <HAL_UART_MspInit+0x88>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127a:	4a17      	ldr	r2, [pc, #92]	@ (80012d8 <HAL_UART_MspInit+0x88>)
 800127c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001280:	6413      	str	r3, [r2, #64]	@ 0x40
 8001282:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <HAL_UART_MspInit+0x88>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <HAL_UART_MspInit+0x88>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a10      	ldr	r2, [pc, #64]	@ (80012d8 <HAL_UART_MspInit+0x88>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <HAL_UART_MspInit+0x88>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012aa:	230c      	movs	r3, #12
 80012ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012ba:	2307      	movs	r3, #7
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	@ (80012dc <HAL_UART_MspInit+0x8c>)
 80012c6:	f000 fab9 	bl	800183c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80012ca:	bf00      	nop
 80012cc:	3728      	adds	r7, #40	@ 0x28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40004400 	.word	0x40004400
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020000 	.word	0x40020000

080012e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <NMI_Handler+0x4>

080012e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <HardFault_Handler+0x4>

080012f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <MemManage_Handler+0x4>

080012f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <BusFault_Handler+0x4>

08001300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <UsageFault_Handler+0x4>

08001308 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001336:	f000 f957 	bl	80015e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}

0800133e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  return 1;
 8001342:	2301      	movs	r3, #1
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <_kill>:

int _kill(int pid, int sig)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001358:	f001 fe36 	bl	8002fc8 <__errno>
 800135c:	4603      	mov	r3, r0
 800135e:	2216      	movs	r2, #22
 8001360:	601a      	str	r2, [r3, #0]
  return -1;
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <_exit>:

void _exit (int status)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001376:	f04f 31ff 	mov.w	r1, #4294967295
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffe7 	bl	800134e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <_exit+0x12>

08001384 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	e00a      	b.n	80013ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001396:	f3af 8000 	nop.w
 800139a:	4601      	mov	r1, r0
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	60ba      	str	r2, [r7, #8]
 80013a2:	b2ca      	uxtb	r2, r1
 80013a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	3301      	adds	r3, #1
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	697a      	ldr	r2, [r7, #20]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	dbf0      	blt.n	8001396 <_read+0x12>
  }

  return len;
 80013b4:	687b      	ldr	r3, [r7, #4]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b086      	sub	sp, #24
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	60f8      	str	r0, [r7, #12]
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	e009      	b.n	80013e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	1c5a      	adds	r2, r3, #1
 80013d4:	60ba      	str	r2, [r7, #8]
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	3301      	adds	r3, #1
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	dbf1      	blt.n	80013d0 <_write+0x12>
  }
  return len;
 80013ec:	687b      	ldr	r3, [r7, #4]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <_close>:

int _close(int file)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800141e:	605a      	str	r2, [r3, #4]
  return 0;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <_isatty>:

int _isatty(int file)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001436:	2301      	movs	r3, #1
}
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001468:	4a14      	ldr	r2, [pc, #80]	@ (80014bc <_sbrk+0x5c>)
 800146a:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <_sbrk+0x60>)
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001474:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d102      	bne.n	8001482 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <_sbrk+0x64>)
 800147e:	4a12      	ldr	r2, [pc, #72]	@ (80014c8 <_sbrk+0x68>)
 8001480:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001482:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	429a      	cmp	r2, r3
 800148e:	d207      	bcs.n	80014a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001490:	f001 fd9a 	bl	8002fc8 <__errno>
 8001494:	4603      	mov	r3, r0
 8001496:	220c      	movs	r2, #12
 8001498:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	e009      	b.n	80014b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a0:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <_sbrk+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014a6:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <_sbrk+0x64>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	4a05      	ldr	r2, [pc, #20]	@ (80014c4 <_sbrk+0x64>)
 80014b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014b2:	68fb      	ldr	r3, [r7, #12]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20018000 	.word	0x20018000
 80014c0:	00000400 	.word	0x00000400
 80014c4:	20000238 	.word	0x20000238
 80014c8:	20000390 	.word	0x20000390

080014cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d0:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <SystemInit+0x20>)
 80014d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014d6:	4a05      	ldr	r2, [pc, #20]	@ (80014ec <SystemInit+0x20>)
 80014d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001528 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014f4:	f7ff ffea 	bl	80014cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f8:	480c      	ldr	r0, [pc, #48]	@ (800152c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014fa:	490d      	ldr	r1, [pc, #52]	@ (8001530 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001534 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001500:	e002      	b.n	8001508 <LoopCopyDataInit>

08001502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001506:	3304      	adds	r3, #4

08001508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800150c:	d3f9      	bcc.n	8001502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150e:	4a0a      	ldr	r2, [pc, #40]	@ (8001538 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001510:	4c0a      	ldr	r4, [pc, #40]	@ (800153c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001514:	e001      	b.n	800151a <LoopFillZerobss>

08001516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001518:	3204      	adds	r2, #4

0800151a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800151c:	d3fb      	bcc.n	8001516 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800151e:	f001 fd59 	bl	8002fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001522:	f7ff fd71 	bl	8001008 <main>
  bx  lr    
 8001526:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001528:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800152c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001530:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001534:	08005498 	.word	0x08005498
  ldr r2, =_sbss
 8001538:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800153c:	2000038c 	.word	0x2000038c

08001540 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001540:	e7fe      	b.n	8001540 <ADC_IRQHandler>
	...

08001544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001548:	4b0e      	ldr	r3, [pc, #56]	@ (8001584 <HAL_Init+0x40>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0d      	ldr	r2, [pc, #52]	@ (8001584 <HAL_Init+0x40>)
 800154e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001552:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001554:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <HAL_Init+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0a      	ldr	r2, [pc, #40]	@ (8001584 <HAL_Init+0x40>)
 800155a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800155e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001560:	4b08      	ldr	r3, [pc, #32]	@ (8001584 <HAL_Init+0x40>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a07      	ldr	r2, [pc, #28]	@ (8001584 <HAL_Init+0x40>)
 8001566:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800156a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800156c:	2003      	movs	r0, #3
 800156e:	f000 f931 	bl	80017d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001572:	200f      	movs	r0, #15
 8001574:	f000 f808 	bl	8001588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001578:	f7ff fe42 	bl	8001200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023c00 	.word	0x40023c00

08001588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001590:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <HAL_InitTick+0x54>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <HAL_InitTick+0x58>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800159e:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 f93b 	bl	8001822 <HAL_SYSTICK_Config>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00e      	b.n	80015d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b0f      	cmp	r3, #15
 80015ba:	d80a      	bhi.n	80015d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015bc:	2200      	movs	r2, #0
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295
 80015c4:	f000 f911 	bl	80017ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c8:	4a06      	ldr	r2, [pc, #24]	@ (80015e4 <HAL_InitTick+0x5c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	e000      	b.n	80015d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000000 	.word	0x20000000
 80015e0:	20000008 	.word	0x20000008
 80015e4:	20000004 	.word	0x20000004

080015e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ec:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <HAL_IncTick+0x20>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b06      	ldr	r3, [pc, #24]	@ (800160c <HAL_IncTick+0x24>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4413      	add	r3, r2
 80015f8:	4a04      	ldr	r2, [pc, #16]	@ (800160c <HAL_IncTick+0x24>)
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000008 	.word	0x20000008
 800160c:	2000023c 	.word	0x2000023c

08001610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return uwTick;
 8001614:	4b03      	ldr	r3, [pc, #12]	@ (8001624 <HAL_GetTick+0x14>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	2000023c 	.word	0x2000023c

08001628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001630:	f7ff ffee 	bl	8001610 <HAL_GetTick>
 8001634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001640:	d005      	beq.n	800164e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001642:	4b0a      	ldr	r3, [pc, #40]	@ (800166c <HAL_Delay+0x44>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4413      	add	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800164e:	bf00      	nop
 8001650:	f7ff ffde 	bl	8001610 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	429a      	cmp	r2, r3
 800165e:	d8f7      	bhi.n	8001650 <HAL_Delay+0x28>
  {
  }
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000008 	.word	0x20000008

08001670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001680:	4b0c      	ldr	r3, [pc, #48]	@ (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800168c:	4013      	ands	r3, r2
 800168e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001698:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800169c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a2:	4a04      	ldr	r2, [pc, #16]	@ (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	60d3      	str	r3, [r2, #12]
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016bc:	4b04      	ldr	r3, [pc, #16]	@ (80016d0 <__NVIC_GetPriorityGrouping+0x18>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	0a1b      	lsrs	r3, r3, #8
 80016c2:	f003 0307 	and.w	r3, r3, #7
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	6039      	str	r1, [r7, #0]
 80016de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	db0a      	blt.n	80016fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	490c      	ldr	r1, [pc, #48]	@ (8001720 <__NVIC_SetPriority+0x4c>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	0112      	lsls	r2, r2, #4
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	440b      	add	r3, r1
 80016f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016fc:	e00a      	b.n	8001714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4908      	ldr	r1, [pc, #32]	@ (8001724 <__NVIC_SetPriority+0x50>)
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	3b04      	subs	r3, #4
 800170c:	0112      	lsls	r2, r2, #4
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	440b      	add	r3, r1
 8001712:	761a      	strb	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000e100 	.word	0xe000e100
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001728:	b480      	push	{r7}
 800172a:	b089      	sub	sp, #36	@ 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f1c3 0307 	rsb	r3, r3, #7
 8001742:	2b04      	cmp	r3, #4
 8001744:	bf28      	it	cs
 8001746:	2304      	movcs	r3, #4
 8001748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3304      	adds	r3, #4
 800174e:	2b06      	cmp	r3, #6
 8001750:	d902      	bls.n	8001758 <NVIC_EncodePriority+0x30>
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3b03      	subs	r3, #3
 8001756:	e000      	b.n	800175a <NVIC_EncodePriority+0x32>
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	f04f 32ff 	mov.w	r2, #4294967295
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43da      	mvns	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	401a      	ands	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001770:	f04f 31ff 	mov.w	r1, #4294967295
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	fa01 f303 	lsl.w	r3, r1, r3
 800177a:	43d9      	mvns	r1, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	4313      	orrs	r3, r2
         );
}
 8001782:	4618      	mov	r0, r3
 8001784:	3724      	adds	r7, #36	@ 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017a0:	d301      	bcc.n	80017a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00f      	b.n	80017c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a6:	4a0a      	ldr	r2, [pc, #40]	@ (80017d0 <SysTick_Config+0x40>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ae:	210f      	movs	r1, #15
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295
 80017b4:	f7ff ff8e 	bl	80016d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b8:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <SysTick_Config+0x40>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017be:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <SysTick_Config+0x40>)
 80017c0:	2207      	movs	r2, #7
 80017c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	e000e010 	.word	0xe000e010

080017d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ff47 	bl	8001670 <__NVIC_SetPriorityGrouping>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017fc:	f7ff ff5c 	bl	80016b8 <__NVIC_GetPriorityGrouping>
 8001800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	6978      	ldr	r0, [r7, #20]
 8001808:	f7ff ff8e 	bl	8001728 <NVIC_EncodePriority>
 800180c:	4602      	mov	r2, r0
 800180e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff5d 	bl	80016d4 <__NVIC_SetPriority>
}
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ffb0 	bl	8001790 <SysTick_Config>
 8001830:	4603      	mov	r3, r0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	@ 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800184e:	2300      	movs	r3, #0
 8001850:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
 8001856:	e159      	b.n	8001b0c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001858:	2201      	movs	r2, #1
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	429a      	cmp	r2, r3
 8001872:	f040 8148 	bne.w	8001b06 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	2b01      	cmp	r3, #1
 8001880:	d005      	beq.n	800188e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800188a:	2b02      	cmp	r3, #2
 800188c:	d130      	bne.n	80018f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	2203      	movs	r2, #3
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018c4:	2201      	movs	r2, #1
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	091b      	lsrs	r3, r3, #4
 80018da:	f003 0201 	and.w	r2, r3, #1
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d017      	beq.n	800192c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	2203      	movs	r2, #3
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d123      	bne.n	8001980 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	08da      	lsrs	r2, r3, #3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3208      	adds	r2, #8
 8001940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001944:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	220f      	movs	r2, #15
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	691a      	ldr	r2, [r3, #16]
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	08da      	lsrs	r2, r3, #3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3208      	adds	r2, #8
 800197a:	69b9      	ldr	r1, [r7, #24]
 800197c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	2203      	movs	r2, #3
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0203 	and.w	r2, r3, #3
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 80a2 	beq.w	8001b06 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b57      	ldr	r3, [pc, #348]	@ (8001b24 <HAL_GPIO_Init+0x2e8>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ca:	4a56      	ldr	r2, [pc, #344]	@ (8001b24 <HAL_GPIO_Init+0x2e8>)
 80019cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019d2:	4b54      	ldr	r3, [pc, #336]	@ (8001b24 <HAL_GPIO_Init+0x2e8>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019de:	4a52      	ldr	r2, [pc, #328]	@ (8001b28 <HAL_GPIO_Init+0x2ec>)
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	3302      	adds	r3, #2
 80019e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	220f      	movs	r2, #15
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a49      	ldr	r2, [pc, #292]	@ (8001b2c <HAL_GPIO_Init+0x2f0>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d019      	beq.n	8001a3e <HAL_GPIO_Init+0x202>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a48      	ldr	r2, [pc, #288]	@ (8001b30 <HAL_GPIO_Init+0x2f4>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d013      	beq.n	8001a3a <HAL_GPIO_Init+0x1fe>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a47      	ldr	r2, [pc, #284]	@ (8001b34 <HAL_GPIO_Init+0x2f8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d00d      	beq.n	8001a36 <HAL_GPIO_Init+0x1fa>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a46      	ldr	r2, [pc, #280]	@ (8001b38 <HAL_GPIO_Init+0x2fc>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d007      	beq.n	8001a32 <HAL_GPIO_Init+0x1f6>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a45      	ldr	r2, [pc, #276]	@ (8001b3c <HAL_GPIO_Init+0x300>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d101      	bne.n	8001a2e <HAL_GPIO_Init+0x1f2>
 8001a2a:	2304      	movs	r3, #4
 8001a2c:	e008      	b.n	8001a40 <HAL_GPIO_Init+0x204>
 8001a2e:	2307      	movs	r3, #7
 8001a30:	e006      	b.n	8001a40 <HAL_GPIO_Init+0x204>
 8001a32:	2303      	movs	r3, #3
 8001a34:	e004      	b.n	8001a40 <HAL_GPIO_Init+0x204>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e002      	b.n	8001a40 <HAL_GPIO_Init+0x204>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <HAL_GPIO_Init+0x204>
 8001a3e:	2300      	movs	r3, #0
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	f002 0203 	and.w	r2, r2, #3
 8001a46:	0092      	lsls	r2, r2, #2
 8001a48:	4093      	lsls	r3, r2
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a50:	4935      	ldr	r1, [pc, #212]	@ (8001b28 <HAL_GPIO_Init+0x2ec>)
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	089b      	lsrs	r3, r3, #2
 8001a56:	3302      	adds	r3, #2
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a5e:	4b38      	ldr	r3, [pc, #224]	@ (8001b40 <HAL_GPIO_Init+0x304>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a82:	4a2f      	ldr	r2, [pc, #188]	@ (8001b40 <HAL_GPIO_Init+0x304>)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a88:	4b2d      	ldr	r3, [pc, #180]	@ (8001b40 <HAL_GPIO_Init+0x304>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001aac:	4a24      	ldr	r2, [pc, #144]	@ (8001b40 <HAL_GPIO_Init+0x304>)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ab2:	4b23      	ldr	r3, [pc, #140]	@ (8001b40 <HAL_GPIO_Init+0x304>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ad6:	4a1a      	ldr	r2, [pc, #104]	@ (8001b40 <HAL_GPIO_Init+0x304>)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001adc:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <HAL_GPIO_Init+0x304>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b00:	4a0f      	ldr	r2, [pc, #60]	@ (8001b40 <HAL_GPIO_Init+0x304>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	61fb      	str	r3, [r7, #28]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	2b0f      	cmp	r3, #15
 8001b10:	f67f aea2 	bls.w	8001858 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	3724      	adds	r7, #36	@ 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40013800 	.word	0x40013800
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	40020400 	.word	0x40020400
 8001b34:	40020800 	.word	0x40020800
 8001b38:	40020c00 	.word	0x40020c00
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40013c00 	.word	0x40013c00

08001b44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691a      	ldr	r2, [r3, #16]
 8001b54:	887b      	ldrh	r3, [r7, #2]
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d002      	beq.n	8001b62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	e001      	b.n	8001b66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	807b      	strh	r3, [r7, #2]
 8001b80:	4613      	mov	r3, r2
 8001b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b84:	787b      	ldrb	r3, [r7, #1]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b8a:	887a      	ldrh	r2, [r7, #2]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b90:	e003      	b.n	8001b9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b92:	887b      	ldrh	r3, [r7, #2]
 8001b94:	041a      	lsls	r2, r3, #16
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	619a      	str	r2, [r3, #24]
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bac:	4b03      	ldr	r3, [pc, #12]	@ (8001bbc <HAL_RCC_GetHCLKFreq+0x14>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000000 	.word	0x20000000

08001bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bc4:	f7ff fff0 	bl	8001ba8 <HAL_RCC_GetHCLKFreq>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	4b05      	ldr	r3, [pc, #20]	@ (8001be0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	0a9b      	lsrs	r3, r3, #10
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	4903      	ldr	r1, [pc, #12]	@ (8001be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bd6:	5ccb      	ldrb	r3, [r1, r3]
 8001bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40023800 	.word	0x40023800
 8001be4:	08005110 	.word	0x08005110

08001be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bec:	f7ff ffdc 	bl	8001ba8 <HAL_RCC_GetHCLKFreq>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	4b05      	ldr	r3, [pc, #20]	@ (8001c08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	0b5b      	lsrs	r3, r3, #13
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	4903      	ldr	r1, [pc, #12]	@ (8001c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bfe:	5ccb      	ldrb	r3, [r1, r3]
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	08005110 	.word	0x08005110

08001c10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e042      	b.n	8001ca8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d106      	bne.n	8001c3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fb0a 	bl	8001250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2224      	movs	r2, #36	@ 0x24
 8001c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f973 	bl	8001f40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001c68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695a      	ldr	r2, [r3, #20]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001c78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001c88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2220      	movs	r2, #32
 8001c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08a      	sub	sp, #40	@ 0x28
 8001cb4:	af02      	add	r7, sp, #8
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	603b      	str	r3, [r7, #0]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b20      	cmp	r3, #32
 8001cce:	d175      	bne.n	8001dbc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <HAL_UART_Transmit+0x2c>
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e06e      	b.n	8001dbe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2221      	movs	r2, #33	@ 0x21
 8001cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cee:	f7ff fc8f 	bl	8001610 <HAL_GetTick>
 8001cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	88fa      	ldrh	r2, [r7, #6]
 8001cf8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	88fa      	ldrh	r2, [r7, #6]
 8001cfe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d08:	d108      	bne.n	8001d1c <HAL_UART_Transmit+0x6c>
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d104      	bne.n	8001d1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	e003      	b.n	8001d24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001d24:	e02e      	b.n	8001d84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2180      	movs	r1, #128	@ 0x80
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 f848 	bl	8001dc6 <UART_WaitOnFlagUntilTimeout>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e03a      	b.n	8001dbe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10b      	bne.n	8001d66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	461a      	mov	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	3302      	adds	r3, #2
 8001d62:	61bb      	str	r3, [r7, #24]
 8001d64:	e007      	b.n	8001d76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	781a      	ldrb	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	3301      	adds	r3, #1
 8001d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1cb      	bne.n	8001d26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2200      	movs	r2, #0
 8001d96:	2140      	movs	r1, #64	@ 0x40
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f000 f814 	bl	8001dc6 <UART_WaitOnFlagUntilTimeout>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2220      	movs	r2, #32
 8001da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e006      	b.n	8001dbe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2220      	movs	r2, #32
 8001db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e000      	b.n	8001dbe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001dbc:	2302      	movs	r3, #2
  }
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3720      	adds	r7, #32
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	603b      	str	r3, [r7, #0]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dd6:	e03b      	b.n	8001e50 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dd8:	6a3b      	ldr	r3, [r7, #32]
 8001dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dde:	d037      	beq.n	8001e50 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001de0:	f7ff fc16 	bl	8001610 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	6a3a      	ldr	r2, [r7, #32]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d302      	bcc.n	8001df6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e03a      	b.n	8001e70 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d023      	beq.n	8001e50 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b80      	cmp	r3, #128	@ 0x80
 8001e0c:	d020      	beq.n	8001e50 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	2b40      	cmp	r3, #64	@ 0x40
 8001e12:	d01d      	beq.n	8001e50 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	d116      	bne.n	8001e50 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f000 f81d 	bl	8001e78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2208      	movs	r2, #8
 8001e42:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e00f      	b.n	8001e70 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	bf0c      	ite	eq
 8001e60:	2301      	moveq	r3, #1
 8001e62:	2300      	movne	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	461a      	mov	r2, r3
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d0b4      	beq.n	8001dd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b095      	sub	sp, #84	@ 0x54
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	330c      	adds	r3, #12
 8001e86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e8a:	e853 3f00 	ldrex	r3, [r3]
 8001e8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	330c      	adds	r3, #12
 8001e9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ea0:	643a      	str	r2, [r7, #64]	@ 0x40
 8001ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ea4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001ea6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001ea8:	e841 2300 	strex	r3, r2, [r1]
 8001eac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1e5      	bne.n	8001e80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	3314      	adds	r3, #20
 8001eba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	e853 3f00 	ldrex	r3, [r3]
 8001ec2:	61fb      	str	r3, [r7, #28]
   return(result);
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f023 0301 	bic.w	r3, r3, #1
 8001eca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	3314      	adds	r3, #20
 8001ed2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ed4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ed8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001eda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001edc:	e841 2300 	strex	r3, r2, [r1]
 8001ee0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1e5      	bne.n	8001eb4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d119      	bne.n	8001f24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	330c      	adds	r3, #12
 8001ef6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	e853 3f00 	ldrex	r3, [r3]
 8001efe:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f023 0310 	bic.w	r3, r3, #16
 8001f06:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	330c      	adds	r3, #12
 8001f0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001f10:	61ba      	str	r2, [r7, #24]
 8001f12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f14:	6979      	ldr	r1, [r7, #20]
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	e841 2300 	strex	r3, r2, [r1]
 8001f1c:	613b      	str	r3, [r7, #16]
   return(result);
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1e5      	bne.n	8001ef0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2220      	movs	r2, #32
 8001f28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001f32:	bf00      	nop
 8001f34:	3754      	adds	r7, #84	@ 0x54
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
	...

08001f40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f44:	b0c0      	sub	sp, #256	@ 0x100
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f5c:	68d9      	ldr	r1, [r3, #12]
 8001f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	ea40 0301 	orr.w	r3, r0, r1
 8001f68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	431a      	orrs	r2, r3
 8001f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001f98:	f021 010c 	bic.w	r1, r1, #12
 8001f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001fa6:	430b      	orrs	r3, r1
 8001fa8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fba:	6999      	ldr	r1, [r3, #24]
 8001fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	ea40 0301 	orr.w	r3, r0, r1
 8001fc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	4b8f      	ldr	r3, [pc, #572]	@ (800220c <UART_SetConfig+0x2cc>)
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d005      	beq.n	8001fe0 <UART_SetConfig+0xa0>
 8001fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	4b8d      	ldr	r3, [pc, #564]	@ (8002210 <UART_SetConfig+0x2d0>)
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d104      	bne.n	8001fea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001fe0:	f7ff fe02 	bl	8001be8 <HAL_RCC_GetPCLK2Freq>
 8001fe4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001fe8:	e003      	b.n	8001ff2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001fea:	f7ff fde9 	bl	8001bc0 <HAL_RCC_GetPCLK1Freq>
 8001fee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ffc:	f040 810c 	bne.w	8002218 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002000:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002004:	2200      	movs	r2, #0
 8002006:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800200a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800200e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002012:	4622      	mov	r2, r4
 8002014:	462b      	mov	r3, r5
 8002016:	1891      	adds	r1, r2, r2
 8002018:	65b9      	str	r1, [r7, #88]	@ 0x58
 800201a:	415b      	adcs	r3, r3
 800201c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800201e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002022:	4621      	mov	r1, r4
 8002024:	eb12 0801 	adds.w	r8, r2, r1
 8002028:	4629      	mov	r1, r5
 800202a:	eb43 0901 	adc.w	r9, r3, r1
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800203a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800203e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002042:	4690      	mov	r8, r2
 8002044:	4699      	mov	r9, r3
 8002046:	4623      	mov	r3, r4
 8002048:	eb18 0303 	adds.w	r3, r8, r3
 800204c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002050:	462b      	mov	r3, r5
 8002052:	eb49 0303 	adc.w	r3, r9, r3
 8002056:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800205a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002066:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800206a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800206e:	460b      	mov	r3, r1
 8002070:	18db      	adds	r3, r3, r3
 8002072:	653b      	str	r3, [r7, #80]	@ 0x50
 8002074:	4613      	mov	r3, r2
 8002076:	eb42 0303 	adc.w	r3, r2, r3
 800207a:	657b      	str	r3, [r7, #84]	@ 0x54
 800207c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002080:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002084:	f7fe fde8 	bl	8000c58 <__aeabi_uldivmod>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4b61      	ldr	r3, [pc, #388]	@ (8002214 <UART_SetConfig+0x2d4>)
 800208e:	fba3 2302 	umull	r2, r3, r3, r2
 8002092:	095b      	lsrs	r3, r3, #5
 8002094:	011c      	lsls	r4, r3, #4
 8002096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800209a:	2200      	movs	r2, #0
 800209c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80020a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80020a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80020a8:	4642      	mov	r2, r8
 80020aa:	464b      	mov	r3, r9
 80020ac:	1891      	adds	r1, r2, r2
 80020ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80020b0:	415b      	adcs	r3, r3
 80020b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80020b8:	4641      	mov	r1, r8
 80020ba:	eb12 0a01 	adds.w	sl, r2, r1
 80020be:	4649      	mov	r1, r9
 80020c0:	eb43 0b01 	adc.w	fp, r3, r1
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80020d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80020d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020d8:	4692      	mov	sl, r2
 80020da:	469b      	mov	fp, r3
 80020dc:	4643      	mov	r3, r8
 80020de:	eb1a 0303 	adds.w	r3, sl, r3
 80020e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80020e6:	464b      	mov	r3, r9
 80020e8:	eb4b 0303 	adc.w	r3, fp, r3
 80020ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80020f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80020fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002100:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002104:	460b      	mov	r3, r1
 8002106:	18db      	adds	r3, r3, r3
 8002108:	643b      	str	r3, [r7, #64]	@ 0x40
 800210a:	4613      	mov	r3, r2
 800210c:	eb42 0303 	adc.w	r3, r2, r3
 8002110:	647b      	str	r3, [r7, #68]	@ 0x44
 8002112:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002116:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800211a:	f7fe fd9d 	bl	8000c58 <__aeabi_uldivmod>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4611      	mov	r1, r2
 8002124:	4b3b      	ldr	r3, [pc, #236]	@ (8002214 <UART_SetConfig+0x2d4>)
 8002126:	fba3 2301 	umull	r2, r3, r3, r1
 800212a:	095b      	lsrs	r3, r3, #5
 800212c:	2264      	movs	r2, #100	@ 0x64
 800212e:	fb02 f303 	mul.w	r3, r2, r3
 8002132:	1acb      	subs	r3, r1, r3
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800213a:	4b36      	ldr	r3, [pc, #216]	@ (8002214 <UART_SetConfig+0x2d4>)
 800213c:	fba3 2302 	umull	r2, r3, r3, r2
 8002140:	095b      	lsrs	r3, r3, #5
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002148:	441c      	add	r4, r3
 800214a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800214e:	2200      	movs	r2, #0
 8002150:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002154:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002158:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800215c:	4642      	mov	r2, r8
 800215e:	464b      	mov	r3, r9
 8002160:	1891      	adds	r1, r2, r2
 8002162:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002164:	415b      	adcs	r3, r3
 8002166:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002168:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800216c:	4641      	mov	r1, r8
 800216e:	1851      	adds	r1, r2, r1
 8002170:	6339      	str	r1, [r7, #48]	@ 0x30
 8002172:	4649      	mov	r1, r9
 8002174:	414b      	adcs	r3, r1
 8002176:	637b      	str	r3, [r7, #52]	@ 0x34
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	f04f 0300 	mov.w	r3, #0
 8002180:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002184:	4659      	mov	r1, fp
 8002186:	00cb      	lsls	r3, r1, #3
 8002188:	4651      	mov	r1, sl
 800218a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800218e:	4651      	mov	r1, sl
 8002190:	00ca      	lsls	r2, r1, #3
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	4603      	mov	r3, r0
 8002198:	4642      	mov	r2, r8
 800219a:	189b      	adds	r3, r3, r2
 800219c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80021a0:	464b      	mov	r3, r9
 80021a2:	460a      	mov	r2, r1
 80021a4:	eb42 0303 	adc.w	r3, r2, r3
 80021a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80021ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80021b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80021bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80021c0:	460b      	mov	r3, r1
 80021c2:	18db      	adds	r3, r3, r3
 80021c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021c6:	4613      	mov	r3, r2
 80021c8:	eb42 0303 	adc.w	r3, r2, r3
 80021cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80021d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80021d6:	f7fe fd3f 	bl	8000c58 <__aeabi_uldivmod>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4b0d      	ldr	r3, [pc, #52]	@ (8002214 <UART_SetConfig+0x2d4>)
 80021e0:	fba3 1302 	umull	r1, r3, r3, r2
 80021e4:	095b      	lsrs	r3, r3, #5
 80021e6:	2164      	movs	r1, #100	@ 0x64
 80021e8:	fb01 f303 	mul.w	r3, r1, r3
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	3332      	adds	r3, #50	@ 0x32
 80021f2:	4a08      	ldr	r2, [pc, #32]	@ (8002214 <UART_SetConfig+0x2d4>)
 80021f4:	fba2 2303 	umull	r2, r3, r2, r3
 80021f8:	095b      	lsrs	r3, r3, #5
 80021fa:	f003 0207 	and.w	r2, r3, #7
 80021fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4422      	add	r2, r4
 8002206:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002208:	e106      	b.n	8002418 <UART_SetConfig+0x4d8>
 800220a:	bf00      	nop
 800220c:	40011000 	.word	0x40011000
 8002210:	40011400 	.word	0x40011400
 8002214:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002218:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800221c:	2200      	movs	r2, #0
 800221e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002222:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002226:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800222a:	4642      	mov	r2, r8
 800222c:	464b      	mov	r3, r9
 800222e:	1891      	adds	r1, r2, r2
 8002230:	6239      	str	r1, [r7, #32]
 8002232:	415b      	adcs	r3, r3
 8002234:	627b      	str	r3, [r7, #36]	@ 0x24
 8002236:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800223a:	4641      	mov	r1, r8
 800223c:	1854      	adds	r4, r2, r1
 800223e:	4649      	mov	r1, r9
 8002240:	eb43 0501 	adc.w	r5, r3, r1
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	f04f 0300 	mov.w	r3, #0
 800224c:	00eb      	lsls	r3, r5, #3
 800224e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002252:	00e2      	lsls	r2, r4, #3
 8002254:	4614      	mov	r4, r2
 8002256:	461d      	mov	r5, r3
 8002258:	4643      	mov	r3, r8
 800225a:	18e3      	adds	r3, r4, r3
 800225c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002260:	464b      	mov	r3, r9
 8002262:	eb45 0303 	adc.w	r3, r5, r3
 8002266:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800226a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002276:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002286:	4629      	mov	r1, r5
 8002288:	008b      	lsls	r3, r1, #2
 800228a:	4621      	mov	r1, r4
 800228c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002290:	4621      	mov	r1, r4
 8002292:	008a      	lsls	r2, r1, #2
 8002294:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002298:	f7fe fcde 	bl	8000c58 <__aeabi_uldivmod>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4b60      	ldr	r3, [pc, #384]	@ (8002424 <UART_SetConfig+0x4e4>)
 80022a2:	fba3 2302 	umull	r2, r3, r3, r2
 80022a6:	095b      	lsrs	r3, r3, #5
 80022a8:	011c      	lsls	r4, r3, #4
 80022aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022ae:	2200      	movs	r2, #0
 80022b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80022b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80022b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80022bc:	4642      	mov	r2, r8
 80022be:	464b      	mov	r3, r9
 80022c0:	1891      	adds	r1, r2, r2
 80022c2:	61b9      	str	r1, [r7, #24]
 80022c4:	415b      	adcs	r3, r3
 80022c6:	61fb      	str	r3, [r7, #28]
 80022c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022cc:	4641      	mov	r1, r8
 80022ce:	1851      	adds	r1, r2, r1
 80022d0:	6139      	str	r1, [r7, #16]
 80022d2:	4649      	mov	r1, r9
 80022d4:	414b      	adcs	r3, r1
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022e4:	4659      	mov	r1, fp
 80022e6:	00cb      	lsls	r3, r1, #3
 80022e8:	4651      	mov	r1, sl
 80022ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022ee:	4651      	mov	r1, sl
 80022f0:	00ca      	lsls	r2, r1, #3
 80022f2:	4610      	mov	r0, r2
 80022f4:	4619      	mov	r1, r3
 80022f6:	4603      	mov	r3, r0
 80022f8:	4642      	mov	r2, r8
 80022fa:	189b      	adds	r3, r3, r2
 80022fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002300:	464b      	mov	r3, r9
 8002302:	460a      	mov	r2, r1
 8002304:	eb42 0303 	adc.w	r3, r2, r3
 8002308:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800230c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002316:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002324:	4649      	mov	r1, r9
 8002326:	008b      	lsls	r3, r1, #2
 8002328:	4641      	mov	r1, r8
 800232a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800232e:	4641      	mov	r1, r8
 8002330:	008a      	lsls	r2, r1, #2
 8002332:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002336:	f7fe fc8f 	bl	8000c58 <__aeabi_uldivmod>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4611      	mov	r1, r2
 8002340:	4b38      	ldr	r3, [pc, #224]	@ (8002424 <UART_SetConfig+0x4e4>)
 8002342:	fba3 2301 	umull	r2, r3, r3, r1
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	2264      	movs	r2, #100	@ 0x64
 800234a:	fb02 f303 	mul.w	r3, r2, r3
 800234e:	1acb      	subs	r3, r1, r3
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	3332      	adds	r3, #50	@ 0x32
 8002354:	4a33      	ldr	r2, [pc, #204]	@ (8002424 <UART_SetConfig+0x4e4>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002360:	441c      	add	r4, r3
 8002362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002366:	2200      	movs	r2, #0
 8002368:	673b      	str	r3, [r7, #112]	@ 0x70
 800236a:	677a      	str	r2, [r7, #116]	@ 0x74
 800236c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002370:	4642      	mov	r2, r8
 8002372:	464b      	mov	r3, r9
 8002374:	1891      	adds	r1, r2, r2
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	415b      	adcs	r3, r3
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002380:	4641      	mov	r1, r8
 8002382:	1851      	adds	r1, r2, r1
 8002384:	6039      	str	r1, [r7, #0]
 8002386:	4649      	mov	r1, r9
 8002388:	414b      	adcs	r3, r1
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002398:	4659      	mov	r1, fp
 800239a:	00cb      	lsls	r3, r1, #3
 800239c:	4651      	mov	r1, sl
 800239e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023a2:	4651      	mov	r1, sl
 80023a4:	00ca      	lsls	r2, r1, #3
 80023a6:	4610      	mov	r0, r2
 80023a8:	4619      	mov	r1, r3
 80023aa:	4603      	mov	r3, r0
 80023ac:	4642      	mov	r2, r8
 80023ae:	189b      	adds	r3, r3, r2
 80023b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023b2:	464b      	mov	r3, r9
 80023b4:	460a      	mov	r2, r1
 80023b6:	eb42 0303 	adc.w	r3, r2, r3
 80023ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80023bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80023c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	f04f 0300 	mov.w	r3, #0
 80023d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80023d4:	4649      	mov	r1, r9
 80023d6:	008b      	lsls	r3, r1, #2
 80023d8:	4641      	mov	r1, r8
 80023da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023de:	4641      	mov	r1, r8
 80023e0:	008a      	lsls	r2, r1, #2
 80023e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80023e6:	f7fe fc37 	bl	8000c58 <__aeabi_uldivmod>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002424 <UART_SetConfig+0x4e4>)
 80023f0:	fba3 1302 	umull	r1, r3, r3, r2
 80023f4:	095b      	lsrs	r3, r3, #5
 80023f6:	2164      	movs	r1, #100	@ 0x64
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	3332      	adds	r3, #50	@ 0x32
 8002402:	4a08      	ldr	r2, [pc, #32]	@ (8002424 <UART_SetConfig+0x4e4>)
 8002404:	fba2 2303 	umull	r2, r3, r2, r3
 8002408:	095b      	lsrs	r3, r3, #5
 800240a:	f003 020f 	and.w	r2, r3, #15
 800240e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4422      	add	r2, r4
 8002416:	609a      	str	r2, [r3, #8]
}
 8002418:	bf00      	nop
 800241a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800241e:	46bd      	mov	sp, r7
 8002420:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002424:	51eb851f 	.word	0x51eb851f

08002428 <__cvt>:
 8002428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800242c:	ec57 6b10 	vmov	r6, r7, d0
 8002430:	2f00      	cmp	r7, #0
 8002432:	460c      	mov	r4, r1
 8002434:	4619      	mov	r1, r3
 8002436:	463b      	mov	r3, r7
 8002438:	bfbb      	ittet	lt
 800243a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800243e:	461f      	movlt	r7, r3
 8002440:	2300      	movge	r3, #0
 8002442:	232d      	movlt	r3, #45	@ 0x2d
 8002444:	700b      	strb	r3, [r1, #0]
 8002446:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002448:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800244c:	4691      	mov	r9, r2
 800244e:	f023 0820 	bic.w	r8, r3, #32
 8002452:	bfbc      	itt	lt
 8002454:	4632      	movlt	r2, r6
 8002456:	4616      	movlt	r6, r2
 8002458:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800245c:	d005      	beq.n	800246a <__cvt+0x42>
 800245e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002462:	d100      	bne.n	8002466 <__cvt+0x3e>
 8002464:	3401      	adds	r4, #1
 8002466:	2102      	movs	r1, #2
 8002468:	e000      	b.n	800246c <__cvt+0x44>
 800246a:	2103      	movs	r1, #3
 800246c:	ab03      	add	r3, sp, #12
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	ab02      	add	r3, sp, #8
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	ec47 6b10 	vmov	d0, r6, r7
 8002478:	4653      	mov	r3, sl
 800247a:	4622      	mov	r2, r4
 800247c:	f000 fe5c 	bl	8003138 <_dtoa_r>
 8002480:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002484:	4605      	mov	r5, r0
 8002486:	d119      	bne.n	80024bc <__cvt+0x94>
 8002488:	f019 0f01 	tst.w	r9, #1
 800248c:	d00e      	beq.n	80024ac <__cvt+0x84>
 800248e:	eb00 0904 	add.w	r9, r0, r4
 8002492:	2200      	movs	r2, #0
 8002494:	2300      	movs	r3, #0
 8002496:	4630      	mov	r0, r6
 8002498:	4639      	mov	r1, r7
 800249a:	f7fe fb1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800249e:	b108      	cbz	r0, 80024a4 <__cvt+0x7c>
 80024a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80024a4:	2230      	movs	r2, #48	@ 0x30
 80024a6:	9b03      	ldr	r3, [sp, #12]
 80024a8:	454b      	cmp	r3, r9
 80024aa:	d31e      	bcc.n	80024ea <__cvt+0xc2>
 80024ac:	9b03      	ldr	r3, [sp, #12]
 80024ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80024b0:	1b5b      	subs	r3, r3, r5
 80024b2:	4628      	mov	r0, r5
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	b004      	add	sp, #16
 80024b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80024c0:	eb00 0904 	add.w	r9, r0, r4
 80024c4:	d1e5      	bne.n	8002492 <__cvt+0x6a>
 80024c6:	7803      	ldrb	r3, [r0, #0]
 80024c8:	2b30      	cmp	r3, #48	@ 0x30
 80024ca:	d10a      	bne.n	80024e2 <__cvt+0xba>
 80024cc:	2200      	movs	r2, #0
 80024ce:	2300      	movs	r3, #0
 80024d0:	4630      	mov	r0, r6
 80024d2:	4639      	mov	r1, r7
 80024d4:	f7fe fb00 	bl	8000ad8 <__aeabi_dcmpeq>
 80024d8:	b918      	cbnz	r0, 80024e2 <__cvt+0xba>
 80024da:	f1c4 0401 	rsb	r4, r4, #1
 80024de:	f8ca 4000 	str.w	r4, [sl]
 80024e2:	f8da 3000 	ldr.w	r3, [sl]
 80024e6:	4499      	add	r9, r3
 80024e8:	e7d3      	b.n	8002492 <__cvt+0x6a>
 80024ea:	1c59      	adds	r1, r3, #1
 80024ec:	9103      	str	r1, [sp, #12]
 80024ee:	701a      	strb	r2, [r3, #0]
 80024f0:	e7d9      	b.n	80024a6 <__cvt+0x7e>

080024f2 <__exponent>:
 80024f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024f4:	2900      	cmp	r1, #0
 80024f6:	bfba      	itte	lt
 80024f8:	4249      	neglt	r1, r1
 80024fa:	232d      	movlt	r3, #45	@ 0x2d
 80024fc:	232b      	movge	r3, #43	@ 0x2b
 80024fe:	2909      	cmp	r1, #9
 8002500:	7002      	strb	r2, [r0, #0]
 8002502:	7043      	strb	r3, [r0, #1]
 8002504:	dd29      	ble.n	800255a <__exponent+0x68>
 8002506:	f10d 0307 	add.w	r3, sp, #7
 800250a:	461d      	mov	r5, r3
 800250c:	270a      	movs	r7, #10
 800250e:	461a      	mov	r2, r3
 8002510:	fbb1 f6f7 	udiv	r6, r1, r7
 8002514:	fb07 1416 	mls	r4, r7, r6, r1
 8002518:	3430      	adds	r4, #48	@ 0x30
 800251a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800251e:	460c      	mov	r4, r1
 8002520:	2c63      	cmp	r4, #99	@ 0x63
 8002522:	f103 33ff 	add.w	r3, r3, #4294967295
 8002526:	4631      	mov	r1, r6
 8002528:	dcf1      	bgt.n	800250e <__exponent+0x1c>
 800252a:	3130      	adds	r1, #48	@ 0x30
 800252c:	1e94      	subs	r4, r2, #2
 800252e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002532:	1c41      	adds	r1, r0, #1
 8002534:	4623      	mov	r3, r4
 8002536:	42ab      	cmp	r3, r5
 8002538:	d30a      	bcc.n	8002550 <__exponent+0x5e>
 800253a:	f10d 0309 	add.w	r3, sp, #9
 800253e:	1a9b      	subs	r3, r3, r2
 8002540:	42ac      	cmp	r4, r5
 8002542:	bf88      	it	hi
 8002544:	2300      	movhi	r3, #0
 8002546:	3302      	adds	r3, #2
 8002548:	4403      	add	r3, r0
 800254a:	1a18      	subs	r0, r3, r0
 800254c:	b003      	add	sp, #12
 800254e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002550:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002554:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002558:	e7ed      	b.n	8002536 <__exponent+0x44>
 800255a:	2330      	movs	r3, #48	@ 0x30
 800255c:	3130      	adds	r1, #48	@ 0x30
 800255e:	7083      	strb	r3, [r0, #2]
 8002560:	70c1      	strb	r1, [r0, #3]
 8002562:	1d03      	adds	r3, r0, #4
 8002564:	e7f1      	b.n	800254a <__exponent+0x58>
	...

08002568 <_printf_float>:
 8002568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800256c:	b08d      	sub	sp, #52	@ 0x34
 800256e:	460c      	mov	r4, r1
 8002570:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002574:	4616      	mov	r6, r2
 8002576:	461f      	mov	r7, r3
 8002578:	4605      	mov	r5, r0
 800257a:	f000 fcdb 	bl	8002f34 <_localeconv_r>
 800257e:	6803      	ldr	r3, [r0, #0]
 8002580:	9304      	str	r3, [sp, #16]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fd fe7c 	bl	8000280 <strlen>
 8002588:	2300      	movs	r3, #0
 800258a:	930a      	str	r3, [sp, #40]	@ 0x28
 800258c:	f8d8 3000 	ldr.w	r3, [r8]
 8002590:	9005      	str	r0, [sp, #20]
 8002592:	3307      	adds	r3, #7
 8002594:	f023 0307 	bic.w	r3, r3, #7
 8002598:	f103 0208 	add.w	r2, r3, #8
 800259c:	f894 a018 	ldrb.w	sl, [r4, #24]
 80025a0:	f8d4 b000 	ldr.w	fp, [r4]
 80025a4:	f8c8 2000 	str.w	r2, [r8]
 80025a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80025ac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80025b0:	9307      	str	r3, [sp, #28]
 80025b2:	f8cd 8018 	str.w	r8, [sp, #24]
 80025b6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80025ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80025be:	4b9c      	ldr	r3, [pc, #624]	@ (8002830 <_printf_float+0x2c8>)
 80025c0:	f04f 32ff 	mov.w	r2, #4294967295
 80025c4:	f7fe faba 	bl	8000b3c <__aeabi_dcmpun>
 80025c8:	bb70      	cbnz	r0, 8002628 <_printf_float+0xc0>
 80025ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80025ce:	4b98      	ldr	r3, [pc, #608]	@ (8002830 <_printf_float+0x2c8>)
 80025d0:	f04f 32ff 	mov.w	r2, #4294967295
 80025d4:	f7fe fa94 	bl	8000b00 <__aeabi_dcmple>
 80025d8:	bb30      	cbnz	r0, 8002628 <_printf_float+0xc0>
 80025da:	2200      	movs	r2, #0
 80025dc:	2300      	movs	r3, #0
 80025de:	4640      	mov	r0, r8
 80025e0:	4649      	mov	r1, r9
 80025e2:	f7fe fa83 	bl	8000aec <__aeabi_dcmplt>
 80025e6:	b110      	cbz	r0, 80025ee <_printf_float+0x86>
 80025e8:	232d      	movs	r3, #45	@ 0x2d
 80025ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80025ee:	4a91      	ldr	r2, [pc, #580]	@ (8002834 <_printf_float+0x2cc>)
 80025f0:	4b91      	ldr	r3, [pc, #580]	@ (8002838 <_printf_float+0x2d0>)
 80025f2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80025f6:	bf94      	ite	ls
 80025f8:	4690      	movls	r8, r2
 80025fa:	4698      	movhi	r8, r3
 80025fc:	2303      	movs	r3, #3
 80025fe:	6123      	str	r3, [r4, #16]
 8002600:	f02b 0304 	bic.w	r3, fp, #4
 8002604:	6023      	str	r3, [r4, #0]
 8002606:	f04f 0900 	mov.w	r9, #0
 800260a:	9700      	str	r7, [sp, #0]
 800260c:	4633      	mov	r3, r6
 800260e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8002610:	4621      	mov	r1, r4
 8002612:	4628      	mov	r0, r5
 8002614:	f000 f9d2 	bl	80029bc <_printf_common>
 8002618:	3001      	adds	r0, #1
 800261a:	f040 808d 	bne.w	8002738 <_printf_float+0x1d0>
 800261e:	f04f 30ff 	mov.w	r0, #4294967295
 8002622:	b00d      	add	sp, #52	@ 0x34
 8002624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002628:	4642      	mov	r2, r8
 800262a:	464b      	mov	r3, r9
 800262c:	4640      	mov	r0, r8
 800262e:	4649      	mov	r1, r9
 8002630:	f7fe fa84 	bl	8000b3c <__aeabi_dcmpun>
 8002634:	b140      	cbz	r0, 8002648 <_printf_float+0xe0>
 8002636:	464b      	mov	r3, r9
 8002638:	2b00      	cmp	r3, #0
 800263a:	bfbc      	itt	lt
 800263c:	232d      	movlt	r3, #45	@ 0x2d
 800263e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002642:	4a7e      	ldr	r2, [pc, #504]	@ (800283c <_printf_float+0x2d4>)
 8002644:	4b7e      	ldr	r3, [pc, #504]	@ (8002840 <_printf_float+0x2d8>)
 8002646:	e7d4      	b.n	80025f2 <_printf_float+0x8a>
 8002648:	6863      	ldr	r3, [r4, #4]
 800264a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800264e:	9206      	str	r2, [sp, #24]
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	d13b      	bne.n	80026cc <_printf_float+0x164>
 8002654:	2306      	movs	r3, #6
 8002656:	6063      	str	r3, [r4, #4]
 8002658:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800265c:	2300      	movs	r3, #0
 800265e:	6022      	str	r2, [r4, #0]
 8002660:	9303      	str	r3, [sp, #12]
 8002662:	ab0a      	add	r3, sp, #40	@ 0x28
 8002664:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002668:	ab09      	add	r3, sp, #36	@ 0x24
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	6861      	ldr	r1, [r4, #4]
 800266e:	ec49 8b10 	vmov	d0, r8, r9
 8002672:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8002676:	4628      	mov	r0, r5
 8002678:	f7ff fed6 	bl	8002428 <__cvt>
 800267c:	9b06      	ldr	r3, [sp, #24]
 800267e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002680:	2b47      	cmp	r3, #71	@ 0x47
 8002682:	4680      	mov	r8, r0
 8002684:	d129      	bne.n	80026da <_printf_float+0x172>
 8002686:	1cc8      	adds	r0, r1, #3
 8002688:	db02      	blt.n	8002690 <_printf_float+0x128>
 800268a:	6863      	ldr	r3, [r4, #4]
 800268c:	4299      	cmp	r1, r3
 800268e:	dd41      	ble.n	8002714 <_printf_float+0x1ac>
 8002690:	f1aa 0a02 	sub.w	sl, sl, #2
 8002694:	fa5f fa8a 	uxtb.w	sl, sl
 8002698:	3901      	subs	r1, #1
 800269a:	4652      	mov	r2, sl
 800269c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80026a0:	9109      	str	r1, [sp, #36]	@ 0x24
 80026a2:	f7ff ff26 	bl	80024f2 <__exponent>
 80026a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80026a8:	1813      	adds	r3, r2, r0
 80026aa:	2a01      	cmp	r2, #1
 80026ac:	4681      	mov	r9, r0
 80026ae:	6123      	str	r3, [r4, #16]
 80026b0:	dc02      	bgt.n	80026b8 <_printf_float+0x150>
 80026b2:	6822      	ldr	r2, [r4, #0]
 80026b4:	07d2      	lsls	r2, r2, #31
 80026b6:	d501      	bpl.n	80026bc <_printf_float+0x154>
 80026b8:	3301      	adds	r3, #1
 80026ba:	6123      	str	r3, [r4, #16]
 80026bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0a2      	beq.n	800260a <_printf_float+0xa2>
 80026c4:	232d      	movs	r3, #45	@ 0x2d
 80026c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80026ca:	e79e      	b.n	800260a <_printf_float+0xa2>
 80026cc:	9a06      	ldr	r2, [sp, #24]
 80026ce:	2a47      	cmp	r2, #71	@ 0x47
 80026d0:	d1c2      	bne.n	8002658 <_printf_float+0xf0>
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1c0      	bne.n	8002658 <_printf_float+0xf0>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e7bd      	b.n	8002656 <_printf_float+0xee>
 80026da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80026de:	d9db      	bls.n	8002698 <_printf_float+0x130>
 80026e0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80026e4:	d118      	bne.n	8002718 <_printf_float+0x1b0>
 80026e6:	2900      	cmp	r1, #0
 80026e8:	6863      	ldr	r3, [r4, #4]
 80026ea:	dd0b      	ble.n	8002704 <_printf_float+0x19c>
 80026ec:	6121      	str	r1, [r4, #16]
 80026ee:	b913      	cbnz	r3, 80026f6 <_printf_float+0x18e>
 80026f0:	6822      	ldr	r2, [r4, #0]
 80026f2:	07d0      	lsls	r0, r2, #31
 80026f4:	d502      	bpl.n	80026fc <_printf_float+0x194>
 80026f6:	3301      	adds	r3, #1
 80026f8:	440b      	add	r3, r1
 80026fa:	6123      	str	r3, [r4, #16]
 80026fc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80026fe:	f04f 0900 	mov.w	r9, #0
 8002702:	e7db      	b.n	80026bc <_printf_float+0x154>
 8002704:	b913      	cbnz	r3, 800270c <_printf_float+0x1a4>
 8002706:	6822      	ldr	r2, [r4, #0]
 8002708:	07d2      	lsls	r2, r2, #31
 800270a:	d501      	bpl.n	8002710 <_printf_float+0x1a8>
 800270c:	3302      	adds	r3, #2
 800270e:	e7f4      	b.n	80026fa <_printf_float+0x192>
 8002710:	2301      	movs	r3, #1
 8002712:	e7f2      	b.n	80026fa <_printf_float+0x192>
 8002714:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002718:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800271a:	4299      	cmp	r1, r3
 800271c:	db05      	blt.n	800272a <_printf_float+0x1c2>
 800271e:	6823      	ldr	r3, [r4, #0]
 8002720:	6121      	str	r1, [r4, #16]
 8002722:	07d8      	lsls	r0, r3, #31
 8002724:	d5ea      	bpl.n	80026fc <_printf_float+0x194>
 8002726:	1c4b      	adds	r3, r1, #1
 8002728:	e7e7      	b.n	80026fa <_printf_float+0x192>
 800272a:	2900      	cmp	r1, #0
 800272c:	bfd4      	ite	le
 800272e:	f1c1 0202 	rsble	r2, r1, #2
 8002732:	2201      	movgt	r2, #1
 8002734:	4413      	add	r3, r2
 8002736:	e7e0      	b.n	80026fa <_printf_float+0x192>
 8002738:	6823      	ldr	r3, [r4, #0]
 800273a:	055a      	lsls	r2, r3, #21
 800273c:	d407      	bmi.n	800274e <_printf_float+0x1e6>
 800273e:	6923      	ldr	r3, [r4, #16]
 8002740:	4642      	mov	r2, r8
 8002742:	4631      	mov	r1, r6
 8002744:	4628      	mov	r0, r5
 8002746:	47b8      	blx	r7
 8002748:	3001      	adds	r0, #1
 800274a:	d12b      	bne.n	80027a4 <_printf_float+0x23c>
 800274c:	e767      	b.n	800261e <_printf_float+0xb6>
 800274e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002752:	f240 80dd 	bls.w	8002910 <_printf_float+0x3a8>
 8002756:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800275a:	2200      	movs	r2, #0
 800275c:	2300      	movs	r3, #0
 800275e:	f7fe f9bb 	bl	8000ad8 <__aeabi_dcmpeq>
 8002762:	2800      	cmp	r0, #0
 8002764:	d033      	beq.n	80027ce <_printf_float+0x266>
 8002766:	4a37      	ldr	r2, [pc, #220]	@ (8002844 <_printf_float+0x2dc>)
 8002768:	2301      	movs	r3, #1
 800276a:	4631      	mov	r1, r6
 800276c:	4628      	mov	r0, r5
 800276e:	47b8      	blx	r7
 8002770:	3001      	adds	r0, #1
 8002772:	f43f af54 	beq.w	800261e <_printf_float+0xb6>
 8002776:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800277a:	4543      	cmp	r3, r8
 800277c:	db02      	blt.n	8002784 <_printf_float+0x21c>
 800277e:	6823      	ldr	r3, [r4, #0]
 8002780:	07d8      	lsls	r0, r3, #31
 8002782:	d50f      	bpl.n	80027a4 <_printf_float+0x23c>
 8002784:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002788:	4631      	mov	r1, r6
 800278a:	4628      	mov	r0, r5
 800278c:	47b8      	blx	r7
 800278e:	3001      	adds	r0, #1
 8002790:	f43f af45 	beq.w	800261e <_printf_float+0xb6>
 8002794:	f04f 0900 	mov.w	r9, #0
 8002798:	f108 38ff 	add.w	r8, r8, #4294967295
 800279c:	f104 0a1a 	add.w	sl, r4, #26
 80027a0:	45c8      	cmp	r8, r9
 80027a2:	dc09      	bgt.n	80027b8 <_printf_float+0x250>
 80027a4:	6823      	ldr	r3, [r4, #0]
 80027a6:	079b      	lsls	r3, r3, #30
 80027a8:	f100 8103 	bmi.w	80029b2 <_printf_float+0x44a>
 80027ac:	68e0      	ldr	r0, [r4, #12]
 80027ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80027b0:	4298      	cmp	r0, r3
 80027b2:	bfb8      	it	lt
 80027b4:	4618      	movlt	r0, r3
 80027b6:	e734      	b.n	8002622 <_printf_float+0xba>
 80027b8:	2301      	movs	r3, #1
 80027ba:	4652      	mov	r2, sl
 80027bc:	4631      	mov	r1, r6
 80027be:	4628      	mov	r0, r5
 80027c0:	47b8      	blx	r7
 80027c2:	3001      	adds	r0, #1
 80027c4:	f43f af2b 	beq.w	800261e <_printf_float+0xb6>
 80027c8:	f109 0901 	add.w	r9, r9, #1
 80027cc:	e7e8      	b.n	80027a0 <_printf_float+0x238>
 80027ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	dc39      	bgt.n	8002848 <_printf_float+0x2e0>
 80027d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002844 <_printf_float+0x2dc>)
 80027d6:	2301      	movs	r3, #1
 80027d8:	4631      	mov	r1, r6
 80027da:	4628      	mov	r0, r5
 80027dc:	47b8      	blx	r7
 80027de:	3001      	adds	r0, #1
 80027e0:	f43f af1d 	beq.w	800261e <_printf_float+0xb6>
 80027e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80027e8:	ea59 0303 	orrs.w	r3, r9, r3
 80027ec:	d102      	bne.n	80027f4 <_printf_float+0x28c>
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	07d9      	lsls	r1, r3, #31
 80027f2:	d5d7      	bpl.n	80027a4 <_printf_float+0x23c>
 80027f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80027f8:	4631      	mov	r1, r6
 80027fa:	4628      	mov	r0, r5
 80027fc:	47b8      	blx	r7
 80027fe:	3001      	adds	r0, #1
 8002800:	f43f af0d 	beq.w	800261e <_printf_float+0xb6>
 8002804:	f04f 0a00 	mov.w	sl, #0
 8002808:	f104 0b1a 	add.w	fp, r4, #26
 800280c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800280e:	425b      	negs	r3, r3
 8002810:	4553      	cmp	r3, sl
 8002812:	dc01      	bgt.n	8002818 <_printf_float+0x2b0>
 8002814:	464b      	mov	r3, r9
 8002816:	e793      	b.n	8002740 <_printf_float+0x1d8>
 8002818:	2301      	movs	r3, #1
 800281a:	465a      	mov	r2, fp
 800281c:	4631      	mov	r1, r6
 800281e:	4628      	mov	r0, r5
 8002820:	47b8      	blx	r7
 8002822:	3001      	adds	r0, #1
 8002824:	f43f aefb 	beq.w	800261e <_printf_float+0xb6>
 8002828:	f10a 0a01 	add.w	sl, sl, #1
 800282c:	e7ee      	b.n	800280c <_printf_float+0x2a4>
 800282e:	bf00      	nop
 8002830:	7fefffff 	.word	0x7fefffff
 8002834:	08005118 	.word	0x08005118
 8002838:	0800511c 	.word	0x0800511c
 800283c:	08005120 	.word	0x08005120
 8002840:	08005124 	.word	0x08005124
 8002844:	08005128 	.word	0x08005128
 8002848:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800284a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800284e:	4553      	cmp	r3, sl
 8002850:	bfa8      	it	ge
 8002852:	4653      	movge	r3, sl
 8002854:	2b00      	cmp	r3, #0
 8002856:	4699      	mov	r9, r3
 8002858:	dc36      	bgt.n	80028c8 <_printf_float+0x360>
 800285a:	f04f 0b00 	mov.w	fp, #0
 800285e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002862:	f104 021a 	add.w	r2, r4, #26
 8002866:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002868:	9306      	str	r3, [sp, #24]
 800286a:	eba3 0309 	sub.w	r3, r3, r9
 800286e:	455b      	cmp	r3, fp
 8002870:	dc31      	bgt.n	80028d6 <_printf_float+0x36e>
 8002872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002874:	459a      	cmp	sl, r3
 8002876:	dc3a      	bgt.n	80028ee <_printf_float+0x386>
 8002878:	6823      	ldr	r3, [r4, #0]
 800287a:	07da      	lsls	r2, r3, #31
 800287c:	d437      	bmi.n	80028ee <_printf_float+0x386>
 800287e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002880:	ebaa 0903 	sub.w	r9, sl, r3
 8002884:	9b06      	ldr	r3, [sp, #24]
 8002886:	ebaa 0303 	sub.w	r3, sl, r3
 800288a:	4599      	cmp	r9, r3
 800288c:	bfa8      	it	ge
 800288e:	4699      	movge	r9, r3
 8002890:	f1b9 0f00 	cmp.w	r9, #0
 8002894:	dc33      	bgt.n	80028fe <_printf_float+0x396>
 8002896:	f04f 0800 	mov.w	r8, #0
 800289a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800289e:	f104 0b1a 	add.w	fp, r4, #26
 80028a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80028a4:	ebaa 0303 	sub.w	r3, sl, r3
 80028a8:	eba3 0309 	sub.w	r3, r3, r9
 80028ac:	4543      	cmp	r3, r8
 80028ae:	f77f af79 	ble.w	80027a4 <_printf_float+0x23c>
 80028b2:	2301      	movs	r3, #1
 80028b4:	465a      	mov	r2, fp
 80028b6:	4631      	mov	r1, r6
 80028b8:	4628      	mov	r0, r5
 80028ba:	47b8      	blx	r7
 80028bc:	3001      	adds	r0, #1
 80028be:	f43f aeae 	beq.w	800261e <_printf_float+0xb6>
 80028c2:	f108 0801 	add.w	r8, r8, #1
 80028c6:	e7ec      	b.n	80028a2 <_printf_float+0x33a>
 80028c8:	4642      	mov	r2, r8
 80028ca:	4631      	mov	r1, r6
 80028cc:	4628      	mov	r0, r5
 80028ce:	47b8      	blx	r7
 80028d0:	3001      	adds	r0, #1
 80028d2:	d1c2      	bne.n	800285a <_printf_float+0x2f2>
 80028d4:	e6a3      	b.n	800261e <_printf_float+0xb6>
 80028d6:	2301      	movs	r3, #1
 80028d8:	4631      	mov	r1, r6
 80028da:	4628      	mov	r0, r5
 80028dc:	9206      	str	r2, [sp, #24]
 80028de:	47b8      	blx	r7
 80028e0:	3001      	adds	r0, #1
 80028e2:	f43f ae9c 	beq.w	800261e <_printf_float+0xb6>
 80028e6:	9a06      	ldr	r2, [sp, #24]
 80028e8:	f10b 0b01 	add.w	fp, fp, #1
 80028ec:	e7bb      	b.n	8002866 <_printf_float+0x2fe>
 80028ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80028f2:	4631      	mov	r1, r6
 80028f4:	4628      	mov	r0, r5
 80028f6:	47b8      	blx	r7
 80028f8:	3001      	adds	r0, #1
 80028fa:	d1c0      	bne.n	800287e <_printf_float+0x316>
 80028fc:	e68f      	b.n	800261e <_printf_float+0xb6>
 80028fe:	9a06      	ldr	r2, [sp, #24]
 8002900:	464b      	mov	r3, r9
 8002902:	4442      	add	r2, r8
 8002904:	4631      	mov	r1, r6
 8002906:	4628      	mov	r0, r5
 8002908:	47b8      	blx	r7
 800290a:	3001      	adds	r0, #1
 800290c:	d1c3      	bne.n	8002896 <_printf_float+0x32e>
 800290e:	e686      	b.n	800261e <_printf_float+0xb6>
 8002910:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002914:	f1ba 0f01 	cmp.w	sl, #1
 8002918:	dc01      	bgt.n	800291e <_printf_float+0x3b6>
 800291a:	07db      	lsls	r3, r3, #31
 800291c:	d536      	bpl.n	800298c <_printf_float+0x424>
 800291e:	2301      	movs	r3, #1
 8002920:	4642      	mov	r2, r8
 8002922:	4631      	mov	r1, r6
 8002924:	4628      	mov	r0, r5
 8002926:	47b8      	blx	r7
 8002928:	3001      	adds	r0, #1
 800292a:	f43f ae78 	beq.w	800261e <_printf_float+0xb6>
 800292e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002932:	4631      	mov	r1, r6
 8002934:	4628      	mov	r0, r5
 8002936:	47b8      	blx	r7
 8002938:	3001      	adds	r0, #1
 800293a:	f43f ae70 	beq.w	800261e <_printf_float+0xb6>
 800293e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002942:	2200      	movs	r2, #0
 8002944:	2300      	movs	r3, #0
 8002946:	f10a 3aff 	add.w	sl, sl, #4294967295
 800294a:	f7fe f8c5 	bl	8000ad8 <__aeabi_dcmpeq>
 800294e:	b9c0      	cbnz	r0, 8002982 <_printf_float+0x41a>
 8002950:	4653      	mov	r3, sl
 8002952:	f108 0201 	add.w	r2, r8, #1
 8002956:	4631      	mov	r1, r6
 8002958:	4628      	mov	r0, r5
 800295a:	47b8      	blx	r7
 800295c:	3001      	adds	r0, #1
 800295e:	d10c      	bne.n	800297a <_printf_float+0x412>
 8002960:	e65d      	b.n	800261e <_printf_float+0xb6>
 8002962:	2301      	movs	r3, #1
 8002964:	465a      	mov	r2, fp
 8002966:	4631      	mov	r1, r6
 8002968:	4628      	mov	r0, r5
 800296a:	47b8      	blx	r7
 800296c:	3001      	adds	r0, #1
 800296e:	f43f ae56 	beq.w	800261e <_printf_float+0xb6>
 8002972:	f108 0801 	add.w	r8, r8, #1
 8002976:	45d0      	cmp	r8, sl
 8002978:	dbf3      	blt.n	8002962 <_printf_float+0x3fa>
 800297a:	464b      	mov	r3, r9
 800297c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002980:	e6df      	b.n	8002742 <_printf_float+0x1da>
 8002982:	f04f 0800 	mov.w	r8, #0
 8002986:	f104 0b1a 	add.w	fp, r4, #26
 800298a:	e7f4      	b.n	8002976 <_printf_float+0x40e>
 800298c:	2301      	movs	r3, #1
 800298e:	4642      	mov	r2, r8
 8002990:	e7e1      	b.n	8002956 <_printf_float+0x3ee>
 8002992:	2301      	movs	r3, #1
 8002994:	464a      	mov	r2, r9
 8002996:	4631      	mov	r1, r6
 8002998:	4628      	mov	r0, r5
 800299a:	47b8      	blx	r7
 800299c:	3001      	adds	r0, #1
 800299e:	f43f ae3e 	beq.w	800261e <_printf_float+0xb6>
 80029a2:	f108 0801 	add.w	r8, r8, #1
 80029a6:	68e3      	ldr	r3, [r4, #12]
 80029a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80029aa:	1a5b      	subs	r3, r3, r1
 80029ac:	4543      	cmp	r3, r8
 80029ae:	dcf0      	bgt.n	8002992 <_printf_float+0x42a>
 80029b0:	e6fc      	b.n	80027ac <_printf_float+0x244>
 80029b2:	f04f 0800 	mov.w	r8, #0
 80029b6:	f104 0919 	add.w	r9, r4, #25
 80029ba:	e7f4      	b.n	80029a6 <_printf_float+0x43e>

080029bc <_printf_common>:
 80029bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029c0:	4616      	mov	r6, r2
 80029c2:	4698      	mov	r8, r3
 80029c4:	688a      	ldr	r2, [r1, #8]
 80029c6:	690b      	ldr	r3, [r1, #16]
 80029c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80029cc:	4293      	cmp	r3, r2
 80029ce:	bfb8      	it	lt
 80029d0:	4613      	movlt	r3, r2
 80029d2:	6033      	str	r3, [r6, #0]
 80029d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80029d8:	4607      	mov	r7, r0
 80029da:	460c      	mov	r4, r1
 80029dc:	b10a      	cbz	r2, 80029e2 <_printf_common+0x26>
 80029de:	3301      	adds	r3, #1
 80029e0:	6033      	str	r3, [r6, #0]
 80029e2:	6823      	ldr	r3, [r4, #0]
 80029e4:	0699      	lsls	r1, r3, #26
 80029e6:	bf42      	ittt	mi
 80029e8:	6833      	ldrmi	r3, [r6, #0]
 80029ea:	3302      	addmi	r3, #2
 80029ec:	6033      	strmi	r3, [r6, #0]
 80029ee:	6825      	ldr	r5, [r4, #0]
 80029f0:	f015 0506 	ands.w	r5, r5, #6
 80029f4:	d106      	bne.n	8002a04 <_printf_common+0x48>
 80029f6:	f104 0a19 	add.w	sl, r4, #25
 80029fa:	68e3      	ldr	r3, [r4, #12]
 80029fc:	6832      	ldr	r2, [r6, #0]
 80029fe:	1a9b      	subs	r3, r3, r2
 8002a00:	42ab      	cmp	r3, r5
 8002a02:	dc26      	bgt.n	8002a52 <_printf_common+0x96>
 8002a04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002a08:	6822      	ldr	r2, [r4, #0]
 8002a0a:	3b00      	subs	r3, #0
 8002a0c:	bf18      	it	ne
 8002a0e:	2301      	movne	r3, #1
 8002a10:	0692      	lsls	r2, r2, #26
 8002a12:	d42b      	bmi.n	8002a6c <_printf_common+0xb0>
 8002a14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002a18:	4641      	mov	r1, r8
 8002a1a:	4638      	mov	r0, r7
 8002a1c:	47c8      	blx	r9
 8002a1e:	3001      	adds	r0, #1
 8002a20:	d01e      	beq.n	8002a60 <_printf_common+0xa4>
 8002a22:	6823      	ldr	r3, [r4, #0]
 8002a24:	6922      	ldr	r2, [r4, #16]
 8002a26:	f003 0306 	and.w	r3, r3, #6
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	bf02      	ittt	eq
 8002a2e:	68e5      	ldreq	r5, [r4, #12]
 8002a30:	6833      	ldreq	r3, [r6, #0]
 8002a32:	1aed      	subeq	r5, r5, r3
 8002a34:	68a3      	ldr	r3, [r4, #8]
 8002a36:	bf0c      	ite	eq
 8002a38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a3c:	2500      	movne	r5, #0
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	bfc4      	itt	gt
 8002a42:	1a9b      	subgt	r3, r3, r2
 8002a44:	18ed      	addgt	r5, r5, r3
 8002a46:	2600      	movs	r6, #0
 8002a48:	341a      	adds	r4, #26
 8002a4a:	42b5      	cmp	r5, r6
 8002a4c:	d11a      	bne.n	8002a84 <_printf_common+0xc8>
 8002a4e:	2000      	movs	r0, #0
 8002a50:	e008      	b.n	8002a64 <_printf_common+0xa8>
 8002a52:	2301      	movs	r3, #1
 8002a54:	4652      	mov	r2, sl
 8002a56:	4641      	mov	r1, r8
 8002a58:	4638      	mov	r0, r7
 8002a5a:	47c8      	blx	r9
 8002a5c:	3001      	adds	r0, #1
 8002a5e:	d103      	bne.n	8002a68 <_printf_common+0xac>
 8002a60:	f04f 30ff 	mov.w	r0, #4294967295
 8002a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a68:	3501      	adds	r5, #1
 8002a6a:	e7c6      	b.n	80029fa <_printf_common+0x3e>
 8002a6c:	18e1      	adds	r1, r4, r3
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	2030      	movs	r0, #48	@ 0x30
 8002a72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002a76:	4422      	add	r2, r4
 8002a78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002a7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002a80:	3302      	adds	r3, #2
 8002a82:	e7c7      	b.n	8002a14 <_printf_common+0x58>
 8002a84:	2301      	movs	r3, #1
 8002a86:	4622      	mov	r2, r4
 8002a88:	4641      	mov	r1, r8
 8002a8a:	4638      	mov	r0, r7
 8002a8c:	47c8      	blx	r9
 8002a8e:	3001      	adds	r0, #1
 8002a90:	d0e6      	beq.n	8002a60 <_printf_common+0xa4>
 8002a92:	3601      	adds	r6, #1
 8002a94:	e7d9      	b.n	8002a4a <_printf_common+0x8e>
	...

08002a98 <_printf_i>:
 8002a98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a9c:	7e0f      	ldrb	r7, [r1, #24]
 8002a9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002aa0:	2f78      	cmp	r7, #120	@ 0x78
 8002aa2:	4691      	mov	r9, r2
 8002aa4:	4680      	mov	r8, r0
 8002aa6:	460c      	mov	r4, r1
 8002aa8:	469a      	mov	sl, r3
 8002aaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002aae:	d807      	bhi.n	8002ac0 <_printf_i+0x28>
 8002ab0:	2f62      	cmp	r7, #98	@ 0x62
 8002ab2:	d80a      	bhi.n	8002aca <_printf_i+0x32>
 8002ab4:	2f00      	cmp	r7, #0
 8002ab6:	f000 80d2 	beq.w	8002c5e <_printf_i+0x1c6>
 8002aba:	2f58      	cmp	r7, #88	@ 0x58
 8002abc:	f000 80b9 	beq.w	8002c32 <_printf_i+0x19a>
 8002ac0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002ac4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002ac8:	e03a      	b.n	8002b40 <_printf_i+0xa8>
 8002aca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002ace:	2b15      	cmp	r3, #21
 8002ad0:	d8f6      	bhi.n	8002ac0 <_printf_i+0x28>
 8002ad2:	a101      	add	r1, pc, #4	@ (adr r1, 8002ad8 <_printf_i+0x40>)
 8002ad4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ad8:	08002b31 	.word	0x08002b31
 8002adc:	08002b45 	.word	0x08002b45
 8002ae0:	08002ac1 	.word	0x08002ac1
 8002ae4:	08002ac1 	.word	0x08002ac1
 8002ae8:	08002ac1 	.word	0x08002ac1
 8002aec:	08002ac1 	.word	0x08002ac1
 8002af0:	08002b45 	.word	0x08002b45
 8002af4:	08002ac1 	.word	0x08002ac1
 8002af8:	08002ac1 	.word	0x08002ac1
 8002afc:	08002ac1 	.word	0x08002ac1
 8002b00:	08002ac1 	.word	0x08002ac1
 8002b04:	08002c45 	.word	0x08002c45
 8002b08:	08002b6f 	.word	0x08002b6f
 8002b0c:	08002bff 	.word	0x08002bff
 8002b10:	08002ac1 	.word	0x08002ac1
 8002b14:	08002ac1 	.word	0x08002ac1
 8002b18:	08002c67 	.word	0x08002c67
 8002b1c:	08002ac1 	.word	0x08002ac1
 8002b20:	08002b6f 	.word	0x08002b6f
 8002b24:	08002ac1 	.word	0x08002ac1
 8002b28:	08002ac1 	.word	0x08002ac1
 8002b2c:	08002c07 	.word	0x08002c07
 8002b30:	6833      	ldr	r3, [r6, #0]
 8002b32:	1d1a      	adds	r2, r3, #4
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6032      	str	r2, [r6, #0]
 8002b38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002b40:	2301      	movs	r3, #1
 8002b42:	e09d      	b.n	8002c80 <_printf_i+0x1e8>
 8002b44:	6833      	ldr	r3, [r6, #0]
 8002b46:	6820      	ldr	r0, [r4, #0]
 8002b48:	1d19      	adds	r1, r3, #4
 8002b4a:	6031      	str	r1, [r6, #0]
 8002b4c:	0606      	lsls	r6, r0, #24
 8002b4e:	d501      	bpl.n	8002b54 <_printf_i+0xbc>
 8002b50:	681d      	ldr	r5, [r3, #0]
 8002b52:	e003      	b.n	8002b5c <_printf_i+0xc4>
 8002b54:	0645      	lsls	r5, r0, #25
 8002b56:	d5fb      	bpl.n	8002b50 <_printf_i+0xb8>
 8002b58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002b5c:	2d00      	cmp	r5, #0
 8002b5e:	da03      	bge.n	8002b68 <_printf_i+0xd0>
 8002b60:	232d      	movs	r3, #45	@ 0x2d
 8002b62:	426d      	negs	r5, r5
 8002b64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b68:	4859      	ldr	r0, [pc, #356]	@ (8002cd0 <_printf_i+0x238>)
 8002b6a:	230a      	movs	r3, #10
 8002b6c:	e011      	b.n	8002b92 <_printf_i+0xfa>
 8002b6e:	6821      	ldr	r1, [r4, #0]
 8002b70:	6833      	ldr	r3, [r6, #0]
 8002b72:	0608      	lsls	r0, r1, #24
 8002b74:	f853 5b04 	ldr.w	r5, [r3], #4
 8002b78:	d402      	bmi.n	8002b80 <_printf_i+0xe8>
 8002b7a:	0649      	lsls	r1, r1, #25
 8002b7c:	bf48      	it	mi
 8002b7e:	b2ad      	uxthmi	r5, r5
 8002b80:	2f6f      	cmp	r7, #111	@ 0x6f
 8002b82:	4853      	ldr	r0, [pc, #332]	@ (8002cd0 <_printf_i+0x238>)
 8002b84:	6033      	str	r3, [r6, #0]
 8002b86:	bf14      	ite	ne
 8002b88:	230a      	movne	r3, #10
 8002b8a:	2308      	moveq	r3, #8
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002b92:	6866      	ldr	r6, [r4, #4]
 8002b94:	60a6      	str	r6, [r4, #8]
 8002b96:	2e00      	cmp	r6, #0
 8002b98:	bfa2      	ittt	ge
 8002b9a:	6821      	ldrge	r1, [r4, #0]
 8002b9c:	f021 0104 	bicge.w	r1, r1, #4
 8002ba0:	6021      	strge	r1, [r4, #0]
 8002ba2:	b90d      	cbnz	r5, 8002ba8 <_printf_i+0x110>
 8002ba4:	2e00      	cmp	r6, #0
 8002ba6:	d04b      	beq.n	8002c40 <_printf_i+0x1a8>
 8002ba8:	4616      	mov	r6, r2
 8002baa:	fbb5 f1f3 	udiv	r1, r5, r3
 8002bae:	fb03 5711 	mls	r7, r3, r1, r5
 8002bb2:	5dc7      	ldrb	r7, [r0, r7]
 8002bb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002bb8:	462f      	mov	r7, r5
 8002bba:	42bb      	cmp	r3, r7
 8002bbc:	460d      	mov	r5, r1
 8002bbe:	d9f4      	bls.n	8002baa <_printf_i+0x112>
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d10b      	bne.n	8002bdc <_printf_i+0x144>
 8002bc4:	6823      	ldr	r3, [r4, #0]
 8002bc6:	07df      	lsls	r7, r3, #31
 8002bc8:	d508      	bpl.n	8002bdc <_printf_i+0x144>
 8002bca:	6923      	ldr	r3, [r4, #16]
 8002bcc:	6861      	ldr	r1, [r4, #4]
 8002bce:	4299      	cmp	r1, r3
 8002bd0:	bfde      	ittt	le
 8002bd2:	2330      	movle	r3, #48	@ 0x30
 8002bd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002bd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002bdc:	1b92      	subs	r2, r2, r6
 8002bde:	6122      	str	r2, [r4, #16]
 8002be0:	f8cd a000 	str.w	sl, [sp]
 8002be4:	464b      	mov	r3, r9
 8002be6:	aa03      	add	r2, sp, #12
 8002be8:	4621      	mov	r1, r4
 8002bea:	4640      	mov	r0, r8
 8002bec:	f7ff fee6 	bl	80029bc <_printf_common>
 8002bf0:	3001      	adds	r0, #1
 8002bf2:	d14a      	bne.n	8002c8a <_printf_i+0x1f2>
 8002bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf8:	b004      	add	sp, #16
 8002bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bfe:	6823      	ldr	r3, [r4, #0]
 8002c00:	f043 0320 	orr.w	r3, r3, #32
 8002c04:	6023      	str	r3, [r4, #0]
 8002c06:	4833      	ldr	r0, [pc, #204]	@ (8002cd4 <_printf_i+0x23c>)
 8002c08:	2778      	movs	r7, #120	@ 0x78
 8002c0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002c0e:	6823      	ldr	r3, [r4, #0]
 8002c10:	6831      	ldr	r1, [r6, #0]
 8002c12:	061f      	lsls	r7, r3, #24
 8002c14:	f851 5b04 	ldr.w	r5, [r1], #4
 8002c18:	d402      	bmi.n	8002c20 <_printf_i+0x188>
 8002c1a:	065f      	lsls	r7, r3, #25
 8002c1c:	bf48      	it	mi
 8002c1e:	b2ad      	uxthmi	r5, r5
 8002c20:	6031      	str	r1, [r6, #0]
 8002c22:	07d9      	lsls	r1, r3, #31
 8002c24:	bf44      	itt	mi
 8002c26:	f043 0320 	orrmi.w	r3, r3, #32
 8002c2a:	6023      	strmi	r3, [r4, #0]
 8002c2c:	b11d      	cbz	r5, 8002c36 <_printf_i+0x19e>
 8002c2e:	2310      	movs	r3, #16
 8002c30:	e7ac      	b.n	8002b8c <_printf_i+0xf4>
 8002c32:	4827      	ldr	r0, [pc, #156]	@ (8002cd0 <_printf_i+0x238>)
 8002c34:	e7e9      	b.n	8002c0a <_printf_i+0x172>
 8002c36:	6823      	ldr	r3, [r4, #0]
 8002c38:	f023 0320 	bic.w	r3, r3, #32
 8002c3c:	6023      	str	r3, [r4, #0]
 8002c3e:	e7f6      	b.n	8002c2e <_printf_i+0x196>
 8002c40:	4616      	mov	r6, r2
 8002c42:	e7bd      	b.n	8002bc0 <_printf_i+0x128>
 8002c44:	6833      	ldr	r3, [r6, #0]
 8002c46:	6825      	ldr	r5, [r4, #0]
 8002c48:	6961      	ldr	r1, [r4, #20]
 8002c4a:	1d18      	adds	r0, r3, #4
 8002c4c:	6030      	str	r0, [r6, #0]
 8002c4e:	062e      	lsls	r6, r5, #24
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	d501      	bpl.n	8002c58 <_printf_i+0x1c0>
 8002c54:	6019      	str	r1, [r3, #0]
 8002c56:	e002      	b.n	8002c5e <_printf_i+0x1c6>
 8002c58:	0668      	lsls	r0, r5, #25
 8002c5a:	d5fb      	bpl.n	8002c54 <_printf_i+0x1bc>
 8002c5c:	8019      	strh	r1, [r3, #0]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	6123      	str	r3, [r4, #16]
 8002c62:	4616      	mov	r6, r2
 8002c64:	e7bc      	b.n	8002be0 <_printf_i+0x148>
 8002c66:	6833      	ldr	r3, [r6, #0]
 8002c68:	1d1a      	adds	r2, r3, #4
 8002c6a:	6032      	str	r2, [r6, #0]
 8002c6c:	681e      	ldr	r6, [r3, #0]
 8002c6e:	6862      	ldr	r2, [r4, #4]
 8002c70:	2100      	movs	r1, #0
 8002c72:	4630      	mov	r0, r6
 8002c74:	f7fd fab4 	bl	80001e0 <memchr>
 8002c78:	b108      	cbz	r0, 8002c7e <_printf_i+0x1e6>
 8002c7a:	1b80      	subs	r0, r0, r6
 8002c7c:	6060      	str	r0, [r4, #4]
 8002c7e:	6863      	ldr	r3, [r4, #4]
 8002c80:	6123      	str	r3, [r4, #16]
 8002c82:	2300      	movs	r3, #0
 8002c84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c88:	e7aa      	b.n	8002be0 <_printf_i+0x148>
 8002c8a:	6923      	ldr	r3, [r4, #16]
 8002c8c:	4632      	mov	r2, r6
 8002c8e:	4649      	mov	r1, r9
 8002c90:	4640      	mov	r0, r8
 8002c92:	47d0      	blx	sl
 8002c94:	3001      	adds	r0, #1
 8002c96:	d0ad      	beq.n	8002bf4 <_printf_i+0x15c>
 8002c98:	6823      	ldr	r3, [r4, #0]
 8002c9a:	079b      	lsls	r3, r3, #30
 8002c9c:	d413      	bmi.n	8002cc6 <_printf_i+0x22e>
 8002c9e:	68e0      	ldr	r0, [r4, #12]
 8002ca0:	9b03      	ldr	r3, [sp, #12]
 8002ca2:	4298      	cmp	r0, r3
 8002ca4:	bfb8      	it	lt
 8002ca6:	4618      	movlt	r0, r3
 8002ca8:	e7a6      	b.n	8002bf8 <_printf_i+0x160>
 8002caa:	2301      	movs	r3, #1
 8002cac:	4632      	mov	r2, r6
 8002cae:	4649      	mov	r1, r9
 8002cb0:	4640      	mov	r0, r8
 8002cb2:	47d0      	blx	sl
 8002cb4:	3001      	adds	r0, #1
 8002cb6:	d09d      	beq.n	8002bf4 <_printf_i+0x15c>
 8002cb8:	3501      	adds	r5, #1
 8002cba:	68e3      	ldr	r3, [r4, #12]
 8002cbc:	9903      	ldr	r1, [sp, #12]
 8002cbe:	1a5b      	subs	r3, r3, r1
 8002cc0:	42ab      	cmp	r3, r5
 8002cc2:	dcf2      	bgt.n	8002caa <_printf_i+0x212>
 8002cc4:	e7eb      	b.n	8002c9e <_printf_i+0x206>
 8002cc6:	2500      	movs	r5, #0
 8002cc8:	f104 0619 	add.w	r6, r4, #25
 8002ccc:	e7f5      	b.n	8002cba <_printf_i+0x222>
 8002cce:	bf00      	nop
 8002cd0:	0800512a 	.word	0x0800512a
 8002cd4:	0800513b 	.word	0x0800513b

08002cd8 <std>:
 8002cd8:	2300      	movs	r3, #0
 8002cda:	b510      	push	{r4, lr}
 8002cdc:	4604      	mov	r4, r0
 8002cde:	e9c0 3300 	strd	r3, r3, [r0]
 8002ce2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ce6:	6083      	str	r3, [r0, #8]
 8002ce8:	8181      	strh	r1, [r0, #12]
 8002cea:	6643      	str	r3, [r0, #100]	@ 0x64
 8002cec:	81c2      	strh	r2, [r0, #14]
 8002cee:	6183      	str	r3, [r0, #24]
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	2208      	movs	r2, #8
 8002cf4:	305c      	adds	r0, #92	@ 0x5c
 8002cf6:	f000 f914 	bl	8002f22 <memset>
 8002cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002d30 <std+0x58>)
 8002cfc:	6263      	str	r3, [r4, #36]	@ 0x24
 8002cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8002d34 <std+0x5c>)
 8002d00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002d02:	4b0d      	ldr	r3, [pc, #52]	@ (8002d38 <std+0x60>)
 8002d04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002d06:	4b0d      	ldr	r3, [pc, #52]	@ (8002d3c <std+0x64>)
 8002d08:	6323      	str	r3, [r4, #48]	@ 0x30
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d40 <std+0x68>)
 8002d0c:	6224      	str	r4, [r4, #32]
 8002d0e:	429c      	cmp	r4, r3
 8002d10:	d006      	beq.n	8002d20 <std+0x48>
 8002d12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002d16:	4294      	cmp	r4, r2
 8002d18:	d002      	beq.n	8002d20 <std+0x48>
 8002d1a:	33d0      	adds	r3, #208	@ 0xd0
 8002d1c:	429c      	cmp	r4, r3
 8002d1e:	d105      	bne.n	8002d2c <std+0x54>
 8002d20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d28:	f000 b978 	b.w	800301c <__retarget_lock_init_recursive>
 8002d2c:	bd10      	pop	{r4, pc}
 8002d2e:	bf00      	nop
 8002d30:	08002e9d 	.word	0x08002e9d
 8002d34:	08002ebf 	.word	0x08002ebf
 8002d38:	08002ef7 	.word	0x08002ef7
 8002d3c:	08002f1b 	.word	0x08002f1b
 8002d40:	20000240 	.word	0x20000240

08002d44 <stdio_exit_handler>:
 8002d44:	4a02      	ldr	r2, [pc, #8]	@ (8002d50 <stdio_exit_handler+0xc>)
 8002d46:	4903      	ldr	r1, [pc, #12]	@ (8002d54 <stdio_exit_handler+0x10>)
 8002d48:	4803      	ldr	r0, [pc, #12]	@ (8002d58 <stdio_exit_handler+0x14>)
 8002d4a:	f000 b869 	b.w	8002e20 <_fwalk_sglue>
 8002d4e:	bf00      	nop
 8002d50:	2000000c 	.word	0x2000000c
 8002d54:	0800497d 	.word	0x0800497d
 8002d58:	2000001c 	.word	0x2000001c

08002d5c <cleanup_stdio>:
 8002d5c:	6841      	ldr	r1, [r0, #4]
 8002d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d90 <cleanup_stdio+0x34>)
 8002d60:	4299      	cmp	r1, r3
 8002d62:	b510      	push	{r4, lr}
 8002d64:	4604      	mov	r4, r0
 8002d66:	d001      	beq.n	8002d6c <cleanup_stdio+0x10>
 8002d68:	f001 fe08 	bl	800497c <_fflush_r>
 8002d6c:	68a1      	ldr	r1, [r4, #8]
 8002d6e:	4b09      	ldr	r3, [pc, #36]	@ (8002d94 <cleanup_stdio+0x38>)
 8002d70:	4299      	cmp	r1, r3
 8002d72:	d002      	beq.n	8002d7a <cleanup_stdio+0x1e>
 8002d74:	4620      	mov	r0, r4
 8002d76:	f001 fe01 	bl	800497c <_fflush_r>
 8002d7a:	68e1      	ldr	r1, [r4, #12]
 8002d7c:	4b06      	ldr	r3, [pc, #24]	@ (8002d98 <cleanup_stdio+0x3c>)
 8002d7e:	4299      	cmp	r1, r3
 8002d80:	d004      	beq.n	8002d8c <cleanup_stdio+0x30>
 8002d82:	4620      	mov	r0, r4
 8002d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d88:	f001 bdf8 	b.w	800497c <_fflush_r>
 8002d8c:	bd10      	pop	{r4, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000240 	.word	0x20000240
 8002d94:	200002a8 	.word	0x200002a8
 8002d98:	20000310 	.word	0x20000310

08002d9c <global_stdio_init.part.0>:
 8002d9c:	b510      	push	{r4, lr}
 8002d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002dcc <global_stdio_init.part.0+0x30>)
 8002da0:	4c0b      	ldr	r4, [pc, #44]	@ (8002dd0 <global_stdio_init.part.0+0x34>)
 8002da2:	4a0c      	ldr	r2, [pc, #48]	@ (8002dd4 <global_stdio_init.part.0+0x38>)
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	4620      	mov	r0, r4
 8002da8:	2200      	movs	r2, #0
 8002daa:	2104      	movs	r1, #4
 8002dac:	f7ff ff94 	bl	8002cd8 <std>
 8002db0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002db4:	2201      	movs	r2, #1
 8002db6:	2109      	movs	r1, #9
 8002db8:	f7ff ff8e 	bl	8002cd8 <std>
 8002dbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dc6:	2112      	movs	r1, #18
 8002dc8:	f7ff bf86 	b.w	8002cd8 <std>
 8002dcc:	20000378 	.word	0x20000378
 8002dd0:	20000240 	.word	0x20000240
 8002dd4:	08002d45 	.word	0x08002d45

08002dd8 <__sfp_lock_acquire>:
 8002dd8:	4801      	ldr	r0, [pc, #4]	@ (8002de0 <__sfp_lock_acquire+0x8>)
 8002dda:	f000 b920 	b.w	800301e <__retarget_lock_acquire_recursive>
 8002dde:	bf00      	nop
 8002de0:	20000381 	.word	0x20000381

08002de4 <__sfp_lock_release>:
 8002de4:	4801      	ldr	r0, [pc, #4]	@ (8002dec <__sfp_lock_release+0x8>)
 8002de6:	f000 b91b 	b.w	8003020 <__retarget_lock_release_recursive>
 8002dea:	bf00      	nop
 8002dec:	20000381 	.word	0x20000381

08002df0 <__sinit>:
 8002df0:	b510      	push	{r4, lr}
 8002df2:	4604      	mov	r4, r0
 8002df4:	f7ff fff0 	bl	8002dd8 <__sfp_lock_acquire>
 8002df8:	6a23      	ldr	r3, [r4, #32]
 8002dfa:	b11b      	cbz	r3, 8002e04 <__sinit+0x14>
 8002dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e00:	f7ff bff0 	b.w	8002de4 <__sfp_lock_release>
 8002e04:	4b04      	ldr	r3, [pc, #16]	@ (8002e18 <__sinit+0x28>)
 8002e06:	6223      	str	r3, [r4, #32]
 8002e08:	4b04      	ldr	r3, [pc, #16]	@ (8002e1c <__sinit+0x2c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f5      	bne.n	8002dfc <__sinit+0xc>
 8002e10:	f7ff ffc4 	bl	8002d9c <global_stdio_init.part.0>
 8002e14:	e7f2      	b.n	8002dfc <__sinit+0xc>
 8002e16:	bf00      	nop
 8002e18:	08002d5d 	.word	0x08002d5d
 8002e1c:	20000378 	.word	0x20000378

08002e20 <_fwalk_sglue>:
 8002e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e24:	4607      	mov	r7, r0
 8002e26:	4688      	mov	r8, r1
 8002e28:	4614      	mov	r4, r2
 8002e2a:	2600      	movs	r6, #0
 8002e2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e30:	f1b9 0901 	subs.w	r9, r9, #1
 8002e34:	d505      	bpl.n	8002e42 <_fwalk_sglue+0x22>
 8002e36:	6824      	ldr	r4, [r4, #0]
 8002e38:	2c00      	cmp	r4, #0
 8002e3a:	d1f7      	bne.n	8002e2c <_fwalk_sglue+0xc>
 8002e3c:	4630      	mov	r0, r6
 8002e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e42:	89ab      	ldrh	r3, [r5, #12]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d907      	bls.n	8002e58 <_fwalk_sglue+0x38>
 8002e48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	d003      	beq.n	8002e58 <_fwalk_sglue+0x38>
 8002e50:	4629      	mov	r1, r5
 8002e52:	4638      	mov	r0, r7
 8002e54:	47c0      	blx	r8
 8002e56:	4306      	orrs	r6, r0
 8002e58:	3568      	adds	r5, #104	@ 0x68
 8002e5a:	e7e9      	b.n	8002e30 <_fwalk_sglue+0x10>

08002e5c <siprintf>:
 8002e5c:	b40e      	push	{r1, r2, r3}
 8002e5e:	b500      	push	{lr}
 8002e60:	b09c      	sub	sp, #112	@ 0x70
 8002e62:	ab1d      	add	r3, sp, #116	@ 0x74
 8002e64:	9002      	str	r0, [sp, #8]
 8002e66:	9006      	str	r0, [sp, #24]
 8002e68:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002e6c:	4809      	ldr	r0, [pc, #36]	@ (8002e94 <siprintf+0x38>)
 8002e6e:	9107      	str	r1, [sp, #28]
 8002e70:	9104      	str	r1, [sp, #16]
 8002e72:	4909      	ldr	r1, [pc, #36]	@ (8002e98 <siprintf+0x3c>)
 8002e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e78:	9105      	str	r1, [sp, #20]
 8002e7a:	6800      	ldr	r0, [r0, #0]
 8002e7c:	9301      	str	r3, [sp, #4]
 8002e7e:	a902      	add	r1, sp, #8
 8002e80:	f001 fbfc 	bl	800467c <_svfiprintf_r>
 8002e84:	9b02      	ldr	r3, [sp, #8]
 8002e86:	2200      	movs	r2, #0
 8002e88:	701a      	strb	r2, [r3, #0]
 8002e8a:	b01c      	add	sp, #112	@ 0x70
 8002e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e90:	b003      	add	sp, #12
 8002e92:	4770      	bx	lr
 8002e94:	20000018 	.word	0x20000018
 8002e98:	ffff0208 	.word	0xffff0208

08002e9c <__sread>:
 8002e9c:	b510      	push	{r4, lr}
 8002e9e:	460c      	mov	r4, r1
 8002ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ea4:	f000 f86c 	bl	8002f80 <_read_r>
 8002ea8:	2800      	cmp	r0, #0
 8002eaa:	bfab      	itete	ge
 8002eac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002eae:	89a3      	ldrhlt	r3, [r4, #12]
 8002eb0:	181b      	addge	r3, r3, r0
 8002eb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002eb6:	bfac      	ite	ge
 8002eb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002eba:	81a3      	strhlt	r3, [r4, #12]
 8002ebc:	bd10      	pop	{r4, pc}

08002ebe <__swrite>:
 8002ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ec2:	461f      	mov	r7, r3
 8002ec4:	898b      	ldrh	r3, [r1, #12]
 8002ec6:	05db      	lsls	r3, r3, #23
 8002ec8:	4605      	mov	r5, r0
 8002eca:	460c      	mov	r4, r1
 8002ecc:	4616      	mov	r6, r2
 8002ece:	d505      	bpl.n	8002edc <__swrite+0x1e>
 8002ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f000 f840 	bl	8002f5c <_lseek_r>
 8002edc:	89a3      	ldrh	r3, [r4, #12]
 8002ede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ee2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ee6:	81a3      	strh	r3, [r4, #12]
 8002ee8:	4632      	mov	r2, r6
 8002eea:	463b      	mov	r3, r7
 8002eec:	4628      	mov	r0, r5
 8002eee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ef2:	f000 b857 	b.w	8002fa4 <_write_r>

08002ef6 <__sseek>:
 8002ef6:	b510      	push	{r4, lr}
 8002ef8:	460c      	mov	r4, r1
 8002efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002efe:	f000 f82d 	bl	8002f5c <_lseek_r>
 8002f02:	1c43      	adds	r3, r0, #1
 8002f04:	89a3      	ldrh	r3, [r4, #12]
 8002f06:	bf15      	itete	ne
 8002f08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002f0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002f0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002f12:	81a3      	strheq	r3, [r4, #12]
 8002f14:	bf18      	it	ne
 8002f16:	81a3      	strhne	r3, [r4, #12]
 8002f18:	bd10      	pop	{r4, pc}

08002f1a <__sclose>:
 8002f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f1e:	f000 b80d 	b.w	8002f3c <_close_r>

08002f22 <memset>:
 8002f22:	4402      	add	r2, r0
 8002f24:	4603      	mov	r3, r0
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d100      	bne.n	8002f2c <memset+0xa>
 8002f2a:	4770      	bx	lr
 8002f2c:	f803 1b01 	strb.w	r1, [r3], #1
 8002f30:	e7f9      	b.n	8002f26 <memset+0x4>
	...

08002f34 <_localeconv_r>:
 8002f34:	4800      	ldr	r0, [pc, #0]	@ (8002f38 <_localeconv_r+0x4>)
 8002f36:	4770      	bx	lr
 8002f38:	20000158 	.word	0x20000158

08002f3c <_close_r>:
 8002f3c:	b538      	push	{r3, r4, r5, lr}
 8002f3e:	4d06      	ldr	r5, [pc, #24]	@ (8002f58 <_close_r+0x1c>)
 8002f40:	2300      	movs	r3, #0
 8002f42:	4604      	mov	r4, r0
 8002f44:	4608      	mov	r0, r1
 8002f46:	602b      	str	r3, [r5, #0]
 8002f48:	f7fe fa55 	bl	80013f6 <_close>
 8002f4c:	1c43      	adds	r3, r0, #1
 8002f4e:	d102      	bne.n	8002f56 <_close_r+0x1a>
 8002f50:	682b      	ldr	r3, [r5, #0]
 8002f52:	b103      	cbz	r3, 8002f56 <_close_r+0x1a>
 8002f54:	6023      	str	r3, [r4, #0]
 8002f56:	bd38      	pop	{r3, r4, r5, pc}
 8002f58:	2000037c 	.word	0x2000037c

08002f5c <_lseek_r>:
 8002f5c:	b538      	push	{r3, r4, r5, lr}
 8002f5e:	4d07      	ldr	r5, [pc, #28]	@ (8002f7c <_lseek_r+0x20>)
 8002f60:	4604      	mov	r4, r0
 8002f62:	4608      	mov	r0, r1
 8002f64:	4611      	mov	r1, r2
 8002f66:	2200      	movs	r2, #0
 8002f68:	602a      	str	r2, [r5, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	f7fe fa6a 	bl	8001444 <_lseek>
 8002f70:	1c43      	adds	r3, r0, #1
 8002f72:	d102      	bne.n	8002f7a <_lseek_r+0x1e>
 8002f74:	682b      	ldr	r3, [r5, #0]
 8002f76:	b103      	cbz	r3, 8002f7a <_lseek_r+0x1e>
 8002f78:	6023      	str	r3, [r4, #0]
 8002f7a:	bd38      	pop	{r3, r4, r5, pc}
 8002f7c:	2000037c 	.word	0x2000037c

08002f80 <_read_r>:
 8002f80:	b538      	push	{r3, r4, r5, lr}
 8002f82:	4d07      	ldr	r5, [pc, #28]	@ (8002fa0 <_read_r+0x20>)
 8002f84:	4604      	mov	r4, r0
 8002f86:	4608      	mov	r0, r1
 8002f88:	4611      	mov	r1, r2
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	602a      	str	r2, [r5, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f7fe f9f8 	bl	8001384 <_read>
 8002f94:	1c43      	adds	r3, r0, #1
 8002f96:	d102      	bne.n	8002f9e <_read_r+0x1e>
 8002f98:	682b      	ldr	r3, [r5, #0]
 8002f9a:	b103      	cbz	r3, 8002f9e <_read_r+0x1e>
 8002f9c:	6023      	str	r3, [r4, #0]
 8002f9e:	bd38      	pop	{r3, r4, r5, pc}
 8002fa0:	2000037c 	.word	0x2000037c

08002fa4 <_write_r>:
 8002fa4:	b538      	push	{r3, r4, r5, lr}
 8002fa6:	4d07      	ldr	r5, [pc, #28]	@ (8002fc4 <_write_r+0x20>)
 8002fa8:	4604      	mov	r4, r0
 8002faa:	4608      	mov	r0, r1
 8002fac:	4611      	mov	r1, r2
 8002fae:	2200      	movs	r2, #0
 8002fb0:	602a      	str	r2, [r5, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f7fe fa03 	bl	80013be <_write>
 8002fb8:	1c43      	adds	r3, r0, #1
 8002fba:	d102      	bne.n	8002fc2 <_write_r+0x1e>
 8002fbc:	682b      	ldr	r3, [r5, #0]
 8002fbe:	b103      	cbz	r3, 8002fc2 <_write_r+0x1e>
 8002fc0:	6023      	str	r3, [r4, #0]
 8002fc2:	bd38      	pop	{r3, r4, r5, pc}
 8002fc4:	2000037c 	.word	0x2000037c

08002fc8 <__errno>:
 8002fc8:	4b01      	ldr	r3, [pc, #4]	@ (8002fd0 <__errno+0x8>)
 8002fca:	6818      	ldr	r0, [r3, #0]
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	20000018 	.word	0x20000018

08002fd4 <__libc_init_array>:
 8002fd4:	b570      	push	{r4, r5, r6, lr}
 8002fd6:	4d0d      	ldr	r5, [pc, #52]	@ (800300c <__libc_init_array+0x38>)
 8002fd8:	4c0d      	ldr	r4, [pc, #52]	@ (8003010 <__libc_init_array+0x3c>)
 8002fda:	1b64      	subs	r4, r4, r5
 8002fdc:	10a4      	asrs	r4, r4, #2
 8002fde:	2600      	movs	r6, #0
 8002fe0:	42a6      	cmp	r6, r4
 8002fe2:	d109      	bne.n	8002ff8 <__libc_init_array+0x24>
 8002fe4:	4d0b      	ldr	r5, [pc, #44]	@ (8003014 <__libc_init_array+0x40>)
 8002fe6:	4c0c      	ldr	r4, [pc, #48]	@ (8003018 <__libc_init_array+0x44>)
 8002fe8:	f002 f866 	bl	80050b8 <_init>
 8002fec:	1b64      	subs	r4, r4, r5
 8002fee:	10a4      	asrs	r4, r4, #2
 8002ff0:	2600      	movs	r6, #0
 8002ff2:	42a6      	cmp	r6, r4
 8002ff4:	d105      	bne.n	8003002 <__libc_init_array+0x2e>
 8002ff6:	bd70      	pop	{r4, r5, r6, pc}
 8002ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ffc:	4798      	blx	r3
 8002ffe:	3601      	adds	r6, #1
 8003000:	e7ee      	b.n	8002fe0 <__libc_init_array+0xc>
 8003002:	f855 3b04 	ldr.w	r3, [r5], #4
 8003006:	4798      	blx	r3
 8003008:	3601      	adds	r6, #1
 800300a:	e7f2      	b.n	8002ff2 <__libc_init_array+0x1e>
 800300c:	08005490 	.word	0x08005490
 8003010:	08005490 	.word	0x08005490
 8003014:	08005490 	.word	0x08005490
 8003018:	08005494 	.word	0x08005494

0800301c <__retarget_lock_init_recursive>:
 800301c:	4770      	bx	lr

0800301e <__retarget_lock_acquire_recursive>:
 800301e:	4770      	bx	lr

08003020 <__retarget_lock_release_recursive>:
 8003020:	4770      	bx	lr

08003022 <quorem>:
 8003022:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003026:	6903      	ldr	r3, [r0, #16]
 8003028:	690c      	ldr	r4, [r1, #16]
 800302a:	42a3      	cmp	r3, r4
 800302c:	4607      	mov	r7, r0
 800302e:	db7e      	blt.n	800312e <quorem+0x10c>
 8003030:	3c01      	subs	r4, #1
 8003032:	f101 0814 	add.w	r8, r1, #20
 8003036:	00a3      	lsls	r3, r4, #2
 8003038:	f100 0514 	add.w	r5, r0, #20
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003042:	9301      	str	r3, [sp, #4]
 8003044:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003048:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800304c:	3301      	adds	r3, #1
 800304e:	429a      	cmp	r2, r3
 8003050:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003054:	fbb2 f6f3 	udiv	r6, r2, r3
 8003058:	d32e      	bcc.n	80030b8 <quorem+0x96>
 800305a:	f04f 0a00 	mov.w	sl, #0
 800305e:	46c4      	mov	ip, r8
 8003060:	46ae      	mov	lr, r5
 8003062:	46d3      	mov	fp, sl
 8003064:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003068:	b298      	uxth	r0, r3
 800306a:	fb06 a000 	mla	r0, r6, r0, sl
 800306e:	0c02      	lsrs	r2, r0, #16
 8003070:	0c1b      	lsrs	r3, r3, #16
 8003072:	fb06 2303 	mla	r3, r6, r3, r2
 8003076:	f8de 2000 	ldr.w	r2, [lr]
 800307a:	b280      	uxth	r0, r0
 800307c:	b292      	uxth	r2, r2
 800307e:	1a12      	subs	r2, r2, r0
 8003080:	445a      	add	r2, fp
 8003082:	f8de 0000 	ldr.w	r0, [lr]
 8003086:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800308a:	b29b      	uxth	r3, r3
 800308c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003090:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003094:	b292      	uxth	r2, r2
 8003096:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800309a:	45e1      	cmp	r9, ip
 800309c:	f84e 2b04 	str.w	r2, [lr], #4
 80030a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80030a4:	d2de      	bcs.n	8003064 <quorem+0x42>
 80030a6:	9b00      	ldr	r3, [sp, #0]
 80030a8:	58eb      	ldr	r3, [r5, r3]
 80030aa:	b92b      	cbnz	r3, 80030b8 <quorem+0x96>
 80030ac:	9b01      	ldr	r3, [sp, #4]
 80030ae:	3b04      	subs	r3, #4
 80030b0:	429d      	cmp	r5, r3
 80030b2:	461a      	mov	r2, r3
 80030b4:	d32f      	bcc.n	8003116 <quorem+0xf4>
 80030b6:	613c      	str	r4, [r7, #16]
 80030b8:	4638      	mov	r0, r7
 80030ba:	f001 f97b 	bl	80043b4 <__mcmp>
 80030be:	2800      	cmp	r0, #0
 80030c0:	db25      	blt.n	800310e <quorem+0xec>
 80030c2:	4629      	mov	r1, r5
 80030c4:	2000      	movs	r0, #0
 80030c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80030ca:	f8d1 c000 	ldr.w	ip, [r1]
 80030ce:	fa1f fe82 	uxth.w	lr, r2
 80030d2:	fa1f f38c 	uxth.w	r3, ip
 80030d6:	eba3 030e 	sub.w	r3, r3, lr
 80030da:	4403      	add	r3, r0
 80030dc:	0c12      	lsrs	r2, r2, #16
 80030de:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80030e2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80030ec:	45c1      	cmp	r9, r8
 80030ee:	f841 3b04 	str.w	r3, [r1], #4
 80030f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80030f6:	d2e6      	bcs.n	80030c6 <quorem+0xa4>
 80030f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80030fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003100:	b922      	cbnz	r2, 800310c <quorem+0xea>
 8003102:	3b04      	subs	r3, #4
 8003104:	429d      	cmp	r5, r3
 8003106:	461a      	mov	r2, r3
 8003108:	d30b      	bcc.n	8003122 <quorem+0x100>
 800310a:	613c      	str	r4, [r7, #16]
 800310c:	3601      	adds	r6, #1
 800310e:	4630      	mov	r0, r6
 8003110:	b003      	add	sp, #12
 8003112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	3b04      	subs	r3, #4
 800311a:	2a00      	cmp	r2, #0
 800311c:	d1cb      	bne.n	80030b6 <quorem+0x94>
 800311e:	3c01      	subs	r4, #1
 8003120:	e7c6      	b.n	80030b0 <quorem+0x8e>
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	3b04      	subs	r3, #4
 8003126:	2a00      	cmp	r2, #0
 8003128:	d1ef      	bne.n	800310a <quorem+0xe8>
 800312a:	3c01      	subs	r4, #1
 800312c:	e7ea      	b.n	8003104 <quorem+0xe2>
 800312e:	2000      	movs	r0, #0
 8003130:	e7ee      	b.n	8003110 <quorem+0xee>
 8003132:	0000      	movs	r0, r0
 8003134:	0000      	movs	r0, r0
	...

08003138 <_dtoa_r>:
 8003138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800313c:	69c7      	ldr	r7, [r0, #28]
 800313e:	b099      	sub	sp, #100	@ 0x64
 8003140:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003144:	ec55 4b10 	vmov	r4, r5, d0
 8003148:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800314a:	9109      	str	r1, [sp, #36]	@ 0x24
 800314c:	4683      	mov	fp, r0
 800314e:	920e      	str	r2, [sp, #56]	@ 0x38
 8003150:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003152:	b97f      	cbnz	r7, 8003174 <_dtoa_r+0x3c>
 8003154:	2010      	movs	r0, #16
 8003156:	f000 fdfd 	bl	8003d54 <malloc>
 800315a:	4602      	mov	r2, r0
 800315c:	f8cb 001c 	str.w	r0, [fp, #28]
 8003160:	b920      	cbnz	r0, 800316c <_dtoa_r+0x34>
 8003162:	4ba7      	ldr	r3, [pc, #668]	@ (8003400 <_dtoa_r+0x2c8>)
 8003164:	21ef      	movs	r1, #239	@ 0xef
 8003166:	48a7      	ldr	r0, [pc, #668]	@ (8003404 <_dtoa_r+0x2cc>)
 8003168:	f001 fc68 	bl	8004a3c <__assert_func>
 800316c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003170:	6007      	str	r7, [r0, #0]
 8003172:	60c7      	str	r7, [r0, #12]
 8003174:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003178:	6819      	ldr	r1, [r3, #0]
 800317a:	b159      	cbz	r1, 8003194 <_dtoa_r+0x5c>
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	604a      	str	r2, [r1, #4]
 8003180:	2301      	movs	r3, #1
 8003182:	4093      	lsls	r3, r2
 8003184:	608b      	str	r3, [r1, #8]
 8003186:	4658      	mov	r0, fp
 8003188:	f000 feda 	bl	8003f40 <_Bfree>
 800318c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	1e2b      	subs	r3, r5, #0
 8003196:	bfb9      	ittee	lt
 8003198:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800319c:	9303      	strlt	r3, [sp, #12]
 800319e:	2300      	movge	r3, #0
 80031a0:	6033      	strge	r3, [r6, #0]
 80031a2:	9f03      	ldr	r7, [sp, #12]
 80031a4:	4b98      	ldr	r3, [pc, #608]	@ (8003408 <_dtoa_r+0x2d0>)
 80031a6:	bfbc      	itt	lt
 80031a8:	2201      	movlt	r2, #1
 80031aa:	6032      	strlt	r2, [r6, #0]
 80031ac:	43bb      	bics	r3, r7
 80031ae:	d112      	bne.n	80031d6 <_dtoa_r+0x9e>
 80031b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80031b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80031bc:	4323      	orrs	r3, r4
 80031be:	f000 854d 	beq.w	8003c5c <_dtoa_r+0xb24>
 80031c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80031c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800341c <_dtoa_r+0x2e4>
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 854f 	beq.w	8003c6c <_dtoa_r+0xb34>
 80031ce:	f10a 0303 	add.w	r3, sl, #3
 80031d2:	f000 bd49 	b.w	8003c68 <_dtoa_r+0xb30>
 80031d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80031da:	2200      	movs	r2, #0
 80031dc:	ec51 0b17 	vmov	r0, r1, d7
 80031e0:	2300      	movs	r3, #0
 80031e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80031e6:	f7fd fc77 	bl	8000ad8 <__aeabi_dcmpeq>
 80031ea:	4680      	mov	r8, r0
 80031ec:	b158      	cbz	r0, 8003206 <_dtoa_r+0xce>
 80031ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80031f0:	2301      	movs	r3, #1
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80031f6:	b113      	cbz	r3, 80031fe <_dtoa_r+0xc6>
 80031f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80031fa:	4b84      	ldr	r3, [pc, #528]	@ (800340c <_dtoa_r+0x2d4>)
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8003420 <_dtoa_r+0x2e8>
 8003202:	f000 bd33 	b.w	8003c6c <_dtoa_r+0xb34>
 8003206:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800320a:	aa16      	add	r2, sp, #88	@ 0x58
 800320c:	a917      	add	r1, sp, #92	@ 0x5c
 800320e:	4658      	mov	r0, fp
 8003210:	f001 f980 	bl	8004514 <__d2b>
 8003214:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003218:	4681      	mov	r9, r0
 800321a:	2e00      	cmp	r6, #0
 800321c:	d077      	beq.n	800330e <_dtoa_r+0x1d6>
 800321e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003220:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8003224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003228:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800322c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003230:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003234:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003238:	4619      	mov	r1, r3
 800323a:	2200      	movs	r2, #0
 800323c:	4b74      	ldr	r3, [pc, #464]	@ (8003410 <_dtoa_r+0x2d8>)
 800323e:	f7fd f82b 	bl	8000298 <__aeabi_dsub>
 8003242:	a369      	add	r3, pc, #420	@ (adr r3, 80033e8 <_dtoa_r+0x2b0>)
 8003244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003248:	f7fd f9de 	bl	8000608 <__aeabi_dmul>
 800324c:	a368      	add	r3, pc, #416	@ (adr r3, 80033f0 <_dtoa_r+0x2b8>)
 800324e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003252:	f7fd f823 	bl	800029c <__adddf3>
 8003256:	4604      	mov	r4, r0
 8003258:	4630      	mov	r0, r6
 800325a:	460d      	mov	r5, r1
 800325c:	f7fd f96a 	bl	8000534 <__aeabi_i2d>
 8003260:	a365      	add	r3, pc, #404	@ (adr r3, 80033f8 <_dtoa_r+0x2c0>)
 8003262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003266:	f7fd f9cf 	bl	8000608 <__aeabi_dmul>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4620      	mov	r0, r4
 8003270:	4629      	mov	r1, r5
 8003272:	f7fd f813 	bl	800029c <__adddf3>
 8003276:	4604      	mov	r4, r0
 8003278:	460d      	mov	r5, r1
 800327a:	f7fd fc75 	bl	8000b68 <__aeabi_d2iz>
 800327e:	2200      	movs	r2, #0
 8003280:	4607      	mov	r7, r0
 8003282:	2300      	movs	r3, #0
 8003284:	4620      	mov	r0, r4
 8003286:	4629      	mov	r1, r5
 8003288:	f7fd fc30 	bl	8000aec <__aeabi_dcmplt>
 800328c:	b140      	cbz	r0, 80032a0 <_dtoa_r+0x168>
 800328e:	4638      	mov	r0, r7
 8003290:	f7fd f950 	bl	8000534 <__aeabi_i2d>
 8003294:	4622      	mov	r2, r4
 8003296:	462b      	mov	r3, r5
 8003298:	f7fd fc1e 	bl	8000ad8 <__aeabi_dcmpeq>
 800329c:	b900      	cbnz	r0, 80032a0 <_dtoa_r+0x168>
 800329e:	3f01      	subs	r7, #1
 80032a0:	2f16      	cmp	r7, #22
 80032a2:	d851      	bhi.n	8003348 <_dtoa_r+0x210>
 80032a4:	4b5b      	ldr	r3, [pc, #364]	@ (8003414 <_dtoa_r+0x2dc>)
 80032a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80032aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80032b2:	f7fd fc1b 	bl	8000aec <__aeabi_dcmplt>
 80032b6:	2800      	cmp	r0, #0
 80032b8:	d048      	beq.n	800334c <_dtoa_r+0x214>
 80032ba:	3f01      	subs	r7, #1
 80032bc:	2300      	movs	r3, #0
 80032be:	9312      	str	r3, [sp, #72]	@ 0x48
 80032c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80032c2:	1b9b      	subs	r3, r3, r6
 80032c4:	1e5a      	subs	r2, r3, #1
 80032c6:	bf44      	itt	mi
 80032c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80032cc:	2300      	movmi	r3, #0
 80032ce:	9208      	str	r2, [sp, #32]
 80032d0:	bf54      	ite	pl
 80032d2:	f04f 0800 	movpl.w	r8, #0
 80032d6:	9308      	strmi	r3, [sp, #32]
 80032d8:	2f00      	cmp	r7, #0
 80032da:	db39      	blt.n	8003350 <_dtoa_r+0x218>
 80032dc:	9b08      	ldr	r3, [sp, #32]
 80032de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80032e0:	443b      	add	r3, r7
 80032e2:	9308      	str	r3, [sp, #32]
 80032e4:	2300      	movs	r3, #0
 80032e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80032e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032ea:	2b09      	cmp	r3, #9
 80032ec:	d864      	bhi.n	80033b8 <_dtoa_r+0x280>
 80032ee:	2b05      	cmp	r3, #5
 80032f0:	bfc4      	itt	gt
 80032f2:	3b04      	subgt	r3, #4
 80032f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80032f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032f8:	f1a3 0302 	sub.w	r3, r3, #2
 80032fc:	bfcc      	ite	gt
 80032fe:	2400      	movgt	r4, #0
 8003300:	2401      	movle	r4, #1
 8003302:	2b03      	cmp	r3, #3
 8003304:	d863      	bhi.n	80033ce <_dtoa_r+0x296>
 8003306:	e8df f003 	tbb	[pc, r3]
 800330a:	372a      	.short	0x372a
 800330c:	5535      	.short	0x5535
 800330e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8003312:	441e      	add	r6, r3
 8003314:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003318:	2b20      	cmp	r3, #32
 800331a:	bfc1      	itttt	gt
 800331c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003320:	409f      	lslgt	r7, r3
 8003322:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003326:	fa24 f303 	lsrgt.w	r3, r4, r3
 800332a:	bfd6      	itet	le
 800332c:	f1c3 0320 	rsble	r3, r3, #32
 8003330:	ea47 0003 	orrgt.w	r0, r7, r3
 8003334:	fa04 f003 	lslle.w	r0, r4, r3
 8003338:	f7fd f8ec 	bl	8000514 <__aeabi_ui2d>
 800333c:	2201      	movs	r2, #1
 800333e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003342:	3e01      	subs	r6, #1
 8003344:	9214      	str	r2, [sp, #80]	@ 0x50
 8003346:	e777      	b.n	8003238 <_dtoa_r+0x100>
 8003348:	2301      	movs	r3, #1
 800334a:	e7b8      	b.n	80032be <_dtoa_r+0x186>
 800334c:	9012      	str	r0, [sp, #72]	@ 0x48
 800334e:	e7b7      	b.n	80032c0 <_dtoa_r+0x188>
 8003350:	427b      	negs	r3, r7
 8003352:	930a      	str	r3, [sp, #40]	@ 0x28
 8003354:	2300      	movs	r3, #0
 8003356:	eba8 0807 	sub.w	r8, r8, r7
 800335a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800335c:	e7c4      	b.n	80032e8 <_dtoa_r+0x1b0>
 800335e:	2300      	movs	r3, #0
 8003360:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003362:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003364:	2b00      	cmp	r3, #0
 8003366:	dc35      	bgt.n	80033d4 <_dtoa_r+0x29c>
 8003368:	2301      	movs	r3, #1
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	9307      	str	r3, [sp, #28]
 800336e:	461a      	mov	r2, r3
 8003370:	920e      	str	r2, [sp, #56]	@ 0x38
 8003372:	e00b      	b.n	800338c <_dtoa_r+0x254>
 8003374:	2301      	movs	r3, #1
 8003376:	e7f3      	b.n	8003360 <_dtoa_r+0x228>
 8003378:	2300      	movs	r3, #0
 800337a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800337c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800337e:	18fb      	adds	r3, r7, r3
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	3301      	adds	r3, #1
 8003384:	2b01      	cmp	r3, #1
 8003386:	9307      	str	r3, [sp, #28]
 8003388:	bfb8      	it	lt
 800338a:	2301      	movlt	r3, #1
 800338c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003390:	2100      	movs	r1, #0
 8003392:	2204      	movs	r2, #4
 8003394:	f102 0514 	add.w	r5, r2, #20
 8003398:	429d      	cmp	r5, r3
 800339a:	d91f      	bls.n	80033dc <_dtoa_r+0x2a4>
 800339c:	6041      	str	r1, [r0, #4]
 800339e:	4658      	mov	r0, fp
 80033a0:	f000 fd8e 	bl	8003ec0 <_Balloc>
 80033a4:	4682      	mov	sl, r0
 80033a6:	2800      	cmp	r0, #0
 80033a8:	d13c      	bne.n	8003424 <_dtoa_r+0x2ec>
 80033aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003418 <_dtoa_r+0x2e0>)
 80033ac:	4602      	mov	r2, r0
 80033ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80033b2:	e6d8      	b.n	8003166 <_dtoa_r+0x2e>
 80033b4:	2301      	movs	r3, #1
 80033b6:	e7e0      	b.n	800337a <_dtoa_r+0x242>
 80033b8:	2401      	movs	r4, #1
 80033ba:	2300      	movs	r3, #0
 80033bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80033be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80033c0:	f04f 33ff 	mov.w	r3, #4294967295
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	9307      	str	r3, [sp, #28]
 80033c8:	2200      	movs	r2, #0
 80033ca:	2312      	movs	r3, #18
 80033cc:	e7d0      	b.n	8003370 <_dtoa_r+0x238>
 80033ce:	2301      	movs	r3, #1
 80033d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80033d2:	e7f5      	b.n	80033c0 <_dtoa_r+0x288>
 80033d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	9307      	str	r3, [sp, #28]
 80033da:	e7d7      	b.n	800338c <_dtoa_r+0x254>
 80033dc:	3101      	adds	r1, #1
 80033de:	0052      	lsls	r2, r2, #1
 80033e0:	e7d8      	b.n	8003394 <_dtoa_r+0x25c>
 80033e2:	bf00      	nop
 80033e4:	f3af 8000 	nop.w
 80033e8:	636f4361 	.word	0x636f4361
 80033ec:	3fd287a7 	.word	0x3fd287a7
 80033f0:	8b60c8b3 	.word	0x8b60c8b3
 80033f4:	3fc68a28 	.word	0x3fc68a28
 80033f8:	509f79fb 	.word	0x509f79fb
 80033fc:	3fd34413 	.word	0x3fd34413
 8003400:	08005159 	.word	0x08005159
 8003404:	08005170 	.word	0x08005170
 8003408:	7ff00000 	.word	0x7ff00000
 800340c:	08005129 	.word	0x08005129
 8003410:	3ff80000 	.word	0x3ff80000
 8003414:	08005268 	.word	0x08005268
 8003418:	080051c8 	.word	0x080051c8
 800341c:	08005155 	.word	0x08005155
 8003420:	08005128 	.word	0x08005128
 8003424:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003428:	6018      	str	r0, [r3, #0]
 800342a:	9b07      	ldr	r3, [sp, #28]
 800342c:	2b0e      	cmp	r3, #14
 800342e:	f200 80a4 	bhi.w	800357a <_dtoa_r+0x442>
 8003432:	2c00      	cmp	r4, #0
 8003434:	f000 80a1 	beq.w	800357a <_dtoa_r+0x442>
 8003438:	2f00      	cmp	r7, #0
 800343a:	dd33      	ble.n	80034a4 <_dtoa_r+0x36c>
 800343c:	4bad      	ldr	r3, [pc, #692]	@ (80036f4 <_dtoa_r+0x5bc>)
 800343e:	f007 020f 	and.w	r2, r7, #15
 8003442:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003446:	ed93 7b00 	vldr	d7, [r3]
 800344a:	05f8      	lsls	r0, r7, #23
 800344c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003450:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003454:	d516      	bpl.n	8003484 <_dtoa_r+0x34c>
 8003456:	4ba8      	ldr	r3, [pc, #672]	@ (80036f8 <_dtoa_r+0x5c0>)
 8003458:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800345c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003460:	f7fd f9fc 	bl	800085c <__aeabi_ddiv>
 8003464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003468:	f004 040f 	and.w	r4, r4, #15
 800346c:	2603      	movs	r6, #3
 800346e:	4da2      	ldr	r5, [pc, #648]	@ (80036f8 <_dtoa_r+0x5c0>)
 8003470:	b954      	cbnz	r4, 8003488 <_dtoa_r+0x350>
 8003472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800347a:	f7fd f9ef 	bl	800085c <__aeabi_ddiv>
 800347e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003482:	e028      	b.n	80034d6 <_dtoa_r+0x39e>
 8003484:	2602      	movs	r6, #2
 8003486:	e7f2      	b.n	800346e <_dtoa_r+0x336>
 8003488:	07e1      	lsls	r1, r4, #31
 800348a:	d508      	bpl.n	800349e <_dtoa_r+0x366>
 800348c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003490:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003494:	f7fd f8b8 	bl	8000608 <__aeabi_dmul>
 8003498:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800349c:	3601      	adds	r6, #1
 800349e:	1064      	asrs	r4, r4, #1
 80034a0:	3508      	adds	r5, #8
 80034a2:	e7e5      	b.n	8003470 <_dtoa_r+0x338>
 80034a4:	f000 80d2 	beq.w	800364c <_dtoa_r+0x514>
 80034a8:	427c      	negs	r4, r7
 80034aa:	4b92      	ldr	r3, [pc, #584]	@ (80036f4 <_dtoa_r+0x5bc>)
 80034ac:	4d92      	ldr	r5, [pc, #584]	@ (80036f8 <_dtoa_r+0x5c0>)
 80034ae:	f004 020f 	and.w	r2, r4, #15
 80034b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80034b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80034be:	f7fd f8a3 	bl	8000608 <__aeabi_dmul>
 80034c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80034c6:	1124      	asrs	r4, r4, #4
 80034c8:	2300      	movs	r3, #0
 80034ca:	2602      	movs	r6, #2
 80034cc:	2c00      	cmp	r4, #0
 80034ce:	f040 80b2 	bne.w	8003636 <_dtoa_r+0x4fe>
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1d3      	bne.n	800347e <_dtoa_r+0x346>
 80034d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80034d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80b7 	beq.w	8003650 <_dtoa_r+0x518>
 80034e2:	4b86      	ldr	r3, [pc, #536]	@ (80036fc <_dtoa_r+0x5c4>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	4620      	mov	r0, r4
 80034e8:	4629      	mov	r1, r5
 80034ea:	f7fd faff 	bl	8000aec <__aeabi_dcmplt>
 80034ee:	2800      	cmp	r0, #0
 80034f0:	f000 80ae 	beq.w	8003650 <_dtoa_r+0x518>
 80034f4:	9b07      	ldr	r3, [sp, #28]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 80aa 	beq.w	8003650 <_dtoa_r+0x518>
 80034fc:	9b00      	ldr	r3, [sp, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	dd37      	ble.n	8003572 <_dtoa_r+0x43a>
 8003502:	1e7b      	subs	r3, r7, #1
 8003504:	9304      	str	r3, [sp, #16]
 8003506:	4620      	mov	r0, r4
 8003508:	4b7d      	ldr	r3, [pc, #500]	@ (8003700 <_dtoa_r+0x5c8>)
 800350a:	2200      	movs	r2, #0
 800350c:	4629      	mov	r1, r5
 800350e:	f7fd f87b 	bl	8000608 <__aeabi_dmul>
 8003512:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003516:	9c00      	ldr	r4, [sp, #0]
 8003518:	3601      	adds	r6, #1
 800351a:	4630      	mov	r0, r6
 800351c:	f7fd f80a 	bl	8000534 <__aeabi_i2d>
 8003520:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003524:	f7fd f870 	bl	8000608 <__aeabi_dmul>
 8003528:	4b76      	ldr	r3, [pc, #472]	@ (8003704 <_dtoa_r+0x5cc>)
 800352a:	2200      	movs	r2, #0
 800352c:	f7fc feb6 	bl	800029c <__adddf3>
 8003530:	4605      	mov	r5, r0
 8003532:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003536:	2c00      	cmp	r4, #0
 8003538:	f040 808d 	bne.w	8003656 <_dtoa_r+0x51e>
 800353c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003540:	4b71      	ldr	r3, [pc, #452]	@ (8003708 <_dtoa_r+0x5d0>)
 8003542:	2200      	movs	r2, #0
 8003544:	f7fc fea8 	bl	8000298 <__aeabi_dsub>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003550:	462a      	mov	r2, r5
 8003552:	4633      	mov	r3, r6
 8003554:	f7fd fae8 	bl	8000b28 <__aeabi_dcmpgt>
 8003558:	2800      	cmp	r0, #0
 800355a:	f040 828b 	bne.w	8003a74 <_dtoa_r+0x93c>
 800355e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003562:	462a      	mov	r2, r5
 8003564:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003568:	f7fd fac0 	bl	8000aec <__aeabi_dcmplt>
 800356c:	2800      	cmp	r0, #0
 800356e:	f040 8128 	bne.w	80037c2 <_dtoa_r+0x68a>
 8003572:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003576:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800357a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800357c:	2b00      	cmp	r3, #0
 800357e:	f2c0 815a 	blt.w	8003836 <_dtoa_r+0x6fe>
 8003582:	2f0e      	cmp	r7, #14
 8003584:	f300 8157 	bgt.w	8003836 <_dtoa_r+0x6fe>
 8003588:	4b5a      	ldr	r3, [pc, #360]	@ (80036f4 <_dtoa_r+0x5bc>)
 800358a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800358e:	ed93 7b00 	vldr	d7, [r3]
 8003592:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003594:	2b00      	cmp	r3, #0
 8003596:	ed8d 7b00 	vstr	d7, [sp]
 800359a:	da03      	bge.n	80035a4 <_dtoa_r+0x46c>
 800359c:	9b07      	ldr	r3, [sp, #28]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f340 8101 	ble.w	80037a6 <_dtoa_r+0x66e>
 80035a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80035a8:	4656      	mov	r6, sl
 80035aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80035ae:	4620      	mov	r0, r4
 80035b0:	4629      	mov	r1, r5
 80035b2:	f7fd f953 	bl	800085c <__aeabi_ddiv>
 80035b6:	f7fd fad7 	bl	8000b68 <__aeabi_d2iz>
 80035ba:	4680      	mov	r8, r0
 80035bc:	f7fc ffba 	bl	8000534 <__aeabi_i2d>
 80035c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80035c4:	f7fd f820 	bl	8000608 <__aeabi_dmul>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4620      	mov	r0, r4
 80035ce:	4629      	mov	r1, r5
 80035d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80035d4:	f7fc fe60 	bl	8000298 <__aeabi_dsub>
 80035d8:	f806 4b01 	strb.w	r4, [r6], #1
 80035dc:	9d07      	ldr	r5, [sp, #28]
 80035de:	eba6 040a 	sub.w	r4, r6, sl
 80035e2:	42a5      	cmp	r5, r4
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	f040 8117 	bne.w	800381a <_dtoa_r+0x6e2>
 80035ec:	f7fc fe56 	bl	800029c <__adddf3>
 80035f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80035f4:	4604      	mov	r4, r0
 80035f6:	460d      	mov	r5, r1
 80035f8:	f7fd fa96 	bl	8000b28 <__aeabi_dcmpgt>
 80035fc:	2800      	cmp	r0, #0
 80035fe:	f040 80f9 	bne.w	80037f4 <_dtoa_r+0x6bc>
 8003602:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003606:	4620      	mov	r0, r4
 8003608:	4629      	mov	r1, r5
 800360a:	f7fd fa65 	bl	8000ad8 <__aeabi_dcmpeq>
 800360e:	b118      	cbz	r0, 8003618 <_dtoa_r+0x4e0>
 8003610:	f018 0f01 	tst.w	r8, #1
 8003614:	f040 80ee 	bne.w	80037f4 <_dtoa_r+0x6bc>
 8003618:	4649      	mov	r1, r9
 800361a:	4658      	mov	r0, fp
 800361c:	f000 fc90 	bl	8003f40 <_Bfree>
 8003620:	2300      	movs	r3, #0
 8003622:	7033      	strb	r3, [r6, #0]
 8003624:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8003626:	3701      	adds	r7, #1
 8003628:	601f      	str	r7, [r3, #0]
 800362a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 831d 	beq.w	8003c6c <_dtoa_r+0xb34>
 8003632:	601e      	str	r6, [r3, #0]
 8003634:	e31a      	b.n	8003c6c <_dtoa_r+0xb34>
 8003636:	07e2      	lsls	r2, r4, #31
 8003638:	d505      	bpl.n	8003646 <_dtoa_r+0x50e>
 800363a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800363e:	f7fc ffe3 	bl	8000608 <__aeabi_dmul>
 8003642:	3601      	adds	r6, #1
 8003644:	2301      	movs	r3, #1
 8003646:	1064      	asrs	r4, r4, #1
 8003648:	3508      	adds	r5, #8
 800364a:	e73f      	b.n	80034cc <_dtoa_r+0x394>
 800364c:	2602      	movs	r6, #2
 800364e:	e742      	b.n	80034d6 <_dtoa_r+0x39e>
 8003650:	9c07      	ldr	r4, [sp, #28]
 8003652:	9704      	str	r7, [sp, #16]
 8003654:	e761      	b.n	800351a <_dtoa_r+0x3e2>
 8003656:	4b27      	ldr	r3, [pc, #156]	@ (80036f4 <_dtoa_r+0x5bc>)
 8003658:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800365a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800365e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003662:	4454      	add	r4, sl
 8003664:	2900      	cmp	r1, #0
 8003666:	d053      	beq.n	8003710 <_dtoa_r+0x5d8>
 8003668:	4928      	ldr	r1, [pc, #160]	@ (800370c <_dtoa_r+0x5d4>)
 800366a:	2000      	movs	r0, #0
 800366c:	f7fd f8f6 	bl	800085c <__aeabi_ddiv>
 8003670:	4633      	mov	r3, r6
 8003672:	462a      	mov	r2, r5
 8003674:	f7fc fe10 	bl	8000298 <__aeabi_dsub>
 8003678:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800367c:	4656      	mov	r6, sl
 800367e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003682:	f7fd fa71 	bl	8000b68 <__aeabi_d2iz>
 8003686:	4605      	mov	r5, r0
 8003688:	f7fc ff54 	bl	8000534 <__aeabi_i2d>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003694:	f7fc fe00 	bl	8000298 <__aeabi_dsub>
 8003698:	3530      	adds	r5, #48	@ 0x30
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80036a2:	f806 5b01 	strb.w	r5, [r6], #1
 80036a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80036aa:	f7fd fa1f 	bl	8000aec <__aeabi_dcmplt>
 80036ae:	2800      	cmp	r0, #0
 80036b0:	d171      	bne.n	8003796 <_dtoa_r+0x65e>
 80036b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80036b6:	4911      	ldr	r1, [pc, #68]	@ (80036fc <_dtoa_r+0x5c4>)
 80036b8:	2000      	movs	r0, #0
 80036ba:	f7fc fded 	bl	8000298 <__aeabi_dsub>
 80036be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80036c2:	f7fd fa13 	bl	8000aec <__aeabi_dcmplt>
 80036c6:	2800      	cmp	r0, #0
 80036c8:	f040 8095 	bne.w	80037f6 <_dtoa_r+0x6be>
 80036cc:	42a6      	cmp	r6, r4
 80036ce:	f43f af50 	beq.w	8003572 <_dtoa_r+0x43a>
 80036d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80036d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003700 <_dtoa_r+0x5c8>)
 80036d8:	2200      	movs	r2, #0
 80036da:	f7fc ff95 	bl	8000608 <__aeabi_dmul>
 80036de:	4b08      	ldr	r3, [pc, #32]	@ (8003700 <_dtoa_r+0x5c8>)
 80036e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80036e4:	2200      	movs	r2, #0
 80036e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036ea:	f7fc ff8d 	bl	8000608 <__aeabi_dmul>
 80036ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80036f2:	e7c4      	b.n	800367e <_dtoa_r+0x546>
 80036f4:	08005268 	.word	0x08005268
 80036f8:	08005240 	.word	0x08005240
 80036fc:	3ff00000 	.word	0x3ff00000
 8003700:	40240000 	.word	0x40240000
 8003704:	401c0000 	.word	0x401c0000
 8003708:	40140000 	.word	0x40140000
 800370c:	3fe00000 	.word	0x3fe00000
 8003710:	4631      	mov	r1, r6
 8003712:	4628      	mov	r0, r5
 8003714:	f7fc ff78 	bl	8000608 <__aeabi_dmul>
 8003718:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800371c:	9415      	str	r4, [sp, #84]	@ 0x54
 800371e:	4656      	mov	r6, sl
 8003720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003724:	f7fd fa20 	bl	8000b68 <__aeabi_d2iz>
 8003728:	4605      	mov	r5, r0
 800372a:	f7fc ff03 	bl	8000534 <__aeabi_i2d>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003736:	f7fc fdaf 	bl	8000298 <__aeabi_dsub>
 800373a:	3530      	adds	r5, #48	@ 0x30
 800373c:	f806 5b01 	strb.w	r5, [r6], #1
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	42a6      	cmp	r6, r4
 8003746:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	d124      	bne.n	800379a <_dtoa_r+0x662>
 8003750:	4bac      	ldr	r3, [pc, #688]	@ (8003a04 <_dtoa_r+0x8cc>)
 8003752:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003756:	f7fc fda1 	bl	800029c <__adddf3>
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003762:	f7fd f9e1 	bl	8000b28 <__aeabi_dcmpgt>
 8003766:	2800      	cmp	r0, #0
 8003768:	d145      	bne.n	80037f6 <_dtoa_r+0x6be>
 800376a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800376e:	49a5      	ldr	r1, [pc, #660]	@ (8003a04 <_dtoa_r+0x8cc>)
 8003770:	2000      	movs	r0, #0
 8003772:	f7fc fd91 	bl	8000298 <__aeabi_dsub>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800377e:	f7fd f9b5 	bl	8000aec <__aeabi_dcmplt>
 8003782:	2800      	cmp	r0, #0
 8003784:	f43f aef5 	beq.w	8003572 <_dtoa_r+0x43a>
 8003788:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800378a:	1e73      	subs	r3, r6, #1
 800378c:	9315      	str	r3, [sp, #84]	@ 0x54
 800378e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003792:	2b30      	cmp	r3, #48	@ 0x30
 8003794:	d0f8      	beq.n	8003788 <_dtoa_r+0x650>
 8003796:	9f04      	ldr	r7, [sp, #16]
 8003798:	e73e      	b.n	8003618 <_dtoa_r+0x4e0>
 800379a:	4b9b      	ldr	r3, [pc, #620]	@ (8003a08 <_dtoa_r+0x8d0>)
 800379c:	f7fc ff34 	bl	8000608 <__aeabi_dmul>
 80037a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80037a4:	e7bc      	b.n	8003720 <_dtoa_r+0x5e8>
 80037a6:	d10c      	bne.n	80037c2 <_dtoa_r+0x68a>
 80037a8:	4b98      	ldr	r3, [pc, #608]	@ (8003a0c <_dtoa_r+0x8d4>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80037b0:	f7fc ff2a 	bl	8000608 <__aeabi_dmul>
 80037b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80037b8:	f7fd f9ac 	bl	8000b14 <__aeabi_dcmpge>
 80037bc:	2800      	cmp	r0, #0
 80037be:	f000 8157 	beq.w	8003a70 <_dtoa_r+0x938>
 80037c2:	2400      	movs	r4, #0
 80037c4:	4625      	mov	r5, r4
 80037c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80037c8:	43db      	mvns	r3, r3
 80037ca:	9304      	str	r3, [sp, #16]
 80037cc:	4656      	mov	r6, sl
 80037ce:	2700      	movs	r7, #0
 80037d0:	4621      	mov	r1, r4
 80037d2:	4658      	mov	r0, fp
 80037d4:	f000 fbb4 	bl	8003f40 <_Bfree>
 80037d8:	2d00      	cmp	r5, #0
 80037da:	d0dc      	beq.n	8003796 <_dtoa_r+0x65e>
 80037dc:	b12f      	cbz	r7, 80037ea <_dtoa_r+0x6b2>
 80037de:	42af      	cmp	r7, r5
 80037e0:	d003      	beq.n	80037ea <_dtoa_r+0x6b2>
 80037e2:	4639      	mov	r1, r7
 80037e4:	4658      	mov	r0, fp
 80037e6:	f000 fbab 	bl	8003f40 <_Bfree>
 80037ea:	4629      	mov	r1, r5
 80037ec:	4658      	mov	r0, fp
 80037ee:	f000 fba7 	bl	8003f40 <_Bfree>
 80037f2:	e7d0      	b.n	8003796 <_dtoa_r+0x65e>
 80037f4:	9704      	str	r7, [sp, #16]
 80037f6:	4633      	mov	r3, r6
 80037f8:	461e      	mov	r6, r3
 80037fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80037fe:	2a39      	cmp	r2, #57	@ 0x39
 8003800:	d107      	bne.n	8003812 <_dtoa_r+0x6da>
 8003802:	459a      	cmp	sl, r3
 8003804:	d1f8      	bne.n	80037f8 <_dtoa_r+0x6c0>
 8003806:	9a04      	ldr	r2, [sp, #16]
 8003808:	3201      	adds	r2, #1
 800380a:	9204      	str	r2, [sp, #16]
 800380c:	2230      	movs	r2, #48	@ 0x30
 800380e:	f88a 2000 	strb.w	r2, [sl]
 8003812:	781a      	ldrb	r2, [r3, #0]
 8003814:	3201      	adds	r2, #1
 8003816:	701a      	strb	r2, [r3, #0]
 8003818:	e7bd      	b.n	8003796 <_dtoa_r+0x65e>
 800381a:	4b7b      	ldr	r3, [pc, #492]	@ (8003a08 <_dtoa_r+0x8d0>)
 800381c:	2200      	movs	r2, #0
 800381e:	f7fc fef3 	bl	8000608 <__aeabi_dmul>
 8003822:	2200      	movs	r2, #0
 8003824:	2300      	movs	r3, #0
 8003826:	4604      	mov	r4, r0
 8003828:	460d      	mov	r5, r1
 800382a:	f7fd f955 	bl	8000ad8 <__aeabi_dcmpeq>
 800382e:	2800      	cmp	r0, #0
 8003830:	f43f aebb 	beq.w	80035aa <_dtoa_r+0x472>
 8003834:	e6f0      	b.n	8003618 <_dtoa_r+0x4e0>
 8003836:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003838:	2a00      	cmp	r2, #0
 800383a:	f000 80db 	beq.w	80039f4 <_dtoa_r+0x8bc>
 800383e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003840:	2a01      	cmp	r2, #1
 8003842:	f300 80bf 	bgt.w	80039c4 <_dtoa_r+0x88c>
 8003846:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8003848:	2a00      	cmp	r2, #0
 800384a:	f000 80b7 	beq.w	80039bc <_dtoa_r+0x884>
 800384e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8003852:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003854:	4646      	mov	r6, r8
 8003856:	9a08      	ldr	r2, [sp, #32]
 8003858:	2101      	movs	r1, #1
 800385a:	441a      	add	r2, r3
 800385c:	4658      	mov	r0, fp
 800385e:	4498      	add	r8, r3
 8003860:	9208      	str	r2, [sp, #32]
 8003862:	f000 fc21 	bl	80040a8 <__i2b>
 8003866:	4605      	mov	r5, r0
 8003868:	b15e      	cbz	r6, 8003882 <_dtoa_r+0x74a>
 800386a:	9b08      	ldr	r3, [sp, #32]
 800386c:	2b00      	cmp	r3, #0
 800386e:	dd08      	ble.n	8003882 <_dtoa_r+0x74a>
 8003870:	42b3      	cmp	r3, r6
 8003872:	9a08      	ldr	r2, [sp, #32]
 8003874:	bfa8      	it	ge
 8003876:	4633      	movge	r3, r6
 8003878:	eba8 0803 	sub.w	r8, r8, r3
 800387c:	1af6      	subs	r6, r6, r3
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	9308      	str	r3, [sp, #32]
 8003882:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003884:	b1f3      	cbz	r3, 80038c4 <_dtoa_r+0x78c>
 8003886:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 80b7 	beq.w	80039fc <_dtoa_r+0x8c4>
 800388e:	b18c      	cbz	r4, 80038b4 <_dtoa_r+0x77c>
 8003890:	4629      	mov	r1, r5
 8003892:	4622      	mov	r2, r4
 8003894:	4658      	mov	r0, fp
 8003896:	f000 fcc7 	bl	8004228 <__pow5mult>
 800389a:	464a      	mov	r2, r9
 800389c:	4601      	mov	r1, r0
 800389e:	4605      	mov	r5, r0
 80038a0:	4658      	mov	r0, fp
 80038a2:	f000 fc17 	bl	80040d4 <__multiply>
 80038a6:	4649      	mov	r1, r9
 80038a8:	9004      	str	r0, [sp, #16]
 80038aa:	4658      	mov	r0, fp
 80038ac:	f000 fb48 	bl	8003f40 <_Bfree>
 80038b0:	9b04      	ldr	r3, [sp, #16]
 80038b2:	4699      	mov	r9, r3
 80038b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80038b6:	1b1a      	subs	r2, r3, r4
 80038b8:	d004      	beq.n	80038c4 <_dtoa_r+0x78c>
 80038ba:	4649      	mov	r1, r9
 80038bc:	4658      	mov	r0, fp
 80038be:	f000 fcb3 	bl	8004228 <__pow5mult>
 80038c2:	4681      	mov	r9, r0
 80038c4:	2101      	movs	r1, #1
 80038c6:	4658      	mov	r0, fp
 80038c8:	f000 fbee 	bl	80040a8 <__i2b>
 80038cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80038ce:	4604      	mov	r4, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 81cf 	beq.w	8003c74 <_dtoa_r+0xb3c>
 80038d6:	461a      	mov	r2, r3
 80038d8:	4601      	mov	r1, r0
 80038da:	4658      	mov	r0, fp
 80038dc:	f000 fca4 	bl	8004228 <__pow5mult>
 80038e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	4604      	mov	r4, r0
 80038e6:	f300 8095 	bgt.w	8003a14 <_dtoa_r+0x8dc>
 80038ea:	9b02      	ldr	r3, [sp, #8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f040 8087 	bne.w	8003a00 <_dtoa_r+0x8c8>
 80038f2:	9b03      	ldr	r3, [sp, #12]
 80038f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f040 8089 	bne.w	8003a10 <_dtoa_r+0x8d8>
 80038fe:	9b03      	ldr	r3, [sp, #12]
 8003900:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003904:	0d1b      	lsrs	r3, r3, #20
 8003906:	051b      	lsls	r3, r3, #20
 8003908:	b12b      	cbz	r3, 8003916 <_dtoa_r+0x7de>
 800390a:	9b08      	ldr	r3, [sp, #32]
 800390c:	3301      	adds	r3, #1
 800390e:	9308      	str	r3, [sp, #32]
 8003910:	f108 0801 	add.w	r8, r8, #1
 8003914:	2301      	movs	r3, #1
 8003916:	930a      	str	r3, [sp, #40]	@ 0x28
 8003918:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 81b0 	beq.w	8003c80 <_dtoa_r+0xb48>
 8003920:	6923      	ldr	r3, [r4, #16]
 8003922:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003926:	6918      	ldr	r0, [r3, #16]
 8003928:	f000 fb72 	bl	8004010 <__hi0bits>
 800392c:	f1c0 0020 	rsb	r0, r0, #32
 8003930:	9b08      	ldr	r3, [sp, #32]
 8003932:	4418      	add	r0, r3
 8003934:	f010 001f 	ands.w	r0, r0, #31
 8003938:	d077      	beq.n	8003a2a <_dtoa_r+0x8f2>
 800393a:	f1c0 0320 	rsb	r3, r0, #32
 800393e:	2b04      	cmp	r3, #4
 8003940:	dd6b      	ble.n	8003a1a <_dtoa_r+0x8e2>
 8003942:	9b08      	ldr	r3, [sp, #32]
 8003944:	f1c0 001c 	rsb	r0, r0, #28
 8003948:	4403      	add	r3, r0
 800394a:	4480      	add	r8, r0
 800394c:	4406      	add	r6, r0
 800394e:	9308      	str	r3, [sp, #32]
 8003950:	f1b8 0f00 	cmp.w	r8, #0
 8003954:	dd05      	ble.n	8003962 <_dtoa_r+0x82a>
 8003956:	4649      	mov	r1, r9
 8003958:	4642      	mov	r2, r8
 800395a:	4658      	mov	r0, fp
 800395c:	f000 fcbe 	bl	80042dc <__lshift>
 8003960:	4681      	mov	r9, r0
 8003962:	9b08      	ldr	r3, [sp, #32]
 8003964:	2b00      	cmp	r3, #0
 8003966:	dd05      	ble.n	8003974 <_dtoa_r+0x83c>
 8003968:	4621      	mov	r1, r4
 800396a:	461a      	mov	r2, r3
 800396c:	4658      	mov	r0, fp
 800396e:	f000 fcb5 	bl	80042dc <__lshift>
 8003972:	4604      	mov	r4, r0
 8003974:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003976:	2b00      	cmp	r3, #0
 8003978:	d059      	beq.n	8003a2e <_dtoa_r+0x8f6>
 800397a:	4621      	mov	r1, r4
 800397c:	4648      	mov	r0, r9
 800397e:	f000 fd19 	bl	80043b4 <__mcmp>
 8003982:	2800      	cmp	r0, #0
 8003984:	da53      	bge.n	8003a2e <_dtoa_r+0x8f6>
 8003986:	1e7b      	subs	r3, r7, #1
 8003988:	9304      	str	r3, [sp, #16]
 800398a:	4649      	mov	r1, r9
 800398c:	2300      	movs	r3, #0
 800398e:	220a      	movs	r2, #10
 8003990:	4658      	mov	r0, fp
 8003992:	f000 faf7 	bl	8003f84 <__multadd>
 8003996:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003998:	4681      	mov	r9, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 8172 	beq.w	8003c84 <_dtoa_r+0xb4c>
 80039a0:	2300      	movs	r3, #0
 80039a2:	4629      	mov	r1, r5
 80039a4:	220a      	movs	r2, #10
 80039a6:	4658      	mov	r0, fp
 80039a8:	f000 faec 	bl	8003f84 <__multadd>
 80039ac:	9b00      	ldr	r3, [sp, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	4605      	mov	r5, r0
 80039b2:	dc67      	bgt.n	8003a84 <_dtoa_r+0x94c>
 80039b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	dc41      	bgt.n	8003a3e <_dtoa_r+0x906>
 80039ba:	e063      	b.n	8003a84 <_dtoa_r+0x94c>
 80039bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80039be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80039c2:	e746      	b.n	8003852 <_dtoa_r+0x71a>
 80039c4:	9b07      	ldr	r3, [sp, #28]
 80039c6:	1e5c      	subs	r4, r3, #1
 80039c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80039ca:	42a3      	cmp	r3, r4
 80039cc:	bfbf      	itttt	lt
 80039ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80039d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80039d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80039d4:	1ae3      	sublt	r3, r4, r3
 80039d6:	bfb4      	ite	lt
 80039d8:	18d2      	addlt	r2, r2, r3
 80039da:	1b1c      	subge	r4, r3, r4
 80039dc:	9b07      	ldr	r3, [sp, #28]
 80039de:	bfbc      	itt	lt
 80039e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80039e2:	2400      	movlt	r4, #0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	bfb5      	itete	lt
 80039e8:	eba8 0603 	sublt.w	r6, r8, r3
 80039ec:	9b07      	ldrge	r3, [sp, #28]
 80039ee:	2300      	movlt	r3, #0
 80039f0:	4646      	movge	r6, r8
 80039f2:	e730      	b.n	8003856 <_dtoa_r+0x71e>
 80039f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80039f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80039f8:	4646      	mov	r6, r8
 80039fa:	e735      	b.n	8003868 <_dtoa_r+0x730>
 80039fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80039fe:	e75c      	b.n	80038ba <_dtoa_r+0x782>
 8003a00:	2300      	movs	r3, #0
 8003a02:	e788      	b.n	8003916 <_dtoa_r+0x7de>
 8003a04:	3fe00000 	.word	0x3fe00000
 8003a08:	40240000 	.word	0x40240000
 8003a0c:	40140000 	.word	0x40140000
 8003a10:	9b02      	ldr	r3, [sp, #8]
 8003a12:	e780      	b.n	8003916 <_dtoa_r+0x7de>
 8003a14:	2300      	movs	r3, #0
 8003a16:	930a      	str	r3, [sp, #40]	@ 0x28
 8003a18:	e782      	b.n	8003920 <_dtoa_r+0x7e8>
 8003a1a:	d099      	beq.n	8003950 <_dtoa_r+0x818>
 8003a1c:	9a08      	ldr	r2, [sp, #32]
 8003a1e:	331c      	adds	r3, #28
 8003a20:	441a      	add	r2, r3
 8003a22:	4498      	add	r8, r3
 8003a24:	441e      	add	r6, r3
 8003a26:	9208      	str	r2, [sp, #32]
 8003a28:	e792      	b.n	8003950 <_dtoa_r+0x818>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	e7f6      	b.n	8003a1c <_dtoa_r+0x8e4>
 8003a2e:	9b07      	ldr	r3, [sp, #28]
 8003a30:	9704      	str	r7, [sp, #16]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	dc20      	bgt.n	8003a78 <_dtoa_r+0x940>
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	dd1e      	ble.n	8003a7c <_dtoa_r+0x944>
 8003a3e:	9b00      	ldr	r3, [sp, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f47f aec0 	bne.w	80037c6 <_dtoa_r+0x68e>
 8003a46:	4621      	mov	r1, r4
 8003a48:	2205      	movs	r2, #5
 8003a4a:	4658      	mov	r0, fp
 8003a4c:	f000 fa9a 	bl	8003f84 <__multadd>
 8003a50:	4601      	mov	r1, r0
 8003a52:	4604      	mov	r4, r0
 8003a54:	4648      	mov	r0, r9
 8003a56:	f000 fcad 	bl	80043b4 <__mcmp>
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	f77f aeb3 	ble.w	80037c6 <_dtoa_r+0x68e>
 8003a60:	4656      	mov	r6, sl
 8003a62:	2331      	movs	r3, #49	@ 0x31
 8003a64:	f806 3b01 	strb.w	r3, [r6], #1
 8003a68:	9b04      	ldr	r3, [sp, #16]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	9304      	str	r3, [sp, #16]
 8003a6e:	e6ae      	b.n	80037ce <_dtoa_r+0x696>
 8003a70:	9c07      	ldr	r4, [sp, #28]
 8003a72:	9704      	str	r7, [sp, #16]
 8003a74:	4625      	mov	r5, r4
 8003a76:	e7f3      	b.n	8003a60 <_dtoa_r+0x928>
 8003a78:	9b07      	ldr	r3, [sp, #28]
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 8104 	beq.w	8003c8c <_dtoa_r+0xb54>
 8003a84:	2e00      	cmp	r6, #0
 8003a86:	dd05      	ble.n	8003a94 <_dtoa_r+0x95c>
 8003a88:	4629      	mov	r1, r5
 8003a8a:	4632      	mov	r2, r6
 8003a8c:	4658      	mov	r0, fp
 8003a8e:	f000 fc25 	bl	80042dc <__lshift>
 8003a92:	4605      	mov	r5, r0
 8003a94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d05a      	beq.n	8003b50 <_dtoa_r+0xa18>
 8003a9a:	6869      	ldr	r1, [r5, #4]
 8003a9c:	4658      	mov	r0, fp
 8003a9e:	f000 fa0f 	bl	8003ec0 <_Balloc>
 8003aa2:	4606      	mov	r6, r0
 8003aa4:	b928      	cbnz	r0, 8003ab2 <_dtoa_r+0x97a>
 8003aa6:	4b84      	ldr	r3, [pc, #528]	@ (8003cb8 <_dtoa_r+0xb80>)
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8003aae:	f7ff bb5a 	b.w	8003166 <_dtoa_r+0x2e>
 8003ab2:	692a      	ldr	r2, [r5, #16]
 8003ab4:	3202      	adds	r2, #2
 8003ab6:	0092      	lsls	r2, r2, #2
 8003ab8:	f105 010c 	add.w	r1, r5, #12
 8003abc:	300c      	adds	r0, #12
 8003abe:	f000 ffaf 	bl	8004a20 <memcpy>
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	4631      	mov	r1, r6
 8003ac6:	4658      	mov	r0, fp
 8003ac8:	f000 fc08 	bl	80042dc <__lshift>
 8003acc:	f10a 0301 	add.w	r3, sl, #1
 8003ad0:	9307      	str	r3, [sp, #28]
 8003ad2:	9b00      	ldr	r3, [sp, #0]
 8003ad4:	4453      	add	r3, sl
 8003ad6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ad8:	9b02      	ldr	r3, [sp, #8]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	462f      	mov	r7, r5
 8003ae0:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ae2:	4605      	mov	r5, r0
 8003ae4:	9b07      	ldr	r3, [sp, #28]
 8003ae6:	4621      	mov	r1, r4
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	4648      	mov	r0, r9
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	f7ff fa98 	bl	8003022 <quorem>
 8003af2:	4639      	mov	r1, r7
 8003af4:	9002      	str	r0, [sp, #8]
 8003af6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8003afa:	4648      	mov	r0, r9
 8003afc:	f000 fc5a 	bl	80043b4 <__mcmp>
 8003b00:	462a      	mov	r2, r5
 8003b02:	9008      	str	r0, [sp, #32]
 8003b04:	4621      	mov	r1, r4
 8003b06:	4658      	mov	r0, fp
 8003b08:	f000 fc70 	bl	80043ec <__mdiff>
 8003b0c:	68c2      	ldr	r2, [r0, #12]
 8003b0e:	4606      	mov	r6, r0
 8003b10:	bb02      	cbnz	r2, 8003b54 <_dtoa_r+0xa1c>
 8003b12:	4601      	mov	r1, r0
 8003b14:	4648      	mov	r0, r9
 8003b16:	f000 fc4d 	bl	80043b4 <__mcmp>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	4631      	mov	r1, r6
 8003b1e:	4658      	mov	r0, fp
 8003b20:	920e      	str	r2, [sp, #56]	@ 0x38
 8003b22:	f000 fa0d 	bl	8003f40 <_Bfree>
 8003b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003b2a:	9e07      	ldr	r6, [sp, #28]
 8003b2c:	ea43 0102 	orr.w	r1, r3, r2
 8003b30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003b32:	4319      	orrs	r1, r3
 8003b34:	d110      	bne.n	8003b58 <_dtoa_r+0xa20>
 8003b36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8003b3a:	d029      	beq.n	8003b90 <_dtoa_r+0xa58>
 8003b3c:	9b08      	ldr	r3, [sp, #32]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	dd02      	ble.n	8003b48 <_dtoa_r+0xa10>
 8003b42:	9b02      	ldr	r3, [sp, #8]
 8003b44:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8003b48:	9b00      	ldr	r3, [sp, #0]
 8003b4a:	f883 8000 	strb.w	r8, [r3]
 8003b4e:	e63f      	b.n	80037d0 <_dtoa_r+0x698>
 8003b50:	4628      	mov	r0, r5
 8003b52:	e7bb      	b.n	8003acc <_dtoa_r+0x994>
 8003b54:	2201      	movs	r2, #1
 8003b56:	e7e1      	b.n	8003b1c <_dtoa_r+0x9e4>
 8003b58:	9b08      	ldr	r3, [sp, #32]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	db04      	blt.n	8003b68 <_dtoa_r+0xa30>
 8003b5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003b60:	430b      	orrs	r3, r1
 8003b62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003b64:	430b      	orrs	r3, r1
 8003b66:	d120      	bne.n	8003baa <_dtoa_r+0xa72>
 8003b68:	2a00      	cmp	r2, #0
 8003b6a:	dded      	ble.n	8003b48 <_dtoa_r+0xa10>
 8003b6c:	4649      	mov	r1, r9
 8003b6e:	2201      	movs	r2, #1
 8003b70:	4658      	mov	r0, fp
 8003b72:	f000 fbb3 	bl	80042dc <__lshift>
 8003b76:	4621      	mov	r1, r4
 8003b78:	4681      	mov	r9, r0
 8003b7a:	f000 fc1b 	bl	80043b4 <__mcmp>
 8003b7e:	2800      	cmp	r0, #0
 8003b80:	dc03      	bgt.n	8003b8a <_dtoa_r+0xa52>
 8003b82:	d1e1      	bne.n	8003b48 <_dtoa_r+0xa10>
 8003b84:	f018 0f01 	tst.w	r8, #1
 8003b88:	d0de      	beq.n	8003b48 <_dtoa_r+0xa10>
 8003b8a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8003b8e:	d1d8      	bne.n	8003b42 <_dtoa_r+0xa0a>
 8003b90:	9a00      	ldr	r2, [sp, #0]
 8003b92:	2339      	movs	r3, #57	@ 0x39
 8003b94:	7013      	strb	r3, [r2, #0]
 8003b96:	4633      	mov	r3, r6
 8003b98:	461e      	mov	r6, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003ba0:	2a39      	cmp	r2, #57	@ 0x39
 8003ba2:	d052      	beq.n	8003c4a <_dtoa_r+0xb12>
 8003ba4:	3201      	adds	r2, #1
 8003ba6:	701a      	strb	r2, [r3, #0]
 8003ba8:	e612      	b.n	80037d0 <_dtoa_r+0x698>
 8003baa:	2a00      	cmp	r2, #0
 8003bac:	dd07      	ble.n	8003bbe <_dtoa_r+0xa86>
 8003bae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8003bb2:	d0ed      	beq.n	8003b90 <_dtoa_r+0xa58>
 8003bb4:	9a00      	ldr	r2, [sp, #0]
 8003bb6:	f108 0301 	add.w	r3, r8, #1
 8003bba:	7013      	strb	r3, [r2, #0]
 8003bbc:	e608      	b.n	80037d0 <_dtoa_r+0x698>
 8003bbe:	9b07      	ldr	r3, [sp, #28]
 8003bc0:	9a07      	ldr	r2, [sp, #28]
 8003bc2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8003bc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d028      	beq.n	8003c1e <_dtoa_r+0xae6>
 8003bcc:	4649      	mov	r1, r9
 8003bce:	2300      	movs	r3, #0
 8003bd0:	220a      	movs	r2, #10
 8003bd2:	4658      	mov	r0, fp
 8003bd4:	f000 f9d6 	bl	8003f84 <__multadd>
 8003bd8:	42af      	cmp	r7, r5
 8003bda:	4681      	mov	r9, r0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	f04f 020a 	mov.w	r2, #10
 8003be4:	4639      	mov	r1, r7
 8003be6:	4658      	mov	r0, fp
 8003be8:	d107      	bne.n	8003bfa <_dtoa_r+0xac2>
 8003bea:	f000 f9cb 	bl	8003f84 <__multadd>
 8003bee:	4607      	mov	r7, r0
 8003bf0:	4605      	mov	r5, r0
 8003bf2:	9b07      	ldr	r3, [sp, #28]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	9307      	str	r3, [sp, #28]
 8003bf8:	e774      	b.n	8003ae4 <_dtoa_r+0x9ac>
 8003bfa:	f000 f9c3 	bl	8003f84 <__multadd>
 8003bfe:	4629      	mov	r1, r5
 8003c00:	4607      	mov	r7, r0
 8003c02:	2300      	movs	r3, #0
 8003c04:	220a      	movs	r2, #10
 8003c06:	4658      	mov	r0, fp
 8003c08:	f000 f9bc 	bl	8003f84 <__multadd>
 8003c0c:	4605      	mov	r5, r0
 8003c0e:	e7f0      	b.n	8003bf2 <_dtoa_r+0xaba>
 8003c10:	9b00      	ldr	r3, [sp, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	bfcc      	ite	gt
 8003c16:	461e      	movgt	r6, r3
 8003c18:	2601      	movle	r6, #1
 8003c1a:	4456      	add	r6, sl
 8003c1c:	2700      	movs	r7, #0
 8003c1e:	4649      	mov	r1, r9
 8003c20:	2201      	movs	r2, #1
 8003c22:	4658      	mov	r0, fp
 8003c24:	f000 fb5a 	bl	80042dc <__lshift>
 8003c28:	4621      	mov	r1, r4
 8003c2a:	4681      	mov	r9, r0
 8003c2c:	f000 fbc2 	bl	80043b4 <__mcmp>
 8003c30:	2800      	cmp	r0, #0
 8003c32:	dcb0      	bgt.n	8003b96 <_dtoa_r+0xa5e>
 8003c34:	d102      	bne.n	8003c3c <_dtoa_r+0xb04>
 8003c36:	f018 0f01 	tst.w	r8, #1
 8003c3a:	d1ac      	bne.n	8003b96 <_dtoa_r+0xa5e>
 8003c3c:	4633      	mov	r3, r6
 8003c3e:	461e      	mov	r6, r3
 8003c40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003c44:	2a30      	cmp	r2, #48	@ 0x30
 8003c46:	d0fa      	beq.n	8003c3e <_dtoa_r+0xb06>
 8003c48:	e5c2      	b.n	80037d0 <_dtoa_r+0x698>
 8003c4a:	459a      	cmp	sl, r3
 8003c4c:	d1a4      	bne.n	8003b98 <_dtoa_r+0xa60>
 8003c4e:	9b04      	ldr	r3, [sp, #16]
 8003c50:	3301      	adds	r3, #1
 8003c52:	9304      	str	r3, [sp, #16]
 8003c54:	2331      	movs	r3, #49	@ 0x31
 8003c56:	f88a 3000 	strb.w	r3, [sl]
 8003c5a:	e5b9      	b.n	80037d0 <_dtoa_r+0x698>
 8003c5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003c5e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8003cbc <_dtoa_r+0xb84>
 8003c62:	b11b      	cbz	r3, 8003c6c <_dtoa_r+0xb34>
 8003c64:	f10a 0308 	add.w	r3, sl, #8
 8003c68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8003c6a:	6013      	str	r3, [r2, #0]
 8003c6c:	4650      	mov	r0, sl
 8003c6e:	b019      	add	sp, #100	@ 0x64
 8003c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	f77f ae37 	ble.w	80038ea <_dtoa_r+0x7b2>
 8003c7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003c7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003c80:	2001      	movs	r0, #1
 8003c82:	e655      	b.n	8003930 <_dtoa_r+0x7f8>
 8003c84:	9b00      	ldr	r3, [sp, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f77f aed6 	ble.w	8003a38 <_dtoa_r+0x900>
 8003c8c:	4656      	mov	r6, sl
 8003c8e:	4621      	mov	r1, r4
 8003c90:	4648      	mov	r0, r9
 8003c92:	f7ff f9c6 	bl	8003022 <quorem>
 8003c96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8003c9a:	f806 8b01 	strb.w	r8, [r6], #1
 8003c9e:	9b00      	ldr	r3, [sp, #0]
 8003ca0:	eba6 020a 	sub.w	r2, r6, sl
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	ddb3      	ble.n	8003c10 <_dtoa_r+0xad8>
 8003ca8:	4649      	mov	r1, r9
 8003caa:	2300      	movs	r3, #0
 8003cac:	220a      	movs	r2, #10
 8003cae:	4658      	mov	r0, fp
 8003cb0:	f000 f968 	bl	8003f84 <__multadd>
 8003cb4:	4681      	mov	r9, r0
 8003cb6:	e7ea      	b.n	8003c8e <_dtoa_r+0xb56>
 8003cb8:	080051c8 	.word	0x080051c8
 8003cbc:	0800514c 	.word	0x0800514c

08003cc0 <_free_r>:
 8003cc0:	b538      	push	{r3, r4, r5, lr}
 8003cc2:	4605      	mov	r5, r0
 8003cc4:	2900      	cmp	r1, #0
 8003cc6:	d041      	beq.n	8003d4c <_free_r+0x8c>
 8003cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ccc:	1f0c      	subs	r4, r1, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	bfb8      	it	lt
 8003cd2:	18e4      	addlt	r4, r4, r3
 8003cd4:	f000 f8e8 	bl	8003ea8 <__malloc_lock>
 8003cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8003d50 <_free_r+0x90>)
 8003cda:	6813      	ldr	r3, [r2, #0]
 8003cdc:	b933      	cbnz	r3, 8003cec <_free_r+0x2c>
 8003cde:	6063      	str	r3, [r4, #4]
 8003ce0:	6014      	str	r4, [r2, #0]
 8003ce2:	4628      	mov	r0, r5
 8003ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ce8:	f000 b8e4 	b.w	8003eb4 <__malloc_unlock>
 8003cec:	42a3      	cmp	r3, r4
 8003cee:	d908      	bls.n	8003d02 <_free_r+0x42>
 8003cf0:	6820      	ldr	r0, [r4, #0]
 8003cf2:	1821      	adds	r1, r4, r0
 8003cf4:	428b      	cmp	r3, r1
 8003cf6:	bf01      	itttt	eq
 8003cf8:	6819      	ldreq	r1, [r3, #0]
 8003cfa:	685b      	ldreq	r3, [r3, #4]
 8003cfc:	1809      	addeq	r1, r1, r0
 8003cfe:	6021      	streq	r1, [r4, #0]
 8003d00:	e7ed      	b.n	8003cde <_free_r+0x1e>
 8003d02:	461a      	mov	r2, r3
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	b10b      	cbz	r3, 8003d0c <_free_r+0x4c>
 8003d08:	42a3      	cmp	r3, r4
 8003d0a:	d9fa      	bls.n	8003d02 <_free_r+0x42>
 8003d0c:	6811      	ldr	r1, [r2, #0]
 8003d0e:	1850      	adds	r0, r2, r1
 8003d10:	42a0      	cmp	r0, r4
 8003d12:	d10b      	bne.n	8003d2c <_free_r+0x6c>
 8003d14:	6820      	ldr	r0, [r4, #0]
 8003d16:	4401      	add	r1, r0
 8003d18:	1850      	adds	r0, r2, r1
 8003d1a:	4283      	cmp	r3, r0
 8003d1c:	6011      	str	r1, [r2, #0]
 8003d1e:	d1e0      	bne.n	8003ce2 <_free_r+0x22>
 8003d20:	6818      	ldr	r0, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	6053      	str	r3, [r2, #4]
 8003d26:	4408      	add	r0, r1
 8003d28:	6010      	str	r0, [r2, #0]
 8003d2a:	e7da      	b.n	8003ce2 <_free_r+0x22>
 8003d2c:	d902      	bls.n	8003d34 <_free_r+0x74>
 8003d2e:	230c      	movs	r3, #12
 8003d30:	602b      	str	r3, [r5, #0]
 8003d32:	e7d6      	b.n	8003ce2 <_free_r+0x22>
 8003d34:	6820      	ldr	r0, [r4, #0]
 8003d36:	1821      	adds	r1, r4, r0
 8003d38:	428b      	cmp	r3, r1
 8003d3a:	bf04      	itt	eq
 8003d3c:	6819      	ldreq	r1, [r3, #0]
 8003d3e:	685b      	ldreq	r3, [r3, #4]
 8003d40:	6063      	str	r3, [r4, #4]
 8003d42:	bf04      	itt	eq
 8003d44:	1809      	addeq	r1, r1, r0
 8003d46:	6021      	streq	r1, [r4, #0]
 8003d48:	6054      	str	r4, [r2, #4]
 8003d4a:	e7ca      	b.n	8003ce2 <_free_r+0x22>
 8003d4c:	bd38      	pop	{r3, r4, r5, pc}
 8003d4e:	bf00      	nop
 8003d50:	20000388 	.word	0x20000388

08003d54 <malloc>:
 8003d54:	4b02      	ldr	r3, [pc, #8]	@ (8003d60 <malloc+0xc>)
 8003d56:	4601      	mov	r1, r0
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	f000 b825 	b.w	8003da8 <_malloc_r>
 8003d5e:	bf00      	nop
 8003d60:	20000018 	.word	0x20000018

08003d64 <sbrk_aligned>:
 8003d64:	b570      	push	{r4, r5, r6, lr}
 8003d66:	4e0f      	ldr	r6, [pc, #60]	@ (8003da4 <sbrk_aligned+0x40>)
 8003d68:	460c      	mov	r4, r1
 8003d6a:	6831      	ldr	r1, [r6, #0]
 8003d6c:	4605      	mov	r5, r0
 8003d6e:	b911      	cbnz	r1, 8003d76 <sbrk_aligned+0x12>
 8003d70:	f000 fe46 	bl	8004a00 <_sbrk_r>
 8003d74:	6030      	str	r0, [r6, #0]
 8003d76:	4621      	mov	r1, r4
 8003d78:	4628      	mov	r0, r5
 8003d7a:	f000 fe41 	bl	8004a00 <_sbrk_r>
 8003d7e:	1c43      	adds	r3, r0, #1
 8003d80:	d103      	bne.n	8003d8a <sbrk_aligned+0x26>
 8003d82:	f04f 34ff 	mov.w	r4, #4294967295
 8003d86:	4620      	mov	r0, r4
 8003d88:	bd70      	pop	{r4, r5, r6, pc}
 8003d8a:	1cc4      	adds	r4, r0, #3
 8003d8c:	f024 0403 	bic.w	r4, r4, #3
 8003d90:	42a0      	cmp	r0, r4
 8003d92:	d0f8      	beq.n	8003d86 <sbrk_aligned+0x22>
 8003d94:	1a21      	subs	r1, r4, r0
 8003d96:	4628      	mov	r0, r5
 8003d98:	f000 fe32 	bl	8004a00 <_sbrk_r>
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	d1f2      	bne.n	8003d86 <sbrk_aligned+0x22>
 8003da0:	e7ef      	b.n	8003d82 <sbrk_aligned+0x1e>
 8003da2:	bf00      	nop
 8003da4:	20000384 	.word	0x20000384

08003da8 <_malloc_r>:
 8003da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dac:	1ccd      	adds	r5, r1, #3
 8003dae:	f025 0503 	bic.w	r5, r5, #3
 8003db2:	3508      	adds	r5, #8
 8003db4:	2d0c      	cmp	r5, #12
 8003db6:	bf38      	it	cc
 8003db8:	250c      	movcc	r5, #12
 8003dba:	2d00      	cmp	r5, #0
 8003dbc:	4606      	mov	r6, r0
 8003dbe:	db01      	blt.n	8003dc4 <_malloc_r+0x1c>
 8003dc0:	42a9      	cmp	r1, r5
 8003dc2:	d904      	bls.n	8003dce <_malloc_r+0x26>
 8003dc4:	230c      	movs	r3, #12
 8003dc6:	6033      	str	r3, [r6, #0]
 8003dc8:	2000      	movs	r0, #0
 8003dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ea4 <_malloc_r+0xfc>
 8003dd2:	f000 f869 	bl	8003ea8 <__malloc_lock>
 8003dd6:	f8d8 3000 	ldr.w	r3, [r8]
 8003dda:	461c      	mov	r4, r3
 8003ddc:	bb44      	cbnz	r4, 8003e30 <_malloc_r+0x88>
 8003dde:	4629      	mov	r1, r5
 8003de0:	4630      	mov	r0, r6
 8003de2:	f7ff ffbf 	bl	8003d64 <sbrk_aligned>
 8003de6:	1c43      	adds	r3, r0, #1
 8003de8:	4604      	mov	r4, r0
 8003dea:	d158      	bne.n	8003e9e <_malloc_r+0xf6>
 8003dec:	f8d8 4000 	ldr.w	r4, [r8]
 8003df0:	4627      	mov	r7, r4
 8003df2:	2f00      	cmp	r7, #0
 8003df4:	d143      	bne.n	8003e7e <_malloc_r+0xd6>
 8003df6:	2c00      	cmp	r4, #0
 8003df8:	d04b      	beq.n	8003e92 <_malloc_r+0xea>
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	4639      	mov	r1, r7
 8003dfe:	4630      	mov	r0, r6
 8003e00:	eb04 0903 	add.w	r9, r4, r3
 8003e04:	f000 fdfc 	bl	8004a00 <_sbrk_r>
 8003e08:	4581      	cmp	r9, r0
 8003e0a:	d142      	bne.n	8003e92 <_malloc_r+0xea>
 8003e0c:	6821      	ldr	r1, [r4, #0]
 8003e0e:	1a6d      	subs	r5, r5, r1
 8003e10:	4629      	mov	r1, r5
 8003e12:	4630      	mov	r0, r6
 8003e14:	f7ff ffa6 	bl	8003d64 <sbrk_aligned>
 8003e18:	3001      	adds	r0, #1
 8003e1a:	d03a      	beq.n	8003e92 <_malloc_r+0xea>
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	442b      	add	r3, r5
 8003e20:	6023      	str	r3, [r4, #0]
 8003e22:	f8d8 3000 	ldr.w	r3, [r8]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	bb62      	cbnz	r2, 8003e84 <_malloc_r+0xdc>
 8003e2a:	f8c8 7000 	str.w	r7, [r8]
 8003e2e:	e00f      	b.n	8003e50 <_malloc_r+0xa8>
 8003e30:	6822      	ldr	r2, [r4, #0]
 8003e32:	1b52      	subs	r2, r2, r5
 8003e34:	d420      	bmi.n	8003e78 <_malloc_r+0xd0>
 8003e36:	2a0b      	cmp	r2, #11
 8003e38:	d917      	bls.n	8003e6a <_malloc_r+0xc2>
 8003e3a:	1961      	adds	r1, r4, r5
 8003e3c:	42a3      	cmp	r3, r4
 8003e3e:	6025      	str	r5, [r4, #0]
 8003e40:	bf18      	it	ne
 8003e42:	6059      	strne	r1, [r3, #4]
 8003e44:	6863      	ldr	r3, [r4, #4]
 8003e46:	bf08      	it	eq
 8003e48:	f8c8 1000 	streq.w	r1, [r8]
 8003e4c:	5162      	str	r2, [r4, r5]
 8003e4e:	604b      	str	r3, [r1, #4]
 8003e50:	4630      	mov	r0, r6
 8003e52:	f000 f82f 	bl	8003eb4 <__malloc_unlock>
 8003e56:	f104 000b 	add.w	r0, r4, #11
 8003e5a:	1d23      	adds	r3, r4, #4
 8003e5c:	f020 0007 	bic.w	r0, r0, #7
 8003e60:	1ac2      	subs	r2, r0, r3
 8003e62:	bf1c      	itt	ne
 8003e64:	1a1b      	subne	r3, r3, r0
 8003e66:	50a3      	strne	r3, [r4, r2]
 8003e68:	e7af      	b.n	8003dca <_malloc_r+0x22>
 8003e6a:	6862      	ldr	r2, [r4, #4]
 8003e6c:	42a3      	cmp	r3, r4
 8003e6e:	bf0c      	ite	eq
 8003e70:	f8c8 2000 	streq.w	r2, [r8]
 8003e74:	605a      	strne	r2, [r3, #4]
 8003e76:	e7eb      	b.n	8003e50 <_malloc_r+0xa8>
 8003e78:	4623      	mov	r3, r4
 8003e7a:	6864      	ldr	r4, [r4, #4]
 8003e7c:	e7ae      	b.n	8003ddc <_malloc_r+0x34>
 8003e7e:	463c      	mov	r4, r7
 8003e80:	687f      	ldr	r7, [r7, #4]
 8003e82:	e7b6      	b.n	8003df2 <_malloc_r+0x4a>
 8003e84:	461a      	mov	r2, r3
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	42a3      	cmp	r3, r4
 8003e8a:	d1fb      	bne.n	8003e84 <_malloc_r+0xdc>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	6053      	str	r3, [r2, #4]
 8003e90:	e7de      	b.n	8003e50 <_malloc_r+0xa8>
 8003e92:	230c      	movs	r3, #12
 8003e94:	6033      	str	r3, [r6, #0]
 8003e96:	4630      	mov	r0, r6
 8003e98:	f000 f80c 	bl	8003eb4 <__malloc_unlock>
 8003e9c:	e794      	b.n	8003dc8 <_malloc_r+0x20>
 8003e9e:	6005      	str	r5, [r0, #0]
 8003ea0:	e7d6      	b.n	8003e50 <_malloc_r+0xa8>
 8003ea2:	bf00      	nop
 8003ea4:	20000388 	.word	0x20000388

08003ea8 <__malloc_lock>:
 8003ea8:	4801      	ldr	r0, [pc, #4]	@ (8003eb0 <__malloc_lock+0x8>)
 8003eaa:	f7ff b8b8 	b.w	800301e <__retarget_lock_acquire_recursive>
 8003eae:	bf00      	nop
 8003eb0:	20000380 	.word	0x20000380

08003eb4 <__malloc_unlock>:
 8003eb4:	4801      	ldr	r0, [pc, #4]	@ (8003ebc <__malloc_unlock+0x8>)
 8003eb6:	f7ff b8b3 	b.w	8003020 <__retarget_lock_release_recursive>
 8003eba:	bf00      	nop
 8003ebc:	20000380 	.word	0x20000380

08003ec0 <_Balloc>:
 8003ec0:	b570      	push	{r4, r5, r6, lr}
 8003ec2:	69c6      	ldr	r6, [r0, #28]
 8003ec4:	4604      	mov	r4, r0
 8003ec6:	460d      	mov	r5, r1
 8003ec8:	b976      	cbnz	r6, 8003ee8 <_Balloc+0x28>
 8003eca:	2010      	movs	r0, #16
 8003ecc:	f7ff ff42 	bl	8003d54 <malloc>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	61e0      	str	r0, [r4, #28]
 8003ed4:	b920      	cbnz	r0, 8003ee0 <_Balloc+0x20>
 8003ed6:	4b18      	ldr	r3, [pc, #96]	@ (8003f38 <_Balloc+0x78>)
 8003ed8:	4818      	ldr	r0, [pc, #96]	@ (8003f3c <_Balloc+0x7c>)
 8003eda:	216b      	movs	r1, #107	@ 0x6b
 8003edc:	f000 fdae 	bl	8004a3c <__assert_func>
 8003ee0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003ee4:	6006      	str	r6, [r0, #0]
 8003ee6:	60c6      	str	r6, [r0, #12]
 8003ee8:	69e6      	ldr	r6, [r4, #28]
 8003eea:	68f3      	ldr	r3, [r6, #12]
 8003eec:	b183      	cbz	r3, 8003f10 <_Balloc+0x50>
 8003eee:	69e3      	ldr	r3, [r4, #28]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003ef6:	b9b8      	cbnz	r0, 8003f28 <_Balloc+0x68>
 8003ef8:	2101      	movs	r1, #1
 8003efa:	fa01 f605 	lsl.w	r6, r1, r5
 8003efe:	1d72      	adds	r2, r6, #5
 8003f00:	0092      	lsls	r2, r2, #2
 8003f02:	4620      	mov	r0, r4
 8003f04:	f000 fdb8 	bl	8004a78 <_calloc_r>
 8003f08:	b160      	cbz	r0, 8003f24 <_Balloc+0x64>
 8003f0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003f0e:	e00e      	b.n	8003f2e <_Balloc+0x6e>
 8003f10:	2221      	movs	r2, #33	@ 0x21
 8003f12:	2104      	movs	r1, #4
 8003f14:	4620      	mov	r0, r4
 8003f16:	f000 fdaf 	bl	8004a78 <_calloc_r>
 8003f1a:	69e3      	ldr	r3, [r4, #28]
 8003f1c:	60f0      	str	r0, [r6, #12]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e4      	bne.n	8003eee <_Balloc+0x2e>
 8003f24:	2000      	movs	r0, #0
 8003f26:	bd70      	pop	{r4, r5, r6, pc}
 8003f28:	6802      	ldr	r2, [r0, #0]
 8003f2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003f2e:	2300      	movs	r3, #0
 8003f30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003f34:	e7f7      	b.n	8003f26 <_Balloc+0x66>
 8003f36:	bf00      	nop
 8003f38:	08005159 	.word	0x08005159
 8003f3c:	080051d9 	.word	0x080051d9

08003f40 <_Bfree>:
 8003f40:	b570      	push	{r4, r5, r6, lr}
 8003f42:	69c6      	ldr	r6, [r0, #28]
 8003f44:	4605      	mov	r5, r0
 8003f46:	460c      	mov	r4, r1
 8003f48:	b976      	cbnz	r6, 8003f68 <_Bfree+0x28>
 8003f4a:	2010      	movs	r0, #16
 8003f4c:	f7ff ff02 	bl	8003d54 <malloc>
 8003f50:	4602      	mov	r2, r0
 8003f52:	61e8      	str	r0, [r5, #28]
 8003f54:	b920      	cbnz	r0, 8003f60 <_Bfree+0x20>
 8003f56:	4b09      	ldr	r3, [pc, #36]	@ (8003f7c <_Bfree+0x3c>)
 8003f58:	4809      	ldr	r0, [pc, #36]	@ (8003f80 <_Bfree+0x40>)
 8003f5a:	218f      	movs	r1, #143	@ 0x8f
 8003f5c:	f000 fd6e 	bl	8004a3c <__assert_func>
 8003f60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003f64:	6006      	str	r6, [r0, #0]
 8003f66:	60c6      	str	r6, [r0, #12]
 8003f68:	b13c      	cbz	r4, 8003f7a <_Bfree+0x3a>
 8003f6a:	69eb      	ldr	r3, [r5, #28]
 8003f6c:	6862      	ldr	r2, [r4, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f74:	6021      	str	r1, [r4, #0]
 8003f76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003f7a:	bd70      	pop	{r4, r5, r6, pc}
 8003f7c:	08005159 	.word	0x08005159
 8003f80:	080051d9 	.word	0x080051d9

08003f84 <__multadd>:
 8003f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f88:	690d      	ldr	r5, [r1, #16]
 8003f8a:	4607      	mov	r7, r0
 8003f8c:	460c      	mov	r4, r1
 8003f8e:	461e      	mov	r6, r3
 8003f90:	f101 0c14 	add.w	ip, r1, #20
 8003f94:	2000      	movs	r0, #0
 8003f96:	f8dc 3000 	ldr.w	r3, [ip]
 8003f9a:	b299      	uxth	r1, r3
 8003f9c:	fb02 6101 	mla	r1, r2, r1, r6
 8003fa0:	0c1e      	lsrs	r6, r3, #16
 8003fa2:	0c0b      	lsrs	r3, r1, #16
 8003fa4:	fb02 3306 	mla	r3, r2, r6, r3
 8003fa8:	b289      	uxth	r1, r1
 8003faa:	3001      	adds	r0, #1
 8003fac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003fb0:	4285      	cmp	r5, r0
 8003fb2:	f84c 1b04 	str.w	r1, [ip], #4
 8003fb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003fba:	dcec      	bgt.n	8003f96 <__multadd+0x12>
 8003fbc:	b30e      	cbz	r6, 8004002 <__multadd+0x7e>
 8003fbe:	68a3      	ldr	r3, [r4, #8]
 8003fc0:	42ab      	cmp	r3, r5
 8003fc2:	dc19      	bgt.n	8003ff8 <__multadd+0x74>
 8003fc4:	6861      	ldr	r1, [r4, #4]
 8003fc6:	4638      	mov	r0, r7
 8003fc8:	3101      	adds	r1, #1
 8003fca:	f7ff ff79 	bl	8003ec0 <_Balloc>
 8003fce:	4680      	mov	r8, r0
 8003fd0:	b928      	cbnz	r0, 8003fde <__multadd+0x5a>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004008 <__multadd+0x84>)
 8003fd6:	480d      	ldr	r0, [pc, #52]	@ (800400c <__multadd+0x88>)
 8003fd8:	21ba      	movs	r1, #186	@ 0xba
 8003fda:	f000 fd2f 	bl	8004a3c <__assert_func>
 8003fde:	6922      	ldr	r2, [r4, #16]
 8003fe0:	3202      	adds	r2, #2
 8003fe2:	f104 010c 	add.w	r1, r4, #12
 8003fe6:	0092      	lsls	r2, r2, #2
 8003fe8:	300c      	adds	r0, #12
 8003fea:	f000 fd19 	bl	8004a20 <memcpy>
 8003fee:	4621      	mov	r1, r4
 8003ff0:	4638      	mov	r0, r7
 8003ff2:	f7ff ffa5 	bl	8003f40 <_Bfree>
 8003ff6:	4644      	mov	r4, r8
 8003ff8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003ffc:	3501      	adds	r5, #1
 8003ffe:	615e      	str	r6, [r3, #20]
 8004000:	6125      	str	r5, [r4, #16]
 8004002:	4620      	mov	r0, r4
 8004004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004008:	080051c8 	.word	0x080051c8
 800400c:	080051d9 	.word	0x080051d9

08004010 <__hi0bits>:
 8004010:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004014:	4603      	mov	r3, r0
 8004016:	bf36      	itet	cc
 8004018:	0403      	lslcc	r3, r0, #16
 800401a:	2000      	movcs	r0, #0
 800401c:	2010      	movcc	r0, #16
 800401e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004022:	bf3c      	itt	cc
 8004024:	021b      	lslcc	r3, r3, #8
 8004026:	3008      	addcc	r0, #8
 8004028:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800402c:	bf3c      	itt	cc
 800402e:	011b      	lslcc	r3, r3, #4
 8004030:	3004      	addcc	r0, #4
 8004032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004036:	bf3c      	itt	cc
 8004038:	009b      	lslcc	r3, r3, #2
 800403a:	3002      	addcc	r0, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	db05      	blt.n	800404c <__hi0bits+0x3c>
 8004040:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004044:	f100 0001 	add.w	r0, r0, #1
 8004048:	bf08      	it	eq
 800404a:	2020      	moveq	r0, #32
 800404c:	4770      	bx	lr

0800404e <__lo0bits>:
 800404e:	6803      	ldr	r3, [r0, #0]
 8004050:	4602      	mov	r2, r0
 8004052:	f013 0007 	ands.w	r0, r3, #7
 8004056:	d00b      	beq.n	8004070 <__lo0bits+0x22>
 8004058:	07d9      	lsls	r1, r3, #31
 800405a:	d421      	bmi.n	80040a0 <__lo0bits+0x52>
 800405c:	0798      	lsls	r0, r3, #30
 800405e:	bf49      	itett	mi
 8004060:	085b      	lsrmi	r3, r3, #1
 8004062:	089b      	lsrpl	r3, r3, #2
 8004064:	2001      	movmi	r0, #1
 8004066:	6013      	strmi	r3, [r2, #0]
 8004068:	bf5c      	itt	pl
 800406a:	6013      	strpl	r3, [r2, #0]
 800406c:	2002      	movpl	r0, #2
 800406e:	4770      	bx	lr
 8004070:	b299      	uxth	r1, r3
 8004072:	b909      	cbnz	r1, 8004078 <__lo0bits+0x2a>
 8004074:	0c1b      	lsrs	r3, r3, #16
 8004076:	2010      	movs	r0, #16
 8004078:	b2d9      	uxtb	r1, r3
 800407a:	b909      	cbnz	r1, 8004080 <__lo0bits+0x32>
 800407c:	3008      	adds	r0, #8
 800407e:	0a1b      	lsrs	r3, r3, #8
 8004080:	0719      	lsls	r1, r3, #28
 8004082:	bf04      	itt	eq
 8004084:	091b      	lsreq	r3, r3, #4
 8004086:	3004      	addeq	r0, #4
 8004088:	0799      	lsls	r1, r3, #30
 800408a:	bf04      	itt	eq
 800408c:	089b      	lsreq	r3, r3, #2
 800408e:	3002      	addeq	r0, #2
 8004090:	07d9      	lsls	r1, r3, #31
 8004092:	d403      	bmi.n	800409c <__lo0bits+0x4e>
 8004094:	085b      	lsrs	r3, r3, #1
 8004096:	f100 0001 	add.w	r0, r0, #1
 800409a:	d003      	beq.n	80040a4 <__lo0bits+0x56>
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	4770      	bx	lr
 80040a0:	2000      	movs	r0, #0
 80040a2:	4770      	bx	lr
 80040a4:	2020      	movs	r0, #32
 80040a6:	4770      	bx	lr

080040a8 <__i2b>:
 80040a8:	b510      	push	{r4, lr}
 80040aa:	460c      	mov	r4, r1
 80040ac:	2101      	movs	r1, #1
 80040ae:	f7ff ff07 	bl	8003ec0 <_Balloc>
 80040b2:	4602      	mov	r2, r0
 80040b4:	b928      	cbnz	r0, 80040c2 <__i2b+0x1a>
 80040b6:	4b05      	ldr	r3, [pc, #20]	@ (80040cc <__i2b+0x24>)
 80040b8:	4805      	ldr	r0, [pc, #20]	@ (80040d0 <__i2b+0x28>)
 80040ba:	f240 1145 	movw	r1, #325	@ 0x145
 80040be:	f000 fcbd 	bl	8004a3c <__assert_func>
 80040c2:	2301      	movs	r3, #1
 80040c4:	6144      	str	r4, [r0, #20]
 80040c6:	6103      	str	r3, [r0, #16]
 80040c8:	bd10      	pop	{r4, pc}
 80040ca:	bf00      	nop
 80040cc:	080051c8 	.word	0x080051c8
 80040d0:	080051d9 	.word	0x080051d9

080040d4 <__multiply>:
 80040d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d8:	4614      	mov	r4, r2
 80040da:	690a      	ldr	r2, [r1, #16]
 80040dc:	6923      	ldr	r3, [r4, #16]
 80040de:	429a      	cmp	r2, r3
 80040e0:	bfa8      	it	ge
 80040e2:	4623      	movge	r3, r4
 80040e4:	460f      	mov	r7, r1
 80040e6:	bfa4      	itt	ge
 80040e8:	460c      	movge	r4, r1
 80040ea:	461f      	movge	r7, r3
 80040ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80040f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80040f4:	68a3      	ldr	r3, [r4, #8]
 80040f6:	6861      	ldr	r1, [r4, #4]
 80040f8:	eb0a 0609 	add.w	r6, sl, r9
 80040fc:	42b3      	cmp	r3, r6
 80040fe:	b085      	sub	sp, #20
 8004100:	bfb8      	it	lt
 8004102:	3101      	addlt	r1, #1
 8004104:	f7ff fedc 	bl	8003ec0 <_Balloc>
 8004108:	b930      	cbnz	r0, 8004118 <__multiply+0x44>
 800410a:	4602      	mov	r2, r0
 800410c:	4b44      	ldr	r3, [pc, #272]	@ (8004220 <__multiply+0x14c>)
 800410e:	4845      	ldr	r0, [pc, #276]	@ (8004224 <__multiply+0x150>)
 8004110:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004114:	f000 fc92 	bl	8004a3c <__assert_func>
 8004118:	f100 0514 	add.w	r5, r0, #20
 800411c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004120:	462b      	mov	r3, r5
 8004122:	2200      	movs	r2, #0
 8004124:	4543      	cmp	r3, r8
 8004126:	d321      	bcc.n	800416c <__multiply+0x98>
 8004128:	f107 0114 	add.w	r1, r7, #20
 800412c:	f104 0214 	add.w	r2, r4, #20
 8004130:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004134:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004138:	9302      	str	r3, [sp, #8]
 800413a:	1b13      	subs	r3, r2, r4
 800413c:	3b15      	subs	r3, #21
 800413e:	f023 0303 	bic.w	r3, r3, #3
 8004142:	3304      	adds	r3, #4
 8004144:	f104 0715 	add.w	r7, r4, #21
 8004148:	42ba      	cmp	r2, r7
 800414a:	bf38      	it	cc
 800414c:	2304      	movcc	r3, #4
 800414e:	9301      	str	r3, [sp, #4]
 8004150:	9b02      	ldr	r3, [sp, #8]
 8004152:	9103      	str	r1, [sp, #12]
 8004154:	428b      	cmp	r3, r1
 8004156:	d80c      	bhi.n	8004172 <__multiply+0x9e>
 8004158:	2e00      	cmp	r6, #0
 800415a:	dd03      	ble.n	8004164 <__multiply+0x90>
 800415c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004160:	2b00      	cmp	r3, #0
 8004162:	d05b      	beq.n	800421c <__multiply+0x148>
 8004164:	6106      	str	r6, [r0, #16]
 8004166:	b005      	add	sp, #20
 8004168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800416c:	f843 2b04 	str.w	r2, [r3], #4
 8004170:	e7d8      	b.n	8004124 <__multiply+0x50>
 8004172:	f8b1 a000 	ldrh.w	sl, [r1]
 8004176:	f1ba 0f00 	cmp.w	sl, #0
 800417a:	d024      	beq.n	80041c6 <__multiply+0xf2>
 800417c:	f104 0e14 	add.w	lr, r4, #20
 8004180:	46a9      	mov	r9, r5
 8004182:	f04f 0c00 	mov.w	ip, #0
 8004186:	f85e 7b04 	ldr.w	r7, [lr], #4
 800418a:	f8d9 3000 	ldr.w	r3, [r9]
 800418e:	fa1f fb87 	uxth.w	fp, r7
 8004192:	b29b      	uxth	r3, r3
 8004194:	fb0a 330b 	mla	r3, sl, fp, r3
 8004198:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800419c:	f8d9 7000 	ldr.w	r7, [r9]
 80041a0:	4463      	add	r3, ip
 80041a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80041a6:	fb0a c70b 	mla	r7, sl, fp, ip
 80041aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80041b4:	4572      	cmp	r2, lr
 80041b6:	f849 3b04 	str.w	r3, [r9], #4
 80041ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80041be:	d8e2      	bhi.n	8004186 <__multiply+0xb2>
 80041c0:	9b01      	ldr	r3, [sp, #4]
 80041c2:	f845 c003 	str.w	ip, [r5, r3]
 80041c6:	9b03      	ldr	r3, [sp, #12]
 80041c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80041cc:	3104      	adds	r1, #4
 80041ce:	f1b9 0f00 	cmp.w	r9, #0
 80041d2:	d021      	beq.n	8004218 <__multiply+0x144>
 80041d4:	682b      	ldr	r3, [r5, #0]
 80041d6:	f104 0c14 	add.w	ip, r4, #20
 80041da:	46ae      	mov	lr, r5
 80041dc:	f04f 0a00 	mov.w	sl, #0
 80041e0:	f8bc b000 	ldrh.w	fp, [ip]
 80041e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80041e8:	fb09 770b 	mla	r7, r9, fp, r7
 80041ec:	4457      	add	r7, sl
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80041f4:	f84e 3b04 	str.w	r3, [lr], #4
 80041f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80041fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004200:	f8be 3000 	ldrh.w	r3, [lr]
 8004204:	fb09 330a 	mla	r3, r9, sl, r3
 8004208:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800420c:	4562      	cmp	r2, ip
 800420e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004212:	d8e5      	bhi.n	80041e0 <__multiply+0x10c>
 8004214:	9f01      	ldr	r7, [sp, #4]
 8004216:	51eb      	str	r3, [r5, r7]
 8004218:	3504      	adds	r5, #4
 800421a:	e799      	b.n	8004150 <__multiply+0x7c>
 800421c:	3e01      	subs	r6, #1
 800421e:	e79b      	b.n	8004158 <__multiply+0x84>
 8004220:	080051c8 	.word	0x080051c8
 8004224:	080051d9 	.word	0x080051d9

08004228 <__pow5mult>:
 8004228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800422c:	4615      	mov	r5, r2
 800422e:	f012 0203 	ands.w	r2, r2, #3
 8004232:	4607      	mov	r7, r0
 8004234:	460e      	mov	r6, r1
 8004236:	d007      	beq.n	8004248 <__pow5mult+0x20>
 8004238:	4c25      	ldr	r4, [pc, #148]	@ (80042d0 <__pow5mult+0xa8>)
 800423a:	3a01      	subs	r2, #1
 800423c:	2300      	movs	r3, #0
 800423e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004242:	f7ff fe9f 	bl	8003f84 <__multadd>
 8004246:	4606      	mov	r6, r0
 8004248:	10ad      	asrs	r5, r5, #2
 800424a:	d03d      	beq.n	80042c8 <__pow5mult+0xa0>
 800424c:	69fc      	ldr	r4, [r7, #28]
 800424e:	b97c      	cbnz	r4, 8004270 <__pow5mult+0x48>
 8004250:	2010      	movs	r0, #16
 8004252:	f7ff fd7f 	bl	8003d54 <malloc>
 8004256:	4602      	mov	r2, r0
 8004258:	61f8      	str	r0, [r7, #28]
 800425a:	b928      	cbnz	r0, 8004268 <__pow5mult+0x40>
 800425c:	4b1d      	ldr	r3, [pc, #116]	@ (80042d4 <__pow5mult+0xac>)
 800425e:	481e      	ldr	r0, [pc, #120]	@ (80042d8 <__pow5mult+0xb0>)
 8004260:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004264:	f000 fbea 	bl	8004a3c <__assert_func>
 8004268:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800426c:	6004      	str	r4, [r0, #0]
 800426e:	60c4      	str	r4, [r0, #12]
 8004270:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004274:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004278:	b94c      	cbnz	r4, 800428e <__pow5mult+0x66>
 800427a:	f240 2171 	movw	r1, #625	@ 0x271
 800427e:	4638      	mov	r0, r7
 8004280:	f7ff ff12 	bl	80040a8 <__i2b>
 8004284:	2300      	movs	r3, #0
 8004286:	f8c8 0008 	str.w	r0, [r8, #8]
 800428a:	4604      	mov	r4, r0
 800428c:	6003      	str	r3, [r0, #0]
 800428e:	f04f 0900 	mov.w	r9, #0
 8004292:	07eb      	lsls	r3, r5, #31
 8004294:	d50a      	bpl.n	80042ac <__pow5mult+0x84>
 8004296:	4631      	mov	r1, r6
 8004298:	4622      	mov	r2, r4
 800429a:	4638      	mov	r0, r7
 800429c:	f7ff ff1a 	bl	80040d4 <__multiply>
 80042a0:	4631      	mov	r1, r6
 80042a2:	4680      	mov	r8, r0
 80042a4:	4638      	mov	r0, r7
 80042a6:	f7ff fe4b 	bl	8003f40 <_Bfree>
 80042aa:	4646      	mov	r6, r8
 80042ac:	106d      	asrs	r5, r5, #1
 80042ae:	d00b      	beq.n	80042c8 <__pow5mult+0xa0>
 80042b0:	6820      	ldr	r0, [r4, #0]
 80042b2:	b938      	cbnz	r0, 80042c4 <__pow5mult+0x9c>
 80042b4:	4622      	mov	r2, r4
 80042b6:	4621      	mov	r1, r4
 80042b8:	4638      	mov	r0, r7
 80042ba:	f7ff ff0b 	bl	80040d4 <__multiply>
 80042be:	6020      	str	r0, [r4, #0]
 80042c0:	f8c0 9000 	str.w	r9, [r0]
 80042c4:	4604      	mov	r4, r0
 80042c6:	e7e4      	b.n	8004292 <__pow5mult+0x6a>
 80042c8:	4630      	mov	r0, r6
 80042ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042ce:	bf00      	nop
 80042d0:	08005234 	.word	0x08005234
 80042d4:	08005159 	.word	0x08005159
 80042d8:	080051d9 	.word	0x080051d9

080042dc <__lshift>:
 80042dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042e0:	460c      	mov	r4, r1
 80042e2:	6849      	ldr	r1, [r1, #4]
 80042e4:	6923      	ldr	r3, [r4, #16]
 80042e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80042ea:	68a3      	ldr	r3, [r4, #8]
 80042ec:	4607      	mov	r7, r0
 80042ee:	4691      	mov	r9, r2
 80042f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80042f4:	f108 0601 	add.w	r6, r8, #1
 80042f8:	42b3      	cmp	r3, r6
 80042fa:	db0b      	blt.n	8004314 <__lshift+0x38>
 80042fc:	4638      	mov	r0, r7
 80042fe:	f7ff fddf 	bl	8003ec0 <_Balloc>
 8004302:	4605      	mov	r5, r0
 8004304:	b948      	cbnz	r0, 800431a <__lshift+0x3e>
 8004306:	4602      	mov	r2, r0
 8004308:	4b28      	ldr	r3, [pc, #160]	@ (80043ac <__lshift+0xd0>)
 800430a:	4829      	ldr	r0, [pc, #164]	@ (80043b0 <__lshift+0xd4>)
 800430c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004310:	f000 fb94 	bl	8004a3c <__assert_func>
 8004314:	3101      	adds	r1, #1
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	e7ee      	b.n	80042f8 <__lshift+0x1c>
 800431a:	2300      	movs	r3, #0
 800431c:	f100 0114 	add.w	r1, r0, #20
 8004320:	f100 0210 	add.w	r2, r0, #16
 8004324:	4618      	mov	r0, r3
 8004326:	4553      	cmp	r3, sl
 8004328:	db33      	blt.n	8004392 <__lshift+0xb6>
 800432a:	6920      	ldr	r0, [r4, #16]
 800432c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004330:	f104 0314 	add.w	r3, r4, #20
 8004334:	f019 091f 	ands.w	r9, r9, #31
 8004338:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800433c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004340:	d02b      	beq.n	800439a <__lshift+0xbe>
 8004342:	f1c9 0e20 	rsb	lr, r9, #32
 8004346:	468a      	mov	sl, r1
 8004348:	2200      	movs	r2, #0
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	fa00 f009 	lsl.w	r0, r0, r9
 8004350:	4310      	orrs	r0, r2
 8004352:	f84a 0b04 	str.w	r0, [sl], #4
 8004356:	f853 2b04 	ldr.w	r2, [r3], #4
 800435a:	459c      	cmp	ip, r3
 800435c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004360:	d8f3      	bhi.n	800434a <__lshift+0x6e>
 8004362:	ebac 0304 	sub.w	r3, ip, r4
 8004366:	3b15      	subs	r3, #21
 8004368:	f023 0303 	bic.w	r3, r3, #3
 800436c:	3304      	adds	r3, #4
 800436e:	f104 0015 	add.w	r0, r4, #21
 8004372:	4584      	cmp	ip, r0
 8004374:	bf38      	it	cc
 8004376:	2304      	movcc	r3, #4
 8004378:	50ca      	str	r2, [r1, r3]
 800437a:	b10a      	cbz	r2, 8004380 <__lshift+0xa4>
 800437c:	f108 0602 	add.w	r6, r8, #2
 8004380:	3e01      	subs	r6, #1
 8004382:	4638      	mov	r0, r7
 8004384:	612e      	str	r6, [r5, #16]
 8004386:	4621      	mov	r1, r4
 8004388:	f7ff fdda 	bl	8003f40 <_Bfree>
 800438c:	4628      	mov	r0, r5
 800438e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004392:	f842 0f04 	str.w	r0, [r2, #4]!
 8004396:	3301      	adds	r3, #1
 8004398:	e7c5      	b.n	8004326 <__lshift+0x4a>
 800439a:	3904      	subs	r1, #4
 800439c:	f853 2b04 	ldr.w	r2, [r3], #4
 80043a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80043a4:	459c      	cmp	ip, r3
 80043a6:	d8f9      	bhi.n	800439c <__lshift+0xc0>
 80043a8:	e7ea      	b.n	8004380 <__lshift+0xa4>
 80043aa:	bf00      	nop
 80043ac:	080051c8 	.word	0x080051c8
 80043b0:	080051d9 	.word	0x080051d9

080043b4 <__mcmp>:
 80043b4:	690a      	ldr	r2, [r1, #16]
 80043b6:	4603      	mov	r3, r0
 80043b8:	6900      	ldr	r0, [r0, #16]
 80043ba:	1a80      	subs	r0, r0, r2
 80043bc:	b530      	push	{r4, r5, lr}
 80043be:	d10e      	bne.n	80043de <__mcmp+0x2a>
 80043c0:	3314      	adds	r3, #20
 80043c2:	3114      	adds	r1, #20
 80043c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80043c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80043cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80043d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80043d4:	4295      	cmp	r5, r2
 80043d6:	d003      	beq.n	80043e0 <__mcmp+0x2c>
 80043d8:	d205      	bcs.n	80043e6 <__mcmp+0x32>
 80043da:	f04f 30ff 	mov.w	r0, #4294967295
 80043de:	bd30      	pop	{r4, r5, pc}
 80043e0:	42a3      	cmp	r3, r4
 80043e2:	d3f3      	bcc.n	80043cc <__mcmp+0x18>
 80043e4:	e7fb      	b.n	80043de <__mcmp+0x2a>
 80043e6:	2001      	movs	r0, #1
 80043e8:	e7f9      	b.n	80043de <__mcmp+0x2a>
	...

080043ec <__mdiff>:
 80043ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043f0:	4689      	mov	r9, r1
 80043f2:	4606      	mov	r6, r0
 80043f4:	4611      	mov	r1, r2
 80043f6:	4648      	mov	r0, r9
 80043f8:	4614      	mov	r4, r2
 80043fa:	f7ff ffdb 	bl	80043b4 <__mcmp>
 80043fe:	1e05      	subs	r5, r0, #0
 8004400:	d112      	bne.n	8004428 <__mdiff+0x3c>
 8004402:	4629      	mov	r1, r5
 8004404:	4630      	mov	r0, r6
 8004406:	f7ff fd5b 	bl	8003ec0 <_Balloc>
 800440a:	4602      	mov	r2, r0
 800440c:	b928      	cbnz	r0, 800441a <__mdiff+0x2e>
 800440e:	4b3f      	ldr	r3, [pc, #252]	@ (800450c <__mdiff+0x120>)
 8004410:	f240 2137 	movw	r1, #567	@ 0x237
 8004414:	483e      	ldr	r0, [pc, #248]	@ (8004510 <__mdiff+0x124>)
 8004416:	f000 fb11 	bl	8004a3c <__assert_func>
 800441a:	2301      	movs	r3, #1
 800441c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004420:	4610      	mov	r0, r2
 8004422:	b003      	add	sp, #12
 8004424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004428:	bfbc      	itt	lt
 800442a:	464b      	movlt	r3, r9
 800442c:	46a1      	movlt	r9, r4
 800442e:	4630      	mov	r0, r6
 8004430:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004434:	bfba      	itte	lt
 8004436:	461c      	movlt	r4, r3
 8004438:	2501      	movlt	r5, #1
 800443a:	2500      	movge	r5, #0
 800443c:	f7ff fd40 	bl	8003ec0 <_Balloc>
 8004440:	4602      	mov	r2, r0
 8004442:	b918      	cbnz	r0, 800444c <__mdiff+0x60>
 8004444:	4b31      	ldr	r3, [pc, #196]	@ (800450c <__mdiff+0x120>)
 8004446:	f240 2145 	movw	r1, #581	@ 0x245
 800444a:	e7e3      	b.n	8004414 <__mdiff+0x28>
 800444c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004450:	6926      	ldr	r6, [r4, #16]
 8004452:	60c5      	str	r5, [r0, #12]
 8004454:	f109 0310 	add.w	r3, r9, #16
 8004458:	f109 0514 	add.w	r5, r9, #20
 800445c:	f104 0e14 	add.w	lr, r4, #20
 8004460:	f100 0b14 	add.w	fp, r0, #20
 8004464:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004468:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800446c:	9301      	str	r3, [sp, #4]
 800446e:	46d9      	mov	r9, fp
 8004470:	f04f 0c00 	mov.w	ip, #0
 8004474:	9b01      	ldr	r3, [sp, #4]
 8004476:	f85e 0b04 	ldr.w	r0, [lr], #4
 800447a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800447e:	9301      	str	r3, [sp, #4]
 8004480:	fa1f f38a 	uxth.w	r3, sl
 8004484:	4619      	mov	r1, r3
 8004486:	b283      	uxth	r3, r0
 8004488:	1acb      	subs	r3, r1, r3
 800448a:	0c00      	lsrs	r0, r0, #16
 800448c:	4463      	add	r3, ip
 800448e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004492:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004496:	b29b      	uxth	r3, r3
 8004498:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800449c:	4576      	cmp	r6, lr
 800449e:	f849 3b04 	str.w	r3, [r9], #4
 80044a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80044a6:	d8e5      	bhi.n	8004474 <__mdiff+0x88>
 80044a8:	1b33      	subs	r3, r6, r4
 80044aa:	3b15      	subs	r3, #21
 80044ac:	f023 0303 	bic.w	r3, r3, #3
 80044b0:	3415      	adds	r4, #21
 80044b2:	3304      	adds	r3, #4
 80044b4:	42a6      	cmp	r6, r4
 80044b6:	bf38      	it	cc
 80044b8:	2304      	movcc	r3, #4
 80044ba:	441d      	add	r5, r3
 80044bc:	445b      	add	r3, fp
 80044be:	461e      	mov	r6, r3
 80044c0:	462c      	mov	r4, r5
 80044c2:	4544      	cmp	r4, r8
 80044c4:	d30e      	bcc.n	80044e4 <__mdiff+0xf8>
 80044c6:	f108 0103 	add.w	r1, r8, #3
 80044ca:	1b49      	subs	r1, r1, r5
 80044cc:	f021 0103 	bic.w	r1, r1, #3
 80044d0:	3d03      	subs	r5, #3
 80044d2:	45a8      	cmp	r8, r5
 80044d4:	bf38      	it	cc
 80044d6:	2100      	movcc	r1, #0
 80044d8:	440b      	add	r3, r1
 80044da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80044de:	b191      	cbz	r1, 8004506 <__mdiff+0x11a>
 80044e0:	6117      	str	r7, [r2, #16]
 80044e2:	e79d      	b.n	8004420 <__mdiff+0x34>
 80044e4:	f854 1b04 	ldr.w	r1, [r4], #4
 80044e8:	46e6      	mov	lr, ip
 80044ea:	0c08      	lsrs	r0, r1, #16
 80044ec:	fa1c fc81 	uxtah	ip, ip, r1
 80044f0:	4471      	add	r1, lr
 80044f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80044f6:	b289      	uxth	r1, r1
 80044f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80044fc:	f846 1b04 	str.w	r1, [r6], #4
 8004500:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004504:	e7dd      	b.n	80044c2 <__mdiff+0xd6>
 8004506:	3f01      	subs	r7, #1
 8004508:	e7e7      	b.n	80044da <__mdiff+0xee>
 800450a:	bf00      	nop
 800450c:	080051c8 	.word	0x080051c8
 8004510:	080051d9 	.word	0x080051d9

08004514 <__d2b>:
 8004514:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004518:	460f      	mov	r7, r1
 800451a:	2101      	movs	r1, #1
 800451c:	ec59 8b10 	vmov	r8, r9, d0
 8004520:	4616      	mov	r6, r2
 8004522:	f7ff fccd 	bl	8003ec0 <_Balloc>
 8004526:	4604      	mov	r4, r0
 8004528:	b930      	cbnz	r0, 8004538 <__d2b+0x24>
 800452a:	4602      	mov	r2, r0
 800452c:	4b23      	ldr	r3, [pc, #140]	@ (80045bc <__d2b+0xa8>)
 800452e:	4824      	ldr	r0, [pc, #144]	@ (80045c0 <__d2b+0xac>)
 8004530:	f240 310f 	movw	r1, #783	@ 0x30f
 8004534:	f000 fa82 	bl	8004a3c <__assert_func>
 8004538:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800453c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004540:	b10d      	cbz	r5, 8004546 <__d2b+0x32>
 8004542:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004546:	9301      	str	r3, [sp, #4]
 8004548:	f1b8 0300 	subs.w	r3, r8, #0
 800454c:	d023      	beq.n	8004596 <__d2b+0x82>
 800454e:	4668      	mov	r0, sp
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	f7ff fd7c 	bl	800404e <__lo0bits>
 8004556:	e9dd 1200 	ldrd	r1, r2, [sp]
 800455a:	b1d0      	cbz	r0, 8004592 <__d2b+0x7e>
 800455c:	f1c0 0320 	rsb	r3, r0, #32
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	430b      	orrs	r3, r1
 8004566:	40c2      	lsrs	r2, r0
 8004568:	6163      	str	r3, [r4, #20]
 800456a:	9201      	str	r2, [sp, #4]
 800456c:	9b01      	ldr	r3, [sp, #4]
 800456e:	61a3      	str	r3, [r4, #24]
 8004570:	2b00      	cmp	r3, #0
 8004572:	bf0c      	ite	eq
 8004574:	2201      	moveq	r2, #1
 8004576:	2202      	movne	r2, #2
 8004578:	6122      	str	r2, [r4, #16]
 800457a:	b1a5      	cbz	r5, 80045a6 <__d2b+0x92>
 800457c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004580:	4405      	add	r5, r0
 8004582:	603d      	str	r5, [r7, #0]
 8004584:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004588:	6030      	str	r0, [r6, #0]
 800458a:	4620      	mov	r0, r4
 800458c:	b003      	add	sp, #12
 800458e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004592:	6161      	str	r1, [r4, #20]
 8004594:	e7ea      	b.n	800456c <__d2b+0x58>
 8004596:	a801      	add	r0, sp, #4
 8004598:	f7ff fd59 	bl	800404e <__lo0bits>
 800459c:	9b01      	ldr	r3, [sp, #4]
 800459e:	6163      	str	r3, [r4, #20]
 80045a0:	3020      	adds	r0, #32
 80045a2:	2201      	movs	r2, #1
 80045a4:	e7e8      	b.n	8004578 <__d2b+0x64>
 80045a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80045aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80045ae:	6038      	str	r0, [r7, #0]
 80045b0:	6918      	ldr	r0, [r3, #16]
 80045b2:	f7ff fd2d 	bl	8004010 <__hi0bits>
 80045b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80045ba:	e7e5      	b.n	8004588 <__d2b+0x74>
 80045bc:	080051c8 	.word	0x080051c8
 80045c0:	080051d9 	.word	0x080051d9

080045c4 <__ssputs_r>:
 80045c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045c8:	688e      	ldr	r6, [r1, #8]
 80045ca:	461f      	mov	r7, r3
 80045cc:	42be      	cmp	r6, r7
 80045ce:	680b      	ldr	r3, [r1, #0]
 80045d0:	4682      	mov	sl, r0
 80045d2:	460c      	mov	r4, r1
 80045d4:	4690      	mov	r8, r2
 80045d6:	d82d      	bhi.n	8004634 <__ssputs_r+0x70>
 80045d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80045dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80045e0:	d026      	beq.n	8004630 <__ssputs_r+0x6c>
 80045e2:	6965      	ldr	r5, [r4, #20]
 80045e4:	6909      	ldr	r1, [r1, #16]
 80045e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045ea:	eba3 0901 	sub.w	r9, r3, r1
 80045ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045f2:	1c7b      	adds	r3, r7, #1
 80045f4:	444b      	add	r3, r9
 80045f6:	106d      	asrs	r5, r5, #1
 80045f8:	429d      	cmp	r5, r3
 80045fa:	bf38      	it	cc
 80045fc:	461d      	movcc	r5, r3
 80045fe:	0553      	lsls	r3, r2, #21
 8004600:	d527      	bpl.n	8004652 <__ssputs_r+0x8e>
 8004602:	4629      	mov	r1, r5
 8004604:	f7ff fbd0 	bl	8003da8 <_malloc_r>
 8004608:	4606      	mov	r6, r0
 800460a:	b360      	cbz	r0, 8004666 <__ssputs_r+0xa2>
 800460c:	6921      	ldr	r1, [r4, #16]
 800460e:	464a      	mov	r2, r9
 8004610:	f000 fa06 	bl	8004a20 <memcpy>
 8004614:	89a3      	ldrh	r3, [r4, #12]
 8004616:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800461a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800461e:	81a3      	strh	r3, [r4, #12]
 8004620:	6126      	str	r6, [r4, #16]
 8004622:	6165      	str	r5, [r4, #20]
 8004624:	444e      	add	r6, r9
 8004626:	eba5 0509 	sub.w	r5, r5, r9
 800462a:	6026      	str	r6, [r4, #0]
 800462c:	60a5      	str	r5, [r4, #8]
 800462e:	463e      	mov	r6, r7
 8004630:	42be      	cmp	r6, r7
 8004632:	d900      	bls.n	8004636 <__ssputs_r+0x72>
 8004634:	463e      	mov	r6, r7
 8004636:	6820      	ldr	r0, [r4, #0]
 8004638:	4632      	mov	r2, r6
 800463a:	4641      	mov	r1, r8
 800463c:	f000 f9c6 	bl	80049cc <memmove>
 8004640:	68a3      	ldr	r3, [r4, #8]
 8004642:	1b9b      	subs	r3, r3, r6
 8004644:	60a3      	str	r3, [r4, #8]
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	4433      	add	r3, r6
 800464a:	6023      	str	r3, [r4, #0]
 800464c:	2000      	movs	r0, #0
 800464e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004652:	462a      	mov	r2, r5
 8004654:	f000 fa36 	bl	8004ac4 <_realloc_r>
 8004658:	4606      	mov	r6, r0
 800465a:	2800      	cmp	r0, #0
 800465c:	d1e0      	bne.n	8004620 <__ssputs_r+0x5c>
 800465e:	6921      	ldr	r1, [r4, #16]
 8004660:	4650      	mov	r0, sl
 8004662:	f7ff fb2d 	bl	8003cc0 <_free_r>
 8004666:	230c      	movs	r3, #12
 8004668:	f8ca 3000 	str.w	r3, [sl]
 800466c:	89a3      	ldrh	r3, [r4, #12]
 800466e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004672:	81a3      	strh	r3, [r4, #12]
 8004674:	f04f 30ff 	mov.w	r0, #4294967295
 8004678:	e7e9      	b.n	800464e <__ssputs_r+0x8a>
	...

0800467c <_svfiprintf_r>:
 800467c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004680:	4698      	mov	r8, r3
 8004682:	898b      	ldrh	r3, [r1, #12]
 8004684:	061b      	lsls	r3, r3, #24
 8004686:	b09d      	sub	sp, #116	@ 0x74
 8004688:	4607      	mov	r7, r0
 800468a:	460d      	mov	r5, r1
 800468c:	4614      	mov	r4, r2
 800468e:	d510      	bpl.n	80046b2 <_svfiprintf_r+0x36>
 8004690:	690b      	ldr	r3, [r1, #16]
 8004692:	b973      	cbnz	r3, 80046b2 <_svfiprintf_r+0x36>
 8004694:	2140      	movs	r1, #64	@ 0x40
 8004696:	f7ff fb87 	bl	8003da8 <_malloc_r>
 800469a:	6028      	str	r0, [r5, #0]
 800469c:	6128      	str	r0, [r5, #16]
 800469e:	b930      	cbnz	r0, 80046ae <_svfiprintf_r+0x32>
 80046a0:	230c      	movs	r3, #12
 80046a2:	603b      	str	r3, [r7, #0]
 80046a4:	f04f 30ff 	mov.w	r0, #4294967295
 80046a8:	b01d      	add	sp, #116	@ 0x74
 80046aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ae:	2340      	movs	r3, #64	@ 0x40
 80046b0:	616b      	str	r3, [r5, #20]
 80046b2:	2300      	movs	r3, #0
 80046b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80046b6:	2320      	movs	r3, #32
 80046b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80046bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80046c0:	2330      	movs	r3, #48	@ 0x30
 80046c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004860 <_svfiprintf_r+0x1e4>
 80046c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80046ca:	f04f 0901 	mov.w	r9, #1
 80046ce:	4623      	mov	r3, r4
 80046d0:	469a      	mov	sl, r3
 80046d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046d6:	b10a      	cbz	r2, 80046dc <_svfiprintf_r+0x60>
 80046d8:	2a25      	cmp	r2, #37	@ 0x25
 80046da:	d1f9      	bne.n	80046d0 <_svfiprintf_r+0x54>
 80046dc:	ebba 0b04 	subs.w	fp, sl, r4
 80046e0:	d00b      	beq.n	80046fa <_svfiprintf_r+0x7e>
 80046e2:	465b      	mov	r3, fp
 80046e4:	4622      	mov	r2, r4
 80046e6:	4629      	mov	r1, r5
 80046e8:	4638      	mov	r0, r7
 80046ea:	f7ff ff6b 	bl	80045c4 <__ssputs_r>
 80046ee:	3001      	adds	r0, #1
 80046f0:	f000 80a7 	beq.w	8004842 <_svfiprintf_r+0x1c6>
 80046f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80046f6:	445a      	add	r2, fp
 80046f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80046fa:	f89a 3000 	ldrb.w	r3, [sl]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 809f 	beq.w	8004842 <_svfiprintf_r+0x1c6>
 8004704:	2300      	movs	r3, #0
 8004706:	f04f 32ff 	mov.w	r2, #4294967295
 800470a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800470e:	f10a 0a01 	add.w	sl, sl, #1
 8004712:	9304      	str	r3, [sp, #16]
 8004714:	9307      	str	r3, [sp, #28]
 8004716:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800471a:	931a      	str	r3, [sp, #104]	@ 0x68
 800471c:	4654      	mov	r4, sl
 800471e:	2205      	movs	r2, #5
 8004720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004724:	484e      	ldr	r0, [pc, #312]	@ (8004860 <_svfiprintf_r+0x1e4>)
 8004726:	f7fb fd5b 	bl	80001e0 <memchr>
 800472a:	9a04      	ldr	r2, [sp, #16]
 800472c:	b9d8      	cbnz	r0, 8004766 <_svfiprintf_r+0xea>
 800472e:	06d0      	lsls	r0, r2, #27
 8004730:	bf44      	itt	mi
 8004732:	2320      	movmi	r3, #32
 8004734:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004738:	0711      	lsls	r1, r2, #28
 800473a:	bf44      	itt	mi
 800473c:	232b      	movmi	r3, #43	@ 0x2b
 800473e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004742:	f89a 3000 	ldrb.w	r3, [sl]
 8004746:	2b2a      	cmp	r3, #42	@ 0x2a
 8004748:	d015      	beq.n	8004776 <_svfiprintf_r+0xfa>
 800474a:	9a07      	ldr	r2, [sp, #28]
 800474c:	4654      	mov	r4, sl
 800474e:	2000      	movs	r0, #0
 8004750:	f04f 0c0a 	mov.w	ip, #10
 8004754:	4621      	mov	r1, r4
 8004756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800475a:	3b30      	subs	r3, #48	@ 0x30
 800475c:	2b09      	cmp	r3, #9
 800475e:	d94b      	bls.n	80047f8 <_svfiprintf_r+0x17c>
 8004760:	b1b0      	cbz	r0, 8004790 <_svfiprintf_r+0x114>
 8004762:	9207      	str	r2, [sp, #28]
 8004764:	e014      	b.n	8004790 <_svfiprintf_r+0x114>
 8004766:	eba0 0308 	sub.w	r3, r0, r8
 800476a:	fa09 f303 	lsl.w	r3, r9, r3
 800476e:	4313      	orrs	r3, r2
 8004770:	9304      	str	r3, [sp, #16]
 8004772:	46a2      	mov	sl, r4
 8004774:	e7d2      	b.n	800471c <_svfiprintf_r+0xa0>
 8004776:	9b03      	ldr	r3, [sp, #12]
 8004778:	1d19      	adds	r1, r3, #4
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	9103      	str	r1, [sp, #12]
 800477e:	2b00      	cmp	r3, #0
 8004780:	bfbb      	ittet	lt
 8004782:	425b      	neglt	r3, r3
 8004784:	f042 0202 	orrlt.w	r2, r2, #2
 8004788:	9307      	strge	r3, [sp, #28]
 800478a:	9307      	strlt	r3, [sp, #28]
 800478c:	bfb8      	it	lt
 800478e:	9204      	strlt	r2, [sp, #16]
 8004790:	7823      	ldrb	r3, [r4, #0]
 8004792:	2b2e      	cmp	r3, #46	@ 0x2e
 8004794:	d10a      	bne.n	80047ac <_svfiprintf_r+0x130>
 8004796:	7863      	ldrb	r3, [r4, #1]
 8004798:	2b2a      	cmp	r3, #42	@ 0x2a
 800479a:	d132      	bne.n	8004802 <_svfiprintf_r+0x186>
 800479c:	9b03      	ldr	r3, [sp, #12]
 800479e:	1d1a      	adds	r2, r3, #4
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	9203      	str	r2, [sp, #12]
 80047a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047a8:	3402      	adds	r4, #2
 80047aa:	9305      	str	r3, [sp, #20]
 80047ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004870 <_svfiprintf_r+0x1f4>
 80047b0:	7821      	ldrb	r1, [r4, #0]
 80047b2:	2203      	movs	r2, #3
 80047b4:	4650      	mov	r0, sl
 80047b6:	f7fb fd13 	bl	80001e0 <memchr>
 80047ba:	b138      	cbz	r0, 80047cc <_svfiprintf_r+0x150>
 80047bc:	9b04      	ldr	r3, [sp, #16]
 80047be:	eba0 000a 	sub.w	r0, r0, sl
 80047c2:	2240      	movs	r2, #64	@ 0x40
 80047c4:	4082      	lsls	r2, r0
 80047c6:	4313      	orrs	r3, r2
 80047c8:	3401      	adds	r4, #1
 80047ca:	9304      	str	r3, [sp, #16]
 80047cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047d0:	4824      	ldr	r0, [pc, #144]	@ (8004864 <_svfiprintf_r+0x1e8>)
 80047d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80047d6:	2206      	movs	r2, #6
 80047d8:	f7fb fd02 	bl	80001e0 <memchr>
 80047dc:	2800      	cmp	r0, #0
 80047de:	d036      	beq.n	800484e <_svfiprintf_r+0x1d2>
 80047e0:	4b21      	ldr	r3, [pc, #132]	@ (8004868 <_svfiprintf_r+0x1ec>)
 80047e2:	bb1b      	cbnz	r3, 800482c <_svfiprintf_r+0x1b0>
 80047e4:	9b03      	ldr	r3, [sp, #12]
 80047e6:	3307      	adds	r3, #7
 80047e8:	f023 0307 	bic.w	r3, r3, #7
 80047ec:	3308      	adds	r3, #8
 80047ee:	9303      	str	r3, [sp, #12]
 80047f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047f2:	4433      	add	r3, r6
 80047f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80047f6:	e76a      	b.n	80046ce <_svfiprintf_r+0x52>
 80047f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80047fc:	460c      	mov	r4, r1
 80047fe:	2001      	movs	r0, #1
 8004800:	e7a8      	b.n	8004754 <_svfiprintf_r+0xd8>
 8004802:	2300      	movs	r3, #0
 8004804:	3401      	adds	r4, #1
 8004806:	9305      	str	r3, [sp, #20]
 8004808:	4619      	mov	r1, r3
 800480a:	f04f 0c0a 	mov.w	ip, #10
 800480e:	4620      	mov	r0, r4
 8004810:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004814:	3a30      	subs	r2, #48	@ 0x30
 8004816:	2a09      	cmp	r2, #9
 8004818:	d903      	bls.n	8004822 <_svfiprintf_r+0x1a6>
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0c6      	beq.n	80047ac <_svfiprintf_r+0x130>
 800481e:	9105      	str	r1, [sp, #20]
 8004820:	e7c4      	b.n	80047ac <_svfiprintf_r+0x130>
 8004822:	fb0c 2101 	mla	r1, ip, r1, r2
 8004826:	4604      	mov	r4, r0
 8004828:	2301      	movs	r3, #1
 800482a:	e7f0      	b.n	800480e <_svfiprintf_r+0x192>
 800482c:	ab03      	add	r3, sp, #12
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	462a      	mov	r2, r5
 8004832:	4b0e      	ldr	r3, [pc, #56]	@ (800486c <_svfiprintf_r+0x1f0>)
 8004834:	a904      	add	r1, sp, #16
 8004836:	4638      	mov	r0, r7
 8004838:	f7fd fe96 	bl	8002568 <_printf_float>
 800483c:	1c42      	adds	r2, r0, #1
 800483e:	4606      	mov	r6, r0
 8004840:	d1d6      	bne.n	80047f0 <_svfiprintf_r+0x174>
 8004842:	89ab      	ldrh	r3, [r5, #12]
 8004844:	065b      	lsls	r3, r3, #25
 8004846:	f53f af2d 	bmi.w	80046a4 <_svfiprintf_r+0x28>
 800484a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800484c:	e72c      	b.n	80046a8 <_svfiprintf_r+0x2c>
 800484e:	ab03      	add	r3, sp, #12
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	462a      	mov	r2, r5
 8004854:	4b05      	ldr	r3, [pc, #20]	@ (800486c <_svfiprintf_r+0x1f0>)
 8004856:	a904      	add	r1, sp, #16
 8004858:	4638      	mov	r0, r7
 800485a:	f7fe f91d 	bl	8002a98 <_printf_i>
 800485e:	e7ed      	b.n	800483c <_svfiprintf_r+0x1c0>
 8004860:	08005330 	.word	0x08005330
 8004864:	0800533a 	.word	0x0800533a
 8004868:	08002569 	.word	0x08002569
 800486c:	080045c5 	.word	0x080045c5
 8004870:	08005336 	.word	0x08005336

08004874 <__sflush_r>:
 8004874:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800487c:	0716      	lsls	r6, r2, #28
 800487e:	4605      	mov	r5, r0
 8004880:	460c      	mov	r4, r1
 8004882:	d454      	bmi.n	800492e <__sflush_r+0xba>
 8004884:	684b      	ldr	r3, [r1, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	dc02      	bgt.n	8004890 <__sflush_r+0x1c>
 800488a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800488c:	2b00      	cmp	r3, #0
 800488e:	dd48      	ble.n	8004922 <__sflush_r+0xae>
 8004890:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004892:	2e00      	cmp	r6, #0
 8004894:	d045      	beq.n	8004922 <__sflush_r+0xae>
 8004896:	2300      	movs	r3, #0
 8004898:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800489c:	682f      	ldr	r7, [r5, #0]
 800489e:	6a21      	ldr	r1, [r4, #32]
 80048a0:	602b      	str	r3, [r5, #0]
 80048a2:	d030      	beq.n	8004906 <__sflush_r+0x92>
 80048a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80048a6:	89a3      	ldrh	r3, [r4, #12]
 80048a8:	0759      	lsls	r1, r3, #29
 80048aa:	d505      	bpl.n	80048b8 <__sflush_r+0x44>
 80048ac:	6863      	ldr	r3, [r4, #4]
 80048ae:	1ad2      	subs	r2, r2, r3
 80048b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80048b2:	b10b      	cbz	r3, 80048b8 <__sflush_r+0x44>
 80048b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80048b6:	1ad2      	subs	r2, r2, r3
 80048b8:	2300      	movs	r3, #0
 80048ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80048bc:	6a21      	ldr	r1, [r4, #32]
 80048be:	4628      	mov	r0, r5
 80048c0:	47b0      	blx	r6
 80048c2:	1c43      	adds	r3, r0, #1
 80048c4:	89a3      	ldrh	r3, [r4, #12]
 80048c6:	d106      	bne.n	80048d6 <__sflush_r+0x62>
 80048c8:	6829      	ldr	r1, [r5, #0]
 80048ca:	291d      	cmp	r1, #29
 80048cc:	d82b      	bhi.n	8004926 <__sflush_r+0xb2>
 80048ce:	4a2a      	ldr	r2, [pc, #168]	@ (8004978 <__sflush_r+0x104>)
 80048d0:	410a      	asrs	r2, r1
 80048d2:	07d6      	lsls	r6, r2, #31
 80048d4:	d427      	bmi.n	8004926 <__sflush_r+0xb2>
 80048d6:	2200      	movs	r2, #0
 80048d8:	6062      	str	r2, [r4, #4]
 80048da:	04d9      	lsls	r1, r3, #19
 80048dc:	6922      	ldr	r2, [r4, #16]
 80048de:	6022      	str	r2, [r4, #0]
 80048e0:	d504      	bpl.n	80048ec <__sflush_r+0x78>
 80048e2:	1c42      	adds	r2, r0, #1
 80048e4:	d101      	bne.n	80048ea <__sflush_r+0x76>
 80048e6:	682b      	ldr	r3, [r5, #0]
 80048e8:	b903      	cbnz	r3, 80048ec <__sflush_r+0x78>
 80048ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80048ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80048ee:	602f      	str	r7, [r5, #0]
 80048f0:	b1b9      	cbz	r1, 8004922 <__sflush_r+0xae>
 80048f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80048f6:	4299      	cmp	r1, r3
 80048f8:	d002      	beq.n	8004900 <__sflush_r+0x8c>
 80048fa:	4628      	mov	r0, r5
 80048fc:	f7ff f9e0 	bl	8003cc0 <_free_r>
 8004900:	2300      	movs	r3, #0
 8004902:	6363      	str	r3, [r4, #52]	@ 0x34
 8004904:	e00d      	b.n	8004922 <__sflush_r+0xae>
 8004906:	2301      	movs	r3, #1
 8004908:	4628      	mov	r0, r5
 800490a:	47b0      	blx	r6
 800490c:	4602      	mov	r2, r0
 800490e:	1c50      	adds	r0, r2, #1
 8004910:	d1c9      	bne.n	80048a6 <__sflush_r+0x32>
 8004912:	682b      	ldr	r3, [r5, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0c6      	beq.n	80048a6 <__sflush_r+0x32>
 8004918:	2b1d      	cmp	r3, #29
 800491a:	d001      	beq.n	8004920 <__sflush_r+0xac>
 800491c:	2b16      	cmp	r3, #22
 800491e:	d11e      	bne.n	800495e <__sflush_r+0xea>
 8004920:	602f      	str	r7, [r5, #0]
 8004922:	2000      	movs	r0, #0
 8004924:	e022      	b.n	800496c <__sflush_r+0xf8>
 8004926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800492a:	b21b      	sxth	r3, r3
 800492c:	e01b      	b.n	8004966 <__sflush_r+0xf2>
 800492e:	690f      	ldr	r7, [r1, #16]
 8004930:	2f00      	cmp	r7, #0
 8004932:	d0f6      	beq.n	8004922 <__sflush_r+0xae>
 8004934:	0793      	lsls	r3, r2, #30
 8004936:	680e      	ldr	r6, [r1, #0]
 8004938:	bf08      	it	eq
 800493a:	694b      	ldreq	r3, [r1, #20]
 800493c:	600f      	str	r7, [r1, #0]
 800493e:	bf18      	it	ne
 8004940:	2300      	movne	r3, #0
 8004942:	eba6 0807 	sub.w	r8, r6, r7
 8004946:	608b      	str	r3, [r1, #8]
 8004948:	f1b8 0f00 	cmp.w	r8, #0
 800494c:	dde9      	ble.n	8004922 <__sflush_r+0xae>
 800494e:	6a21      	ldr	r1, [r4, #32]
 8004950:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004952:	4643      	mov	r3, r8
 8004954:	463a      	mov	r2, r7
 8004956:	4628      	mov	r0, r5
 8004958:	47b0      	blx	r6
 800495a:	2800      	cmp	r0, #0
 800495c:	dc08      	bgt.n	8004970 <__sflush_r+0xfc>
 800495e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004966:	81a3      	strh	r3, [r4, #12]
 8004968:	f04f 30ff 	mov.w	r0, #4294967295
 800496c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004970:	4407      	add	r7, r0
 8004972:	eba8 0800 	sub.w	r8, r8, r0
 8004976:	e7e7      	b.n	8004948 <__sflush_r+0xd4>
 8004978:	dfbffffe 	.word	0xdfbffffe

0800497c <_fflush_r>:
 800497c:	b538      	push	{r3, r4, r5, lr}
 800497e:	690b      	ldr	r3, [r1, #16]
 8004980:	4605      	mov	r5, r0
 8004982:	460c      	mov	r4, r1
 8004984:	b913      	cbnz	r3, 800498c <_fflush_r+0x10>
 8004986:	2500      	movs	r5, #0
 8004988:	4628      	mov	r0, r5
 800498a:	bd38      	pop	{r3, r4, r5, pc}
 800498c:	b118      	cbz	r0, 8004996 <_fflush_r+0x1a>
 800498e:	6a03      	ldr	r3, [r0, #32]
 8004990:	b90b      	cbnz	r3, 8004996 <_fflush_r+0x1a>
 8004992:	f7fe fa2d 	bl	8002df0 <__sinit>
 8004996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f3      	beq.n	8004986 <_fflush_r+0xa>
 800499e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80049a0:	07d0      	lsls	r0, r2, #31
 80049a2:	d404      	bmi.n	80049ae <_fflush_r+0x32>
 80049a4:	0599      	lsls	r1, r3, #22
 80049a6:	d402      	bmi.n	80049ae <_fflush_r+0x32>
 80049a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049aa:	f7fe fb38 	bl	800301e <__retarget_lock_acquire_recursive>
 80049ae:	4628      	mov	r0, r5
 80049b0:	4621      	mov	r1, r4
 80049b2:	f7ff ff5f 	bl	8004874 <__sflush_r>
 80049b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049b8:	07da      	lsls	r2, r3, #31
 80049ba:	4605      	mov	r5, r0
 80049bc:	d4e4      	bmi.n	8004988 <_fflush_r+0xc>
 80049be:	89a3      	ldrh	r3, [r4, #12]
 80049c0:	059b      	lsls	r3, r3, #22
 80049c2:	d4e1      	bmi.n	8004988 <_fflush_r+0xc>
 80049c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049c6:	f7fe fb2b 	bl	8003020 <__retarget_lock_release_recursive>
 80049ca:	e7dd      	b.n	8004988 <_fflush_r+0xc>

080049cc <memmove>:
 80049cc:	4288      	cmp	r0, r1
 80049ce:	b510      	push	{r4, lr}
 80049d0:	eb01 0402 	add.w	r4, r1, r2
 80049d4:	d902      	bls.n	80049dc <memmove+0x10>
 80049d6:	4284      	cmp	r4, r0
 80049d8:	4623      	mov	r3, r4
 80049da:	d807      	bhi.n	80049ec <memmove+0x20>
 80049dc:	1e43      	subs	r3, r0, #1
 80049de:	42a1      	cmp	r1, r4
 80049e0:	d008      	beq.n	80049f4 <memmove+0x28>
 80049e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049ea:	e7f8      	b.n	80049de <memmove+0x12>
 80049ec:	4402      	add	r2, r0
 80049ee:	4601      	mov	r1, r0
 80049f0:	428a      	cmp	r2, r1
 80049f2:	d100      	bne.n	80049f6 <memmove+0x2a>
 80049f4:	bd10      	pop	{r4, pc}
 80049f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049fe:	e7f7      	b.n	80049f0 <memmove+0x24>

08004a00 <_sbrk_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	4d06      	ldr	r5, [pc, #24]	@ (8004a1c <_sbrk_r+0x1c>)
 8004a04:	2300      	movs	r3, #0
 8004a06:	4604      	mov	r4, r0
 8004a08:	4608      	mov	r0, r1
 8004a0a:	602b      	str	r3, [r5, #0]
 8004a0c:	f7fc fd28 	bl	8001460 <_sbrk>
 8004a10:	1c43      	adds	r3, r0, #1
 8004a12:	d102      	bne.n	8004a1a <_sbrk_r+0x1a>
 8004a14:	682b      	ldr	r3, [r5, #0]
 8004a16:	b103      	cbz	r3, 8004a1a <_sbrk_r+0x1a>
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	bd38      	pop	{r3, r4, r5, pc}
 8004a1c:	2000037c 	.word	0x2000037c

08004a20 <memcpy>:
 8004a20:	440a      	add	r2, r1
 8004a22:	4291      	cmp	r1, r2
 8004a24:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a28:	d100      	bne.n	8004a2c <memcpy+0xc>
 8004a2a:	4770      	bx	lr
 8004a2c:	b510      	push	{r4, lr}
 8004a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a36:	4291      	cmp	r1, r2
 8004a38:	d1f9      	bne.n	8004a2e <memcpy+0xe>
 8004a3a:	bd10      	pop	{r4, pc}

08004a3c <__assert_func>:
 8004a3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004a3e:	4614      	mov	r4, r2
 8004a40:	461a      	mov	r2, r3
 8004a42:	4b09      	ldr	r3, [pc, #36]	@ (8004a68 <__assert_func+0x2c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4605      	mov	r5, r0
 8004a48:	68d8      	ldr	r0, [r3, #12]
 8004a4a:	b954      	cbnz	r4, 8004a62 <__assert_func+0x26>
 8004a4c:	4b07      	ldr	r3, [pc, #28]	@ (8004a6c <__assert_func+0x30>)
 8004a4e:	461c      	mov	r4, r3
 8004a50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004a54:	9100      	str	r1, [sp, #0]
 8004a56:	462b      	mov	r3, r5
 8004a58:	4905      	ldr	r1, [pc, #20]	@ (8004a70 <__assert_func+0x34>)
 8004a5a:	f000 f86f 	bl	8004b3c <fiprintf>
 8004a5e:	f000 f87f 	bl	8004b60 <abort>
 8004a62:	4b04      	ldr	r3, [pc, #16]	@ (8004a74 <__assert_func+0x38>)
 8004a64:	e7f4      	b.n	8004a50 <__assert_func+0x14>
 8004a66:	bf00      	nop
 8004a68:	20000018 	.word	0x20000018
 8004a6c:	08005386 	.word	0x08005386
 8004a70:	08005358 	.word	0x08005358
 8004a74:	0800534b 	.word	0x0800534b

08004a78 <_calloc_r>:
 8004a78:	b570      	push	{r4, r5, r6, lr}
 8004a7a:	fba1 5402 	umull	r5, r4, r1, r2
 8004a7e:	b93c      	cbnz	r4, 8004a90 <_calloc_r+0x18>
 8004a80:	4629      	mov	r1, r5
 8004a82:	f7ff f991 	bl	8003da8 <_malloc_r>
 8004a86:	4606      	mov	r6, r0
 8004a88:	b928      	cbnz	r0, 8004a96 <_calloc_r+0x1e>
 8004a8a:	2600      	movs	r6, #0
 8004a8c:	4630      	mov	r0, r6
 8004a8e:	bd70      	pop	{r4, r5, r6, pc}
 8004a90:	220c      	movs	r2, #12
 8004a92:	6002      	str	r2, [r0, #0]
 8004a94:	e7f9      	b.n	8004a8a <_calloc_r+0x12>
 8004a96:	462a      	mov	r2, r5
 8004a98:	4621      	mov	r1, r4
 8004a9a:	f7fe fa42 	bl	8002f22 <memset>
 8004a9e:	e7f5      	b.n	8004a8c <_calloc_r+0x14>

08004aa0 <__ascii_mbtowc>:
 8004aa0:	b082      	sub	sp, #8
 8004aa2:	b901      	cbnz	r1, 8004aa6 <__ascii_mbtowc+0x6>
 8004aa4:	a901      	add	r1, sp, #4
 8004aa6:	b142      	cbz	r2, 8004aba <__ascii_mbtowc+0x1a>
 8004aa8:	b14b      	cbz	r3, 8004abe <__ascii_mbtowc+0x1e>
 8004aaa:	7813      	ldrb	r3, [r2, #0]
 8004aac:	600b      	str	r3, [r1, #0]
 8004aae:	7812      	ldrb	r2, [r2, #0]
 8004ab0:	1e10      	subs	r0, r2, #0
 8004ab2:	bf18      	it	ne
 8004ab4:	2001      	movne	r0, #1
 8004ab6:	b002      	add	sp, #8
 8004ab8:	4770      	bx	lr
 8004aba:	4610      	mov	r0, r2
 8004abc:	e7fb      	b.n	8004ab6 <__ascii_mbtowc+0x16>
 8004abe:	f06f 0001 	mvn.w	r0, #1
 8004ac2:	e7f8      	b.n	8004ab6 <__ascii_mbtowc+0x16>

08004ac4 <_realloc_r>:
 8004ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ac8:	4680      	mov	r8, r0
 8004aca:	4615      	mov	r5, r2
 8004acc:	460c      	mov	r4, r1
 8004ace:	b921      	cbnz	r1, 8004ada <_realloc_r+0x16>
 8004ad0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	f7ff b967 	b.w	8003da8 <_malloc_r>
 8004ada:	b92a      	cbnz	r2, 8004ae8 <_realloc_r+0x24>
 8004adc:	f7ff f8f0 	bl	8003cc0 <_free_r>
 8004ae0:	2400      	movs	r4, #0
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ae8:	f000 f841 	bl	8004b6e <_malloc_usable_size_r>
 8004aec:	4285      	cmp	r5, r0
 8004aee:	4606      	mov	r6, r0
 8004af0:	d802      	bhi.n	8004af8 <_realloc_r+0x34>
 8004af2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004af6:	d8f4      	bhi.n	8004ae2 <_realloc_r+0x1e>
 8004af8:	4629      	mov	r1, r5
 8004afa:	4640      	mov	r0, r8
 8004afc:	f7ff f954 	bl	8003da8 <_malloc_r>
 8004b00:	4607      	mov	r7, r0
 8004b02:	2800      	cmp	r0, #0
 8004b04:	d0ec      	beq.n	8004ae0 <_realloc_r+0x1c>
 8004b06:	42b5      	cmp	r5, r6
 8004b08:	462a      	mov	r2, r5
 8004b0a:	4621      	mov	r1, r4
 8004b0c:	bf28      	it	cs
 8004b0e:	4632      	movcs	r2, r6
 8004b10:	f7ff ff86 	bl	8004a20 <memcpy>
 8004b14:	4621      	mov	r1, r4
 8004b16:	4640      	mov	r0, r8
 8004b18:	f7ff f8d2 	bl	8003cc0 <_free_r>
 8004b1c:	463c      	mov	r4, r7
 8004b1e:	e7e0      	b.n	8004ae2 <_realloc_r+0x1e>

08004b20 <__ascii_wctomb>:
 8004b20:	4603      	mov	r3, r0
 8004b22:	4608      	mov	r0, r1
 8004b24:	b141      	cbz	r1, 8004b38 <__ascii_wctomb+0x18>
 8004b26:	2aff      	cmp	r2, #255	@ 0xff
 8004b28:	d904      	bls.n	8004b34 <__ascii_wctomb+0x14>
 8004b2a:	228a      	movs	r2, #138	@ 0x8a
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b32:	4770      	bx	lr
 8004b34:	700a      	strb	r2, [r1, #0]
 8004b36:	2001      	movs	r0, #1
 8004b38:	4770      	bx	lr
	...

08004b3c <fiprintf>:
 8004b3c:	b40e      	push	{r1, r2, r3}
 8004b3e:	b503      	push	{r0, r1, lr}
 8004b40:	4601      	mov	r1, r0
 8004b42:	ab03      	add	r3, sp, #12
 8004b44:	4805      	ldr	r0, [pc, #20]	@ (8004b5c <fiprintf+0x20>)
 8004b46:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b4a:	6800      	ldr	r0, [r0, #0]
 8004b4c:	9301      	str	r3, [sp, #4]
 8004b4e:	f000 f83f 	bl	8004bd0 <_vfiprintf_r>
 8004b52:	b002      	add	sp, #8
 8004b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b58:	b003      	add	sp, #12
 8004b5a:	4770      	bx	lr
 8004b5c:	20000018 	.word	0x20000018

08004b60 <abort>:
 8004b60:	b508      	push	{r3, lr}
 8004b62:	2006      	movs	r0, #6
 8004b64:	f000 fa08 	bl	8004f78 <raise>
 8004b68:	2001      	movs	r0, #1
 8004b6a:	f7fc fc00 	bl	800136e <_exit>

08004b6e <_malloc_usable_size_r>:
 8004b6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b72:	1f18      	subs	r0, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bfbc      	itt	lt
 8004b78:	580b      	ldrlt	r3, [r1, r0]
 8004b7a:	18c0      	addlt	r0, r0, r3
 8004b7c:	4770      	bx	lr

08004b7e <__sfputc_r>:
 8004b7e:	6893      	ldr	r3, [r2, #8]
 8004b80:	3b01      	subs	r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	b410      	push	{r4}
 8004b86:	6093      	str	r3, [r2, #8]
 8004b88:	da08      	bge.n	8004b9c <__sfputc_r+0x1e>
 8004b8a:	6994      	ldr	r4, [r2, #24]
 8004b8c:	42a3      	cmp	r3, r4
 8004b8e:	db01      	blt.n	8004b94 <__sfputc_r+0x16>
 8004b90:	290a      	cmp	r1, #10
 8004b92:	d103      	bne.n	8004b9c <__sfputc_r+0x1e>
 8004b94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b98:	f000 b932 	b.w	8004e00 <__swbuf_r>
 8004b9c:	6813      	ldr	r3, [r2, #0]
 8004b9e:	1c58      	adds	r0, r3, #1
 8004ba0:	6010      	str	r0, [r2, #0]
 8004ba2:	7019      	strb	r1, [r3, #0]
 8004ba4:	4608      	mov	r0, r1
 8004ba6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <__sfputs_r>:
 8004bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bae:	4606      	mov	r6, r0
 8004bb0:	460f      	mov	r7, r1
 8004bb2:	4614      	mov	r4, r2
 8004bb4:	18d5      	adds	r5, r2, r3
 8004bb6:	42ac      	cmp	r4, r5
 8004bb8:	d101      	bne.n	8004bbe <__sfputs_r+0x12>
 8004bba:	2000      	movs	r0, #0
 8004bbc:	e007      	b.n	8004bce <__sfputs_r+0x22>
 8004bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bc2:	463a      	mov	r2, r7
 8004bc4:	4630      	mov	r0, r6
 8004bc6:	f7ff ffda 	bl	8004b7e <__sfputc_r>
 8004bca:	1c43      	adds	r3, r0, #1
 8004bcc:	d1f3      	bne.n	8004bb6 <__sfputs_r+0xa>
 8004bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004bd0 <_vfiprintf_r>:
 8004bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd4:	460d      	mov	r5, r1
 8004bd6:	b09d      	sub	sp, #116	@ 0x74
 8004bd8:	4614      	mov	r4, r2
 8004bda:	4698      	mov	r8, r3
 8004bdc:	4606      	mov	r6, r0
 8004bde:	b118      	cbz	r0, 8004be8 <_vfiprintf_r+0x18>
 8004be0:	6a03      	ldr	r3, [r0, #32]
 8004be2:	b90b      	cbnz	r3, 8004be8 <_vfiprintf_r+0x18>
 8004be4:	f7fe f904 	bl	8002df0 <__sinit>
 8004be8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004bea:	07d9      	lsls	r1, r3, #31
 8004bec:	d405      	bmi.n	8004bfa <_vfiprintf_r+0x2a>
 8004bee:	89ab      	ldrh	r3, [r5, #12]
 8004bf0:	059a      	lsls	r2, r3, #22
 8004bf2:	d402      	bmi.n	8004bfa <_vfiprintf_r+0x2a>
 8004bf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004bf6:	f7fe fa12 	bl	800301e <__retarget_lock_acquire_recursive>
 8004bfa:	89ab      	ldrh	r3, [r5, #12]
 8004bfc:	071b      	lsls	r3, r3, #28
 8004bfe:	d501      	bpl.n	8004c04 <_vfiprintf_r+0x34>
 8004c00:	692b      	ldr	r3, [r5, #16]
 8004c02:	b99b      	cbnz	r3, 8004c2c <_vfiprintf_r+0x5c>
 8004c04:	4629      	mov	r1, r5
 8004c06:	4630      	mov	r0, r6
 8004c08:	f000 f938 	bl	8004e7c <__swsetup_r>
 8004c0c:	b170      	cbz	r0, 8004c2c <_vfiprintf_r+0x5c>
 8004c0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c10:	07dc      	lsls	r4, r3, #31
 8004c12:	d504      	bpl.n	8004c1e <_vfiprintf_r+0x4e>
 8004c14:	f04f 30ff 	mov.w	r0, #4294967295
 8004c18:	b01d      	add	sp, #116	@ 0x74
 8004c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c1e:	89ab      	ldrh	r3, [r5, #12]
 8004c20:	0598      	lsls	r0, r3, #22
 8004c22:	d4f7      	bmi.n	8004c14 <_vfiprintf_r+0x44>
 8004c24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c26:	f7fe f9fb 	bl	8003020 <__retarget_lock_release_recursive>
 8004c2a:	e7f3      	b.n	8004c14 <_vfiprintf_r+0x44>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c30:	2320      	movs	r3, #32
 8004c32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c36:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c3a:	2330      	movs	r3, #48	@ 0x30
 8004c3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004dec <_vfiprintf_r+0x21c>
 8004c40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c44:	f04f 0901 	mov.w	r9, #1
 8004c48:	4623      	mov	r3, r4
 8004c4a:	469a      	mov	sl, r3
 8004c4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c50:	b10a      	cbz	r2, 8004c56 <_vfiprintf_r+0x86>
 8004c52:	2a25      	cmp	r2, #37	@ 0x25
 8004c54:	d1f9      	bne.n	8004c4a <_vfiprintf_r+0x7a>
 8004c56:	ebba 0b04 	subs.w	fp, sl, r4
 8004c5a:	d00b      	beq.n	8004c74 <_vfiprintf_r+0xa4>
 8004c5c:	465b      	mov	r3, fp
 8004c5e:	4622      	mov	r2, r4
 8004c60:	4629      	mov	r1, r5
 8004c62:	4630      	mov	r0, r6
 8004c64:	f7ff ffa2 	bl	8004bac <__sfputs_r>
 8004c68:	3001      	adds	r0, #1
 8004c6a:	f000 80a7 	beq.w	8004dbc <_vfiprintf_r+0x1ec>
 8004c6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c70:	445a      	add	r2, fp
 8004c72:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c74:	f89a 3000 	ldrb.w	r3, [sl]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 809f 	beq.w	8004dbc <_vfiprintf_r+0x1ec>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	f04f 32ff 	mov.w	r2, #4294967295
 8004c84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c88:	f10a 0a01 	add.w	sl, sl, #1
 8004c8c:	9304      	str	r3, [sp, #16]
 8004c8e:	9307      	str	r3, [sp, #28]
 8004c90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c94:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c96:	4654      	mov	r4, sl
 8004c98:	2205      	movs	r2, #5
 8004c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c9e:	4853      	ldr	r0, [pc, #332]	@ (8004dec <_vfiprintf_r+0x21c>)
 8004ca0:	f7fb fa9e 	bl	80001e0 <memchr>
 8004ca4:	9a04      	ldr	r2, [sp, #16]
 8004ca6:	b9d8      	cbnz	r0, 8004ce0 <_vfiprintf_r+0x110>
 8004ca8:	06d1      	lsls	r1, r2, #27
 8004caa:	bf44      	itt	mi
 8004cac:	2320      	movmi	r3, #32
 8004cae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cb2:	0713      	lsls	r3, r2, #28
 8004cb4:	bf44      	itt	mi
 8004cb6:	232b      	movmi	r3, #43	@ 0x2b
 8004cb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cbc:	f89a 3000 	ldrb.w	r3, [sl]
 8004cc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cc2:	d015      	beq.n	8004cf0 <_vfiprintf_r+0x120>
 8004cc4:	9a07      	ldr	r2, [sp, #28]
 8004cc6:	4654      	mov	r4, sl
 8004cc8:	2000      	movs	r0, #0
 8004cca:	f04f 0c0a 	mov.w	ip, #10
 8004cce:	4621      	mov	r1, r4
 8004cd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cd4:	3b30      	subs	r3, #48	@ 0x30
 8004cd6:	2b09      	cmp	r3, #9
 8004cd8:	d94b      	bls.n	8004d72 <_vfiprintf_r+0x1a2>
 8004cda:	b1b0      	cbz	r0, 8004d0a <_vfiprintf_r+0x13a>
 8004cdc:	9207      	str	r2, [sp, #28]
 8004cde:	e014      	b.n	8004d0a <_vfiprintf_r+0x13a>
 8004ce0:	eba0 0308 	sub.w	r3, r0, r8
 8004ce4:	fa09 f303 	lsl.w	r3, r9, r3
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	9304      	str	r3, [sp, #16]
 8004cec:	46a2      	mov	sl, r4
 8004cee:	e7d2      	b.n	8004c96 <_vfiprintf_r+0xc6>
 8004cf0:	9b03      	ldr	r3, [sp, #12]
 8004cf2:	1d19      	adds	r1, r3, #4
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	9103      	str	r1, [sp, #12]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	bfbb      	ittet	lt
 8004cfc:	425b      	neglt	r3, r3
 8004cfe:	f042 0202 	orrlt.w	r2, r2, #2
 8004d02:	9307      	strge	r3, [sp, #28]
 8004d04:	9307      	strlt	r3, [sp, #28]
 8004d06:	bfb8      	it	lt
 8004d08:	9204      	strlt	r2, [sp, #16]
 8004d0a:	7823      	ldrb	r3, [r4, #0]
 8004d0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d0e:	d10a      	bne.n	8004d26 <_vfiprintf_r+0x156>
 8004d10:	7863      	ldrb	r3, [r4, #1]
 8004d12:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d14:	d132      	bne.n	8004d7c <_vfiprintf_r+0x1ac>
 8004d16:	9b03      	ldr	r3, [sp, #12]
 8004d18:	1d1a      	adds	r2, r3, #4
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	9203      	str	r2, [sp, #12]
 8004d1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d22:	3402      	adds	r4, #2
 8004d24:	9305      	str	r3, [sp, #20]
 8004d26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004dfc <_vfiprintf_r+0x22c>
 8004d2a:	7821      	ldrb	r1, [r4, #0]
 8004d2c:	2203      	movs	r2, #3
 8004d2e:	4650      	mov	r0, sl
 8004d30:	f7fb fa56 	bl	80001e0 <memchr>
 8004d34:	b138      	cbz	r0, 8004d46 <_vfiprintf_r+0x176>
 8004d36:	9b04      	ldr	r3, [sp, #16]
 8004d38:	eba0 000a 	sub.w	r0, r0, sl
 8004d3c:	2240      	movs	r2, #64	@ 0x40
 8004d3e:	4082      	lsls	r2, r0
 8004d40:	4313      	orrs	r3, r2
 8004d42:	3401      	adds	r4, #1
 8004d44:	9304      	str	r3, [sp, #16]
 8004d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d4a:	4829      	ldr	r0, [pc, #164]	@ (8004df0 <_vfiprintf_r+0x220>)
 8004d4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d50:	2206      	movs	r2, #6
 8004d52:	f7fb fa45 	bl	80001e0 <memchr>
 8004d56:	2800      	cmp	r0, #0
 8004d58:	d03f      	beq.n	8004dda <_vfiprintf_r+0x20a>
 8004d5a:	4b26      	ldr	r3, [pc, #152]	@ (8004df4 <_vfiprintf_r+0x224>)
 8004d5c:	bb1b      	cbnz	r3, 8004da6 <_vfiprintf_r+0x1d6>
 8004d5e:	9b03      	ldr	r3, [sp, #12]
 8004d60:	3307      	adds	r3, #7
 8004d62:	f023 0307 	bic.w	r3, r3, #7
 8004d66:	3308      	adds	r3, #8
 8004d68:	9303      	str	r3, [sp, #12]
 8004d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d6c:	443b      	add	r3, r7
 8004d6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d70:	e76a      	b.n	8004c48 <_vfiprintf_r+0x78>
 8004d72:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d76:	460c      	mov	r4, r1
 8004d78:	2001      	movs	r0, #1
 8004d7a:	e7a8      	b.n	8004cce <_vfiprintf_r+0xfe>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	3401      	adds	r4, #1
 8004d80:	9305      	str	r3, [sp, #20]
 8004d82:	4619      	mov	r1, r3
 8004d84:	f04f 0c0a 	mov.w	ip, #10
 8004d88:	4620      	mov	r0, r4
 8004d8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d8e:	3a30      	subs	r2, #48	@ 0x30
 8004d90:	2a09      	cmp	r2, #9
 8004d92:	d903      	bls.n	8004d9c <_vfiprintf_r+0x1cc>
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0c6      	beq.n	8004d26 <_vfiprintf_r+0x156>
 8004d98:	9105      	str	r1, [sp, #20]
 8004d9a:	e7c4      	b.n	8004d26 <_vfiprintf_r+0x156>
 8004d9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004da0:	4604      	mov	r4, r0
 8004da2:	2301      	movs	r3, #1
 8004da4:	e7f0      	b.n	8004d88 <_vfiprintf_r+0x1b8>
 8004da6:	ab03      	add	r3, sp, #12
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	462a      	mov	r2, r5
 8004dac:	4b12      	ldr	r3, [pc, #72]	@ (8004df8 <_vfiprintf_r+0x228>)
 8004dae:	a904      	add	r1, sp, #16
 8004db0:	4630      	mov	r0, r6
 8004db2:	f7fd fbd9 	bl	8002568 <_printf_float>
 8004db6:	4607      	mov	r7, r0
 8004db8:	1c78      	adds	r0, r7, #1
 8004dba:	d1d6      	bne.n	8004d6a <_vfiprintf_r+0x19a>
 8004dbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004dbe:	07d9      	lsls	r1, r3, #31
 8004dc0:	d405      	bmi.n	8004dce <_vfiprintf_r+0x1fe>
 8004dc2:	89ab      	ldrh	r3, [r5, #12]
 8004dc4:	059a      	lsls	r2, r3, #22
 8004dc6:	d402      	bmi.n	8004dce <_vfiprintf_r+0x1fe>
 8004dc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004dca:	f7fe f929 	bl	8003020 <__retarget_lock_release_recursive>
 8004dce:	89ab      	ldrh	r3, [r5, #12]
 8004dd0:	065b      	lsls	r3, r3, #25
 8004dd2:	f53f af1f 	bmi.w	8004c14 <_vfiprintf_r+0x44>
 8004dd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004dd8:	e71e      	b.n	8004c18 <_vfiprintf_r+0x48>
 8004dda:	ab03      	add	r3, sp, #12
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	462a      	mov	r2, r5
 8004de0:	4b05      	ldr	r3, [pc, #20]	@ (8004df8 <_vfiprintf_r+0x228>)
 8004de2:	a904      	add	r1, sp, #16
 8004de4:	4630      	mov	r0, r6
 8004de6:	f7fd fe57 	bl	8002a98 <_printf_i>
 8004dea:	e7e4      	b.n	8004db6 <_vfiprintf_r+0x1e6>
 8004dec:	08005330 	.word	0x08005330
 8004df0:	0800533a 	.word	0x0800533a
 8004df4:	08002569 	.word	0x08002569
 8004df8:	08004bad 	.word	0x08004bad
 8004dfc:	08005336 	.word	0x08005336

08004e00 <__swbuf_r>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	460e      	mov	r6, r1
 8004e04:	4614      	mov	r4, r2
 8004e06:	4605      	mov	r5, r0
 8004e08:	b118      	cbz	r0, 8004e12 <__swbuf_r+0x12>
 8004e0a:	6a03      	ldr	r3, [r0, #32]
 8004e0c:	b90b      	cbnz	r3, 8004e12 <__swbuf_r+0x12>
 8004e0e:	f7fd ffef 	bl	8002df0 <__sinit>
 8004e12:	69a3      	ldr	r3, [r4, #24]
 8004e14:	60a3      	str	r3, [r4, #8]
 8004e16:	89a3      	ldrh	r3, [r4, #12]
 8004e18:	071a      	lsls	r2, r3, #28
 8004e1a:	d501      	bpl.n	8004e20 <__swbuf_r+0x20>
 8004e1c:	6923      	ldr	r3, [r4, #16]
 8004e1e:	b943      	cbnz	r3, 8004e32 <__swbuf_r+0x32>
 8004e20:	4621      	mov	r1, r4
 8004e22:	4628      	mov	r0, r5
 8004e24:	f000 f82a 	bl	8004e7c <__swsetup_r>
 8004e28:	b118      	cbz	r0, 8004e32 <__swbuf_r+0x32>
 8004e2a:	f04f 37ff 	mov.w	r7, #4294967295
 8004e2e:	4638      	mov	r0, r7
 8004e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	6922      	ldr	r2, [r4, #16]
 8004e36:	1a98      	subs	r0, r3, r2
 8004e38:	6963      	ldr	r3, [r4, #20]
 8004e3a:	b2f6      	uxtb	r6, r6
 8004e3c:	4283      	cmp	r3, r0
 8004e3e:	4637      	mov	r7, r6
 8004e40:	dc05      	bgt.n	8004e4e <__swbuf_r+0x4e>
 8004e42:	4621      	mov	r1, r4
 8004e44:	4628      	mov	r0, r5
 8004e46:	f7ff fd99 	bl	800497c <_fflush_r>
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	d1ed      	bne.n	8004e2a <__swbuf_r+0x2a>
 8004e4e:	68a3      	ldr	r3, [r4, #8]
 8004e50:	3b01      	subs	r3, #1
 8004e52:	60a3      	str	r3, [r4, #8]
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	6022      	str	r2, [r4, #0]
 8004e5a:	701e      	strb	r6, [r3, #0]
 8004e5c:	6962      	ldr	r2, [r4, #20]
 8004e5e:	1c43      	adds	r3, r0, #1
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d004      	beq.n	8004e6e <__swbuf_r+0x6e>
 8004e64:	89a3      	ldrh	r3, [r4, #12]
 8004e66:	07db      	lsls	r3, r3, #31
 8004e68:	d5e1      	bpl.n	8004e2e <__swbuf_r+0x2e>
 8004e6a:	2e0a      	cmp	r6, #10
 8004e6c:	d1df      	bne.n	8004e2e <__swbuf_r+0x2e>
 8004e6e:	4621      	mov	r1, r4
 8004e70:	4628      	mov	r0, r5
 8004e72:	f7ff fd83 	bl	800497c <_fflush_r>
 8004e76:	2800      	cmp	r0, #0
 8004e78:	d0d9      	beq.n	8004e2e <__swbuf_r+0x2e>
 8004e7a:	e7d6      	b.n	8004e2a <__swbuf_r+0x2a>

08004e7c <__swsetup_r>:
 8004e7c:	b538      	push	{r3, r4, r5, lr}
 8004e7e:	4b29      	ldr	r3, [pc, #164]	@ (8004f24 <__swsetup_r+0xa8>)
 8004e80:	4605      	mov	r5, r0
 8004e82:	6818      	ldr	r0, [r3, #0]
 8004e84:	460c      	mov	r4, r1
 8004e86:	b118      	cbz	r0, 8004e90 <__swsetup_r+0x14>
 8004e88:	6a03      	ldr	r3, [r0, #32]
 8004e8a:	b90b      	cbnz	r3, 8004e90 <__swsetup_r+0x14>
 8004e8c:	f7fd ffb0 	bl	8002df0 <__sinit>
 8004e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e94:	0719      	lsls	r1, r3, #28
 8004e96:	d422      	bmi.n	8004ede <__swsetup_r+0x62>
 8004e98:	06da      	lsls	r2, r3, #27
 8004e9a:	d407      	bmi.n	8004eac <__swsetup_r+0x30>
 8004e9c:	2209      	movs	r2, #9
 8004e9e:	602a      	str	r2, [r5, #0]
 8004ea0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ea4:	81a3      	strh	r3, [r4, #12]
 8004ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eaa:	e033      	b.n	8004f14 <__swsetup_r+0x98>
 8004eac:	0758      	lsls	r0, r3, #29
 8004eae:	d512      	bpl.n	8004ed6 <__swsetup_r+0x5a>
 8004eb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004eb2:	b141      	cbz	r1, 8004ec6 <__swsetup_r+0x4a>
 8004eb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004eb8:	4299      	cmp	r1, r3
 8004eba:	d002      	beq.n	8004ec2 <__swsetup_r+0x46>
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	f7fe feff 	bl	8003cc0 <_free_r>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ec6:	89a3      	ldrh	r3, [r4, #12]
 8004ec8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004ecc:	81a3      	strh	r3, [r4, #12]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	6063      	str	r3, [r4, #4]
 8004ed2:	6923      	ldr	r3, [r4, #16]
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	89a3      	ldrh	r3, [r4, #12]
 8004ed8:	f043 0308 	orr.w	r3, r3, #8
 8004edc:	81a3      	strh	r3, [r4, #12]
 8004ede:	6923      	ldr	r3, [r4, #16]
 8004ee0:	b94b      	cbnz	r3, 8004ef6 <__swsetup_r+0x7a>
 8004ee2:	89a3      	ldrh	r3, [r4, #12]
 8004ee4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004ee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004eec:	d003      	beq.n	8004ef6 <__swsetup_r+0x7a>
 8004eee:	4621      	mov	r1, r4
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	f000 f883 	bl	8004ffc <__smakebuf_r>
 8004ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004efa:	f013 0201 	ands.w	r2, r3, #1
 8004efe:	d00a      	beq.n	8004f16 <__swsetup_r+0x9a>
 8004f00:	2200      	movs	r2, #0
 8004f02:	60a2      	str	r2, [r4, #8]
 8004f04:	6962      	ldr	r2, [r4, #20]
 8004f06:	4252      	negs	r2, r2
 8004f08:	61a2      	str	r2, [r4, #24]
 8004f0a:	6922      	ldr	r2, [r4, #16]
 8004f0c:	b942      	cbnz	r2, 8004f20 <__swsetup_r+0xa4>
 8004f0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004f12:	d1c5      	bne.n	8004ea0 <__swsetup_r+0x24>
 8004f14:	bd38      	pop	{r3, r4, r5, pc}
 8004f16:	0799      	lsls	r1, r3, #30
 8004f18:	bf58      	it	pl
 8004f1a:	6962      	ldrpl	r2, [r4, #20]
 8004f1c:	60a2      	str	r2, [r4, #8]
 8004f1e:	e7f4      	b.n	8004f0a <__swsetup_r+0x8e>
 8004f20:	2000      	movs	r0, #0
 8004f22:	e7f7      	b.n	8004f14 <__swsetup_r+0x98>
 8004f24:	20000018 	.word	0x20000018

08004f28 <_raise_r>:
 8004f28:	291f      	cmp	r1, #31
 8004f2a:	b538      	push	{r3, r4, r5, lr}
 8004f2c:	4605      	mov	r5, r0
 8004f2e:	460c      	mov	r4, r1
 8004f30:	d904      	bls.n	8004f3c <_raise_r+0x14>
 8004f32:	2316      	movs	r3, #22
 8004f34:	6003      	str	r3, [r0, #0]
 8004f36:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3a:	bd38      	pop	{r3, r4, r5, pc}
 8004f3c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004f3e:	b112      	cbz	r2, 8004f46 <_raise_r+0x1e>
 8004f40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004f44:	b94b      	cbnz	r3, 8004f5a <_raise_r+0x32>
 8004f46:	4628      	mov	r0, r5
 8004f48:	f000 f830 	bl	8004fac <_getpid_r>
 8004f4c:	4622      	mov	r2, r4
 8004f4e:	4601      	mov	r1, r0
 8004f50:	4628      	mov	r0, r5
 8004f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f56:	f000 b817 	b.w	8004f88 <_kill_r>
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d00a      	beq.n	8004f74 <_raise_r+0x4c>
 8004f5e:	1c59      	adds	r1, r3, #1
 8004f60:	d103      	bne.n	8004f6a <_raise_r+0x42>
 8004f62:	2316      	movs	r3, #22
 8004f64:	6003      	str	r3, [r0, #0]
 8004f66:	2001      	movs	r0, #1
 8004f68:	e7e7      	b.n	8004f3a <_raise_r+0x12>
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004f70:	4620      	mov	r0, r4
 8004f72:	4798      	blx	r3
 8004f74:	2000      	movs	r0, #0
 8004f76:	e7e0      	b.n	8004f3a <_raise_r+0x12>

08004f78 <raise>:
 8004f78:	4b02      	ldr	r3, [pc, #8]	@ (8004f84 <raise+0xc>)
 8004f7a:	4601      	mov	r1, r0
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	f7ff bfd3 	b.w	8004f28 <_raise_r>
 8004f82:	bf00      	nop
 8004f84:	20000018 	.word	0x20000018

08004f88 <_kill_r>:
 8004f88:	b538      	push	{r3, r4, r5, lr}
 8004f8a:	4d07      	ldr	r5, [pc, #28]	@ (8004fa8 <_kill_r+0x20>)
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	4604      	mov	r4, r0
 8004f90:	4608      	mov	r0, r1
 8004f92:	4611      	mov	r1, r2
 8004f94:	602b      	str	r3, [r5, #0]
 8004f96:	f7fc f9da 	bl	800134e <_kill>
 8004f9a:	1c43      	adds	r3, r0, #1
 8004f9c:	d102      	bne.n	8004fa4 <_kill_r+0x1c>
 8004f9e:	682b      	ldr	r3, [r5, #0]
 8004fa0:	b103      	cbz	r3, 8004fa4 <_kill_r+0x1c>
 8004fa2:	6023      	str	r3, [r4, #0]
 8004fa4:	bd38      	pop	{r3, r4, r5, pc}
 8004fa6:	bf00      	nop
 8004fa8:	2000037c 	.word	0x2000037c

08004fac <_getpid_r>:
 8004fac:	f7fc b9c7 	b.w	800133e <_getpid>

08004fb0 <__swhatbuf_r>:
 8004fb0:	b570      	push	{r4, r5, r6, lr}
 8004fb2:	460c      	mov	r4, r1
 8004fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fb8:	2900      	cmp	r1, #0
 8004fba:	b096      	sub	sp, #88	@ 0x58
 8004fbc:	4615      	mov	r5, r2
 8004fbe:	461e      	mov	r6, r3
 8004fc0:	da0d      	bge.n	8004fde <__swhatbuf_r+0x2e>
 8004fc2:	89a3      	ldrh	r3, [r4, #12]
 8004fc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004fc8:	f04f 0100 	mov.w	r1, #0
 8004fcc:	bf14      	ite	ne
 8004fce:	2340      	movne	r3, #64	@ 0x40
 8004fd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004fd4:	2000      	movs	r0, #0
 8004fd6:	6031      	str	r1, [r6, #0]
 8004fd8:	602b      	str	r3, [r5, #0]
 8004fda:	b016      	add	sp, #88	@ 0x58
 8004fdc:	bd70      	pop	{r4, r5, r6, pc}
 8004fde:	466a      	mov	r2, sp
 8004fe0:	f000 f848 	bl	8005074 <_fstat_r>
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	dbec      	blt.n	8004fc2 <__swhatbuf_r+0x12>
 8004fe8:	9901      	ldr	r1, [sp, #4]
 8004fea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004fee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004ff2:	4259      	negs	r1, r3
 8004ff4:	4159      	adcs	r1, r3
 8004ff6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ffa:	e7eb      	b.n	8004fd4 <__swhatbuf_r+0x24>

08004ffc <__smakebuf_r>:
 8004ffc:	898b      	ldrh	r3, [r1, #12]
 8004ffe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005000:	079d      	lsls	r5, r3, #30
 8005002:	4606      	mov	r6, r0
 8005004:	460c      	mov	r4, r1
 8005006:	d507      	bpl.n	8005018 <__smakebuf_r+0x1c>
 8005008:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800500c:	6023      	str	r3, [r4, #0]
 800500e:	6123      	str	r3, [r4, #16]
 8005010:	2301      	movs	r3, #1
 8005012:	6163      	str	r3, [r4, #20]
 8005014:	b003      	add	sp, #12
 8005016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005018:	ab01      	add	r3, sp, #4
 800501a:	466a      	mov	r2, sp
 800501c:	f7ff ffc8 	bl	8004fb0 <__swhatbuf_r>
 8005020:	9f00      	ldr	r7, [sp, #0]
 8005022:	4605      	mov	r5, r0
 8005024:	4639      	mov	r1, r7
 8005026:	4630      	mov	r0, r6
 8005028:	f7fe febe 	bl	8003da8 <_malloc_r>
 800502c:	b948      	cbnz	r0, 8005042 <__smakebuf_r+0x46>
 800502e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005032:	059a      	lsls	r2, r3, #22
 8005034:	d4ee      	bmi.n	8005014 <__smakebuf_r+0x18>
 8005036:	f023 0303 	bic.w	r3, r3, #3
 800503a:	f043 0302 	orr.w	r3, r3, #2
 800503e:	81a3      	strh	r3, [r4, #12]
 8005040:	e7e2      	b.n	8005008 <__smakebuf_r+0xc>
 8005042:	89a3      	ldrh	r3, [r4, #12]
 8005044:	6020      	str	r0, [r4, #0]
 8005046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800504a:	81a3      	strh	r3, [r4, #12]
 800504c:	9b01      	ldr	r3, [sp, #4]
 800504e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005052:	b15b      	cbz	r3, 800506c <__smakebuf_r+0x70>
 8005054:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005058:	4630      	mov	r0, r6
 800505a:	f000 f81d 	bl	8005098 <_isatty_r>
 800505e:	b128      	cbz	r0, 800506c <__smakebuf_r+0x70>
 8005060:	89a3      	ldrh	r3, [r4, #12]
 8005062:	f023 0303 	bic.w	r3, r3, #3
 8005066:	f043 0301 	orr.w	r3, r3, #1
 800506a:	81a3      	strh	r3, [r4, #12]
 800506c:	89a3      	ldrh	r3, [r4, #12]
 800506e:	431d      	orrs	r5, r3
 8005070:	81a5      	strh	r5, [r4, #12]
 8005072:	e7cf      	b.n	8005014 <__smakebuf_r+0x18>

08005074 <_fstat_r>:
 8005074:	b538      	push	{r3, r4, r5, lr}
 8005076:	4d07      	ldr	r5, [pc, #28]	@ (8005094 <_fstat_r+0x20>)
 8005078:	2300      	movs	r3, #0
 800507a:	4604      	mov	r4, r0
 800507c:	4608      	mov	r0, r1
 800507e:	4611      	mov	r1, r2
 8005080:	602b      	str	r3, [r5, #0]
 8005082:	f7fc f9c4 	bl	800140e <_fstat>
 8005086:	1c43      	adds	r3, r0, #1
 8005088:	d102      	bne.n	8005090 <_fstat_r+0x1c>
 800508a:	682b      	ldr	r3, [r5, #0]
 800508c:	b103      	cbz	r3, 8005090 <_fstat_r+0x1c>
 800508e:	6023      	str	r3, [r4, #0]
 8005090:	bd38      	pop	{r3, r4, r5, pc}
 8005092:	bf00      	nop
 8005094:	2000037c 	.word	0x2000037c

08005098 <_isatty_r>:
 8005098:	b538      	push	{r3, r4, r5, lr}
 800509a:	4d06      	ldr	r5, [pc, #24]	@ (80050b4 <_isatty_r+0x1c>)
 800509c:	2300      	movs	r3, #0
 800509e:	4604      	mov	r4, r0
 80050a0:	4608      	mov	r0, r1
 80050a2:	602b      	str	r3, [r5, #0]
 80050a4:	f7fc f9c3 	bl	800142e <_isatty>
 80050a8:	1c43      	adds	r3, r0, #1
 80050aa:	d102      	bne.n	80050b2 <_isatty_r+0x1a>
 80050ac:	682b      	ldr	r3, [r5, #0]
 80050ae:	b103      	cbz	r3, 80050b2 <_isatty_r+0x1a>
 80050b0:	6023      	str	r3, [r4, #0]
 80050b2:	bd38      	pop	{r3, r4, r5, pc}
 80050b4:	2000037c 	.word	0x2000037c

080050b8 <_init>:
 80050b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ba:	bf00      	nop
 80050bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050be:	bc08      	pop	{r3}
 80050c0:	469e      	mov	lr, r3
 80050c2:	4770      	bx	lr

080050c4 <_fini>:
 80050c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c6:	bf00      	nop
 80050c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ca:	bc08      	pop	{r3}
 80050cc:	469e      	mov	lr, r3
 80050ce:	4770      	bx	lr
